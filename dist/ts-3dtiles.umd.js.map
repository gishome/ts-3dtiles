{"version":3,"file":"ts-3dtiles.umd.js","sources":["../src/utils/io/writeDefinedProperty.ts","../src/utils/io/writeExtensionsProperty.ts","../src/gltf/core/def/enum/gltf-version.ts","../src/gltf/core/def/enum/gltf-bufferview-target.ts","../src/gltf/core/def/gltf-asset.ts","../src/gltf/core/def/gltf-buffer.ts","../src/gltf/core/def/enum/gltf-alphamode.ts","../src/gltf/core/def/gltf-bufferview.ts","../src/gltf/core/def/enum/gltf-attribute-type.ts","../src/gltf/core/def/enum/gltf-component-type.ts","../src/gltf/core/def/enum/gltf-filter.ts","../src/gltf/core/def/enum/gltf-wrapmode.ts","../src/gltf/core/def/enum/gltf-primitivemode.ts","../src/gltf/core/def/enum/mime.ts","../src/gltf/core/def/gltf-primitive-attribute.ts","../src/gltf/core/def/gltf-texture-info.ts","../src/gltf/core/gltf-document.ts","../src/gltf/ext/gltf-extension-base.ts","../src/gltf/io/read-action/read-gltf.ts","../node_modules/iobuffer/src/text-encoding-polyfill.js","../node_modules/iobuffer/src/utf8.browser.ts","../node_modules/iobuffer/src/IOBuffer.ts","../src/tileset/ext/ext-base.ts","../src/tileset/core/def/tile-header-base.ts","../src/tileset/core/def/tile-b3dm/header.ts","../src/tileset/core/def/enum/featuretable-type.ts","../src/tileset/core/def/enum/tile-refine.ts","../src/tileset/core/def/featuretable/featuretable-base.ts","../src/tileset/core/def/featuretable/featuretable-b3dm.ts","../src/tileset/core/def/batchtable/batchtable-base.ts","../src/tileset/core/def/tile-i3dm/header.ts","../src/tileset/core/def/featuretable/featuretable-i3dm.ts","../src/tileset/core/def/tile-pnts/header.ts","../src/tileset/core/def/featuretable/featuretable-pnts.ts","../src/tileset/core/def/asset.ts","../src/tileset/core/def/tile-b3dm/index.ts","../src/tileset/ext/ext-batchtable-hierarchy.ts","../src/tileset/ext/ext-content-gltf.ts","../src/gltf/ext/ext-draco.ts","../src/tileset/ext/ext-implicit-tiling.ts","../src/tileset/ext/ext-layers.ts","../src/tileset/ext/ext-metadata.ts","../src/tileset/ext/ext-multiple-content.ts","../src/gltf/ext/ext-pbr-specular-glossiness.ts","../src/tileset/ext/ext-pnts-draco.ts","../src/gltf/core/def/gltf-accessor.ts","../src/gltf/core/def/gltf-accessor-sparse.ts","../src/gltf/core/def/gltf-accessor-sparse-indices.ts","../src/gltf/core/def/gltf-accessor-sparse-values.ts","../src/gltf/core/def/gltf-animation.ts","../src/gltf/core/def/gltf-animation-channel.ts","../src/gltf/core/def/gltf-animation-channel-target.ts","../src/gltf/core/def/gltf-animation-sampler.ts","../src/gltf/core/def/gltf-camera.ts","../src/gltf/core/def/gltf-image.ts","../src/gltf/core/def/gltf-material.ts","../src/gltf/core/def/gltf-mesh.ts","../src/gltf/core/def/gltf-node.ts","../src/gltf/core/def/gltf-normal-texture-info.ts","../src/gltf/core/def/gltf-occlusion-texture-info.ts","../src/gltf/core/def/gltf-orthographic-camera.ts","../src/gltf/core/def/gltf-pbr.ts","../src/gltf/core/def/gltf-perspective-camera.ts","../src/gltf/core/def/gltf-primitive.ts","../src/gltf/core/def/gltf-sampler.ts","../src/gltf/core/def/gltf-scene.ts","../src/gltf/core/def/gltf-skin.ts","../src/gltf/core/def/gltf-texture.ts","../src/tileset/core/def/tile-i3dm/index.ts","../src/tileset/core/def/tile-pnts/index.ts","../src/tileset/core/def/tile.ts","../src/tileset/core/def/tile-bounding-volume.ts","../src/tileset/core/def/tile-content.ts","../src/tileset/core/def/tileset.ts","../src/tileset/core/def/featuretable/featuretable-vctr.ts","../src/gltf/io/read-action/read-glb.ts"],"sourcesContent":["function writeDefinedProperty(obj: any, name: string, data: any) {\r\n  if (data !== undefined)\r\n    Object.defineProperty(obj, name, {\r\n      value: data\r\n    })\r\n}\r\n\r\nexport default writeDefinedProperty","import { GLTFExtensionBase } from \"src/gltf\";\r\n\r\nfunction writeExtensionsProperty(obj: any, exts?: Set<GLTFExtensionBase>) {\r\n  if (exts !== undefined) {\r\n    const extObj = {}\r\n    const _ = [...exts]\r\n    _.forEach(ext => {\r\n      Object.defineProperty(extObj, ext.name, {\r\n        value: ext.json()\r\n      })\r\n    })\r\n    Object.defineProperty(obj, 'extensions', {\r\n      value: extObj\r\n    })\r\n  }\r\n}\r\n\r\nexport default writeExtensionsProperty","enum GLTFVersion {\r\n  TWO = \"2.0\",\r\n  ONE = \"1.0\"\r\n}\r\n\r\nexport default GLTFVersion","enum GLTFBufferViewTarget {\r\n  ARRAY_BUFFER = 34962,\r\n  ELEMENT_ARRAY_BUFFER = 34963\r\n}\r\n\r\nexport default GLTFBufferViewTarget","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFVersion from \"./enum/gltf-version\"\r\n\r\nclass GLTFAsset implements IValidate, ISerializable {\r\n  version: GLTFVersion = GLTFVersion.TWO\r\n  generator?: string\r\n  copyright?: string\r\n  minVersion?: GLTFVersion\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n  json() {\r\n    const asset = {\r\n      version: this.version\r\n    }\r\n    writeDefinedProperty(asset, 'generator', this.generator)\r\n    writeDefinedProperty(asset, 'minVersion', this.minVersion)\r\n    writeDefinedProperty(asset, 'copyright', this.copyright)\r\n    writeDefinedProperty(asset, 'extensions', this.generator)\r\n    writeDefinedProperty(asset, 'extras', this.extras)\r\n\r\n    return asset\r\n  }\r\n}\r\n\r\nexport default GLTFAsset","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFBuffer implements IValidate, ISerializable {\r\n  byteLength: number = 0\r\n  uri?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  /** @deprecated */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n\r\n  validate() {\r\n    return this.byteLength > 0\r\n  }\r\n\r\n  json() {\r\n    const bf = {\r\n      byteLength: this.byteLength\r\n    }\r\n    writeDefinedProperty(bf, 'uri', this.uri)\r\n    writeExtensionsProperty(bf, this.extensions)\r\n    writeDefinedProperty(bf, 'extras', this.extras)\r\n\r\n    return bf\r\n  }\r\n}\r\n\r\nexport default GLTFBuffer","/**\r\n * @enum {GLTFAlphaMode} 透明度模式\r\n */\r\nenum GLTFAlphaMode {\r\n  /** \r\n   * @description 不透明。默认选项。\r\n   */\r\n  OPAQUE = \"OPAQUE\",\r\n  /**\r\n   * @description 透明度取决于 alphaCutOff 值，即半透明\r\n   */\r\n  MASK = \"MASK\",\r\n  /**\r\n   * @description 混合模式\r\n   */\r\n  BLEND = \"BLEND\"\r\n}\r\n\r\nexport default GLTFAlphaMode","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFBufferViewTarget from \"./enum/gltf-bufferview-target\"\r\n\r\n\r\nclass GLTFBufferView implements IValidate, ISerializable {\r\n  buffer: number = 0\r\n  byteLength: number = 1\r\n  byteOffset?: number = 0\r\n  byteStride?: number = 4\r\n  target?: GLTFBufferViewTarget\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.buffer < 0) {\r\n      return false\r\n    }\r\n    if (this.byteLength < 1) {\r\n      return false\r\n    }\r\n    if (this.byteOffset! < 0) {\r\n      return false\r\n    }\r\n    if (this.byteStride! % 4 !== 0 || this.byteStride! > 252 || this.byteStride! < 4) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFBufferView json()] 当前 bufferView 属性不合法，请检查')\r\n    }\r\n\r\n    const bv = {\r\n      buffer: this.buffer,\r\n      byteLength: this.byteLength,\r\n    }\r\n\r\n    if (this.target === GLTFBufferViewTarget.ARRAY_BUFFER || this.target === GLTFBufferViewTarget.ELEMENT_ARRAY_BUFFER) {\r\n      writeDefinedProperty(bv, 'target', this.target)\r\n    }\r\n    writeDefinedProperty(bv, 'byteOffset', this.byteOffset)\r\n    writeDefinedProperty(bv, 'byteStride', this.byteStride)\r\n    writeExtensionsProperty(bv, this.extensions)\r\n    writeDefinedProperty(bv, 'extras', this.extras)\r\n\r\n    return bv\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default GLTFBufferView","enum GLTFAttributeType {\r\n  SCALAR = \"SCALAR\",\r\n  VEC2 = \"VEC2\",\r\n  VEC3 = \"VEC3\",\r\n  VEC4 = \"VEC4\",\r\n  MAT2 = \"MAT2\",\r\n  MAT3 = \"MAT3\",\r\n  MAT4 = \"MAT4\",\r\n}\r\n\r\nexport const getAttributeTypeElementCount = (t: GLTFAttributeType): number => {\r\n  switch (t) {\r\n    case GLTFAttributeType.VEC2:\r\n      return 2\r\n    case GLTFAttributeType.VEC3:\r\n      return 3\r\n    case GLTFAttributeType.VEC4:\r\n    case GLTFAttributeType.MAT2:\r\n      return 4\r\n    case GLTFAttributeType.MAT3:\r\n      return 9\r\n    case GLTFAttributeType.MAT4:\r\n      return 16\r\n    default: // means SCALAR\r\n      return 1\r\n  }\r\n}\r\n\r\nexport default GLTFAttributeType","enum GLTFComponentType {\r\n  BYTE = 5120,\r\n  UNSIGNED_BYTE = 5121,\r\n  SHORT = 5122,\r\n  UNSIGNED_SHORT = 5123,\r\n  UNSIGNED_INT = 5125,\r\n  FLOAT = 5126\r\n}\r\n\r\nexport const getComponentTypeByteSize = (t: GLTFComponentType): number => {\r\n  switch (t) {\r\n    case GLTFComponentType.BYTE:\r\n    case GLTFComponentType.UNSIGNED_BYTE:\r\n      return 1\r\n    case GLTFComponentType.SHORT:\r\n    case GLTFComponentType.UNSIGNED_SHORT:\r\n      return 2\r\n    case GLTFComponentType.UNSIGNED_INT:\r\n      return 4\r\n    default: // means FLOAT\r\n      return 8\r\n  }\r\n}\r\n\r\nexport default GLTFComponentType","enum GLTFFilter {\r\n  NEAREST = 9728,\r\n  LINEAR = 9729,\r\n  NEAREST_MIPMAP_NEAREST = 9984,\r\n  LINEAR_MIPMAP_NEAREST = 9985,\r\n  NEAREST_MIPMAP_LINEAR = 9986,\r\n  LINEAR_MIPMAP_LINEAR = 9987\r\n}\r\n\r\nexport default GLTFFilter","enum GLTFWrapMode {\r\n  REPEAT = 10497,\r\n  CLAMP_TO_EDGE = 33071,\r\n  MIRRORED_REPEAT = 33648,\r\n}\r\n\r\nexport default GLTFWrapMode","enum GLTFPrimitiveMode {\r\n  POINTS = 0,\r\n  LINES = 1,\r\n  LINE_LOOP = 2,\r\n  LINE_STRIP = 3,\r\n  TRIANGLES = 4,\r\n  TRIANGLE_STRIP = 5,\r\n  TRIANGLE_FAN = 6\r\n}\r\n\r\nexport default GLTFPrimitiveMode","enum MIME {\r\n  JPG = \"image/jpg\",\r\n  JPEG = \"image/jpeg\",\r\n  PNG = \"image/png\",\r\n  WEBP = \"image/webp\",\r\n}\r\n\r\nexport default MIME","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\n\r\nclass GLTFPrimitiveAttribute implements IValidate, ISerializable {\r\n  position: number\r\n  uv0?: number\r\n  uv1?: number\r\n  color0?: number\r\n  normal?: number\r\n  tangent?: number\r\n  joints0?: number\r\n  weights0?: number\r\n\r\n  constructor(options: {\r\n    position: number,\r\n    uv0?: number,\r\n    uv1?: number,\r\n    color0?: number,\r\n    normal?: number,\r\n    tangent?: number,\r\n    joints0?: number\r\n    weights0?: number\r\n  }) {\r\n    this.position = options.position\r\n    this.uv0 = options.uv0\r\n    this.uv1 = options.uv1\r\n    this.color0 = options.color0\r\n    this.normal = options.normal\r\n    this.tangent = options.tangent\r\n    this.joints0 = options.joints0\r\n    this.weights0 = options.weights0\r\n  }\r\n\r\n  validate() {\r\n    return Object.values(this).every(k => k! < 0)\r\n  }\r\n\r\n  json() {\r\n    const attr = {\r\n      POSITION: this.position,\r\n    }\r\n    writeDefinedProperty(attr, 'NORMAL', this.normal)\r\n    writeDefinedProperty(attr, 'TANGENT', this.tangent)\r\n    writeDefinedProperty(attr, 'TEXCOORD_0', this.uv0)\r\n    writeDefinedProperty(attr, 'TEXCOORD_1', this.uv1)\r\n    writeDefinedProperty(attr, 'COLOR_0', this.color0)\r\n    writeDefinedProperty(attr, 'JOINTS_0', this.joints0)\r\n    writeDefinedProperty(attr, 'WEIGHTS_0', this.weights0)\r\n\r\n    return attr\r\n  }\r\n}\r\n\r\nexport default GLTFPrimitiveAttribute","import { ISerializable, IValidate } from \"src/interfaces\"\r\n\r\nclass GLTFTextureInfo implements IValidate, ISerializable {\r\n  index: number\r\n  texCoord: number\r\n\r\n  constructor(index: number, texCoord: number) {\r\n    this.index = index\r\n    this.texCoord = texCoord\r\n  }\r\n\r\n  validate() {\r\n    return (this.index < 0 || this.texCoord < 0)\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFTextureInfo json()] 当前 textureinfo 对象属性不合法，请检查')\r\n    }\r\n\r\n    const tinfo = {\r\n      index: this.index,\r\n      texCoord: this.texCoord\r\n    }\r\n\r\n    return tinfo\r\n  }\r\n}\r\n\r\nexport default GLTFTextureInfo","import ISerializable from 'src/interfaces/ISerializable'\r\nimport writeDefinedProperty from 'src/utils/io/writeDefinedProperty'\r\nimport writeExtensionsProperty from 'src/utils/io/writeExtensionsProperty'\r\nimport { GLTFExtensionBase } from '../ext'\r\nimport {\r\n  GLTFAsset,\r\n  GLTFBuffer,\r\n  GLTFBufferView,\r\n  GLTFAccessor,\r\n  GLTFScene,\r\n  GLTFNode,\r\n  GLTFMesh,\r\n  GLTFMaterial,\r\n  GLTFImage,\r\n  GLTFTexture,\r\n  GLTFSampler,\r\n  GLTFAnimation,\r\n  GLTFCamera,\r\n  GLTFSkin,\r\n} from './def'\r\n\r\nclass GLTFDocument implements ISerializable {\r\n  asset: GLTFAsset = new GLTFAsset()\r\n  scene?: number = 0\r\n\r\n  buffers: GLTFBuffer[] = []\r\n  bufferViews: GLTFBufferView[] = []\r\n  accessors: GLTFAccessor[] = []\r\n\r\n  scenes: GLTFScene[] = []\r\n  nodes: GLTFNode[] = []\r\n  meshes: GLTFMesh[] = []\r\n\r\n  materials?: GLTFMaterial[] = []\r\n  textures?: GLTFTexture[] = []\r\n  images?: GLTFImage[]\r\n  samplers?: GLTFSampler[]\r\n\r\n  animations?: GLTFAnimation[]\r\n  cameras?: GLTFCamera[]\r\n  skins?: GLTFSkin[]\r\n\r\n  extensions?: Set<GLTFExtensionBase>\r\n  extras?: object\r\n  extensionsUsed?: string[]\r\n  extensionsRequired?: string[]\r\n\r\n  json() {\r\n    const gltfObj = {\r\n      asset: this.asset.json(),\r\n      buffers: this.buffers.map(buffer => buffer.json()),\r\n      bufferViews: this.bufferViews.map(bufferView => bufferView.json()),\r\n      accessors: this.accessors.map(acc => acc.json()),\r\n      \r\n      scenes: this.scenes.map(scene => scene.json()),\r\n      nodes: this.nodes.map(node => node.json()),\r\n      meshes: this.meshes.map(mesh => mesh.json()),\r\n    }\r\n    writeDefinedProperty(gltfObj, 'scene', this.scene)\r\n    writeDefinedProperty(gltfObj, 'materials', this.materials !== undefined && this.materials.length !== 0 ? this.materials.map(mt => mt.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'textures', this.textures !== undefined && this.textures.length !== 0 ? this.textures.map(tx => tx.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'images', this.images !== undefined && this.images.length !== 0 ? this.images.map(img => img.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'samplers', this.samplers !== undefined && this.samplers.length !== 0 ? this.samplers.map(spl => spl.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'cameras', this.cameras !== undefined && this.cameras.length !== 0 ? this.cameras.map(c => c.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'animations', this.animations !== undefined && this.animations.length !== 0 ? this.animations.map(ani => ani.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'skins', this.skins !== undefined && this.skins.length !== 0 ? this.skins.map(skin => skin.json()) : undefined)\r\n\r\n    writeExtensionsProperty(gltfObj, this.extensions)\r\n    writeDefinedProperty(gltfObj, 'extras', this.extras)\r\n    writeDefinedProperty(gltfObj, 'extensionsUsed', this.extensionsUsed)\r\n    writeDefinedProperty(gltfObj, 'extensionsRequired', this.extensionsRequired)\r\n  }\r\n}\r\n\r\nexport default GLTFDocument","import { ISerializable, IValidate } from \"src/interfaces\"\r\n\r\nclass GLTFExtensionBase implements IValidate, ISerializable {\r\n  protected _name: string = \"\"\r\n  get name() {\r\n    return this._name\r\n  }\r\n  \r\n  get isRequire() {\r\n    return false\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    return\r\n  }\r\n}\r\n\r\nexport default GLTFExtensionBase","import { GLTFAsset, GLTFBuffer, GLTFBufferView, GLTFDocument, GLTFVersion } from \"src/gltf/core\"\r\nimport { IGLTFObj } from \"src/interfaces\"\r\nimport { IGLTFAsset, IGLTFBuffer, IGLTFBufferView } from \"src/interfaces/IGLTFObj\"\r\nimport GLTFReadType from \"src/interfaces/GLTFReadType\"\r\nimport GLTFResources from \"src/interfaces/GLTFResources\"\r\n\r\nfunction readAsset(gltfAsset: GLTFAsset, json: IGLTFAsset) {\r\n  gltfAsset.version = json.version === \"1.0\" ? GLTFVersion.ONE : GLTFVersion.TWO\r\n  gltfAsset.minVersion = json.minVersion === \"1.0\" ? GLTFVersion.ONE : GLTFVersion.TWO\r\n  gltfAsset.copyright = json.copyright\r\n  gltfAsset.generator = json.generator\r\n  gltfAsset.extras = json.extras\r\n  // extensions 单独处理\r\n}\r\n\r\nfunction readBuffers(gltfBuffers: GLTFBuffer[], json: IGLTFBuffer[]) {\r\n  for (const bfjson of json) {\r\n    const bf = new GLTFBuffer()\r\n    bf.uri = bfjson.uri\r\n    bf.byteLength = bfjson.byteLength\r\n    bf.extras = bfjson.extras\r\n    // extensions 单独处理\r\n    gltfBuffers.push(bf)\r\n  }\r\n}\r\n\r\nfunction readBufferViews(gltfBufferViews: GLTFBufferView[], json: IGLTFBufferView[]) {\r\n  for (const bvjson of json) {\r\n    const bv = new GLTFBufferView()\r\n    bv.buffer = bvjson.buffer\r\n    bv.byteLength = bvjson.byteLength\r\n    bv.byteOffset = bvjson.byteOffset\r\n    bv.extras = bvjson.extras\r\n    bv.target = bvjson.target\r\n    // extensions 单独处理\r\n    gltfBufferViews.push(bv)\r\n  }\r\n}\r\n\r\n// function bind(doc: GLTFDocument) {\r\n//   // 绑定 doc 到各个元素上\r\n// }\r\n\r\nconst readGLTF = (json: GLTFReadType, ...resources: GLTFResources[]): GLTFDocument => {\r\n  const doc = new GLTFDocument()\r\n  let resourcesLength = resources.length\r\n  console.log(`Resources Length is ${resourcesLength}`);\r\n\r\n  let obj = json\r\n  if (typeof json === \"string\") {\r\n    obj = JSON.parse(json.trim())\r\n  }\r\n  obj = obj as IGLTFObj\r\n\r\n  doc.scene = obj['scene']\r\n  readAsset(doc.asset, obj['asset'])\r\n  readBuffers(doc.buffers, obj['buffers'])\r\n  readBufferViews(doc.bufferViews, obj['bufferViews'])\r\n\r\n  // bind(doc)\r\n  return doc\r\n}\r\n\r\nexport default readGLTF","/*\n * Copyright 2017 Sam Thorogood. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n(function(scope) {\n  'use strict';\n\n  // fail early\n  if (scope['TextEncoder'] && scope['TextDecoder']) {\n    return false;\n  }\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   */\n  function FastTextEncoder(utfLabel = 'utf-8') {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextEncoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextEncoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  /**\n   * @param {string} string\n   * @param {{stream: boolean}=} options\n   * @return {!Uint8Array}\n   */\n  FastTextEncoder.prototype.encode = function(\n    string,\n    options = { stream: false },\n  ) {\n    if (options.stream) {\n      throw new Error(`Failed to encode: the 'stream' option is unsupported.`);\n    }\n\n    let pos = 0;\n    const len = string.length;\n    const out = [];\n\n    let at = 0; // output position\n    let tlen = Math.max(32, len + (len >> 1) + 7); // 1.5x size\n    let target = new Uint8Array((tlen >> 3) << 3); // ... but at 8 byte offset\n\n    while (pos < len) {\n      let value = string.charCodeAt(pos++);\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < len) {\n          const extra = string.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n        if (value >= 0xd800 && value <= 0xdbff) {\n          continue; // drop lone surrogate\n        }\n      }\n\n      // expand the buffer if we couldn't write 4 bytes\n      if (at + 4 > target.length) {\n        tlen += 8; // minimum extra\n        tlen *= 1.0 + (pos / string.length) * 2; // take 2x the remaining\n        tlen = (tlen >> 3) << 3; // 8 byte offset\n\n        const update = new Uint8Array(tlen);\n        update.set(target);\n        target = update;\n      }\n\n      if ((value & 0xffffff80) === 0) {\n        // 1-byte\n        target[at++] = value; // ASCII\n        continue;\n      } else if ((value & 0xfffff800) === 0) {\n        // 2-byte\n        target[at++] = ((value >> 6) & 0x1f) | 0xc0;\n      } else if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        target[at++] = ((value >> 12) & 0x0f) | 0xe0;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else if ((value & 0xffe00000) === 0) {\n        // 4-byte\n        target[at++] = ((value >> 18) & 0x07) | 0xf0;\n        target[at++] = ((value >> 12) & 0x3f) | 0x80;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // FIXME: do we care\n        continue;\n      }\n\n      target[at++] = (value & 0x3f) | 0x80;\n    }\n\n    return target.slice(0, at);\n  };\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   * @param {{fatal: boolean}=} options\n   */\n  function FastTextDecoder(utfLabel = 'utf-8', options = { fatal: false }) {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextDecoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n    if (options.fatal) {\n      throw new Error(\n        `Failed to construct 'TextDecoder': the 'fatal' option is unsupported.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextDecoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'fatal', { value: false });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'ignoreBOM', {\n    value: false,\n  });\n\n  /**\n   * @param {(!ArrayBuffer|!ArrayBufferView)} buffer\n   * @param {{stream: boolean}=} options\n   */\n  FastTextDecoder.prototype.decode = function(\n    buffer,\n    options = { stream: false },\n  ) {\n    if (options['stream']) {\n      throw new Error(`Failed to decode: the 'stream' option is unsupported.`);\n    }\n\n    const bytes = new Uint8Array(buffer);\n    let pos = 0;\n    const len = bytes.length;\n    const out = [];\n\n    while (pos < len) {\n      const byte1 = bytes[pos++];\n      if (byte1 === 0) {\n        break; // NULL\n      }\n\n      if ((byte1 & 0x80) === 0) {\n        // 1-byte\n        out.push(byte1);\n      } else if ((byte1 & 0xe0) === 0xc0) {\n        // 2-byte\n        const byte2 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 6) | byte2);\n      } else if ((byte1 & 0xf0) === 0xe0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n      } else if ((byte1 & 0xf8) === 0xf0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        const byte4 = bytes[pos++] & 0x3f;\n\n        // this can be > 0xffff, so possibly generate surrogates\n        let codepoint =\n          ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n        if (codepoint > 0xffff) {\n          // codepoint &= ~0x10000;\n          codepoint -= 0x10000;\n          out.push(((codepoint >>> 10) & 0x3ff) | 0xd800);\n          codepoint = 0xdc00 | (codepoint & 0x3ff);\n        }\n        out.push(codepoint);\n      } else {\n        // FIXME: we're ignoring this\n      }\n    }\n\n    return String.fromCharCode.apply(null, out);\n  };\n\n  scope['TextEncoder'] = FastTextEncoder;\n  scope['TextDecoder'] = FastTextDecoder;\n})(\n  typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : this,\n);\n","// eslint-disable-next-line import/no-unassigned-import\nimport './text-encoding-polyfill';\n\nconst decoder = new TextDecoder('utf-8');\n\nexport function decode(bytes: Uint8Array): string {\n  return decoder.decode(bytes);\n}\n\nconst encoder = new TextEncoder();\n\nexport function encode(str: string): Uint8Array {\n  return encoder.encode(str);\n}\n","import { decode, encode } from './utf8';\n\nconst defaultByteLength = 1024 * 8;\n\ntype InputData = number | ArrayBufferLike | ArrayBufferView | IOBuffer | Buffer;\n\ninterface IOBufferOptions {\n  /**\n   * Ignore the first n bytes of the ArrayBuffer.\n   */\n  offset?: number;\n}\n\nexport class IOBuffer {\n  /**\n   * Reference to the internal ArrayBuffer object.\n   */\n  public buffer: ArrayBufferLike;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public byteLength: number;\n\n  /**\n   * Byte offset of the internal ArrayBuffer.\n   */\n  public byteOffset: number;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public length: number;\n\n  /**\n   * The current offset of the buffer's pointer.\n   */\n  public offset: number;\n\n  private lastWrittenByte: number;\n  private littleEndian: boolean;\n\n  private _data: DataView;\n  private _mark: number;\n  private _marks: number[];\n\n  /**\n   * @param data - The data to construct the IOBuffer with.\n   * If data is a number, it will be the new buffer's length<br>\n   * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>\n   * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,\n   * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.\n   * @param options\n   */\n  public constructor(\n    data: InputData = defaultByteLength,\n    options: IOBufferOptions = {},\n  ) {\n    let dataIsGiven = false;\n    if (typeof data === 'number') {\n      data = new ArrayBuffer(data);\n    } else {\n      dataIsGiven = true;\n      this.lastWrittenByte = data.byteLength;\n    }\n\n    const offset = options.offset ? options.offset >>> 0 : 0;\n    const byteLength = data.byteLength - offset;\n    let dvOffset = offset;\n    if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\n      if (data.byteLength !== data.buffer.byteLength) {\n        dvOffset = data.byteOffset + offset;\n      }\n      data = data.buffer;\n    }\n    if (dataIsGiven) {\n      this.lastWrittenByte = byteLength;\n    } else {\n      this.lastWrittenByte = 0;\n    }\n    this.buffer = data;\n    this.length = byteLength;\n    this.byteLength = byteLength;\n    this.byteOffset = dvOffset;\n    this.offset = 0;\n    this.littleEndian = true;\n    this._data = new DataView(this.buffer, dvOffset, byteLength);\n    this._mark = 0;\n    this._marks = [];\n  }\n\n  /**\n   * Checks if the memory allocated to the buffer is sufficient to store more\n   * bytes after the offset.\n   * @param byteLength - The needed memory in bytes.\n   * @returns `true` if there is sufficient space and `false` otherwise.\n   */\n  public available(byteLength = 1): boolean {\n    return this.offset + byteLength <= this.length;\n  }\n\n  /**\n   * Check if little-endian mode is used for reading and writing multi-byte\n   * values.\n   * @returns `true` if little-endian mode is used, `false` otherwise.\n   */\n  public isLittleEndian(): boolean {\n    return this.littleEndian;\n  }\n\n  /**\n   * Set little-endian mode for reading and writing multi-byte values.\n   */\n  public setLittleEndian(): this {\n    this.littleEndian = true;\n    return this;\n  }\n\n  /**\n   * Check if big-endian mode is used for reading and writing multi-byte values.\n   * @returns `true` if big-endian mode is used, `false` otherwise.\n   */\n  public isBigEndian(): boolean {\n    return !this.littleEndian;\n  }\n\n  /**\n   * Switches to big-endian mode for reading and writing multi-byte values.\n   */\n  public setBigEndian(): this {\n    this.littleEndian = false;\n    return this;\n  }\n\n  /**\n   * Move the pointer n bytes forward.\n   * @param n - Number of bytes to skip.\n   */\n  public skip(n = 1): this {\n    this.offset += n;\n    return this;\n  }\n\n  /**\n   * Move the pointer to the given offset.\n   * @param offset\n   */\n  public seek(offset: number): this {\n    this.offset = offset;\n    return this;\n  }\n\n  /**\n   * Store the current pointer offset.\n   * @see {@link IOBuffer#reset}\n   */\n  public mark(): this {\n    this._mark = this.offset;\n    return this;\n  }\n\n  /**\n   * Move the pointer back to the last pointer offset set by mark.\n   * @see {@link IOBuffer#mark}\n   */\n  public reset(): this {\n    this.offset = this._mark;\n    return this;\n  }\n\n  /**\n   * Push the current pointer offset to the mark stack.\n   * @see {@link IOBuffer#popMark}\n   */\n  public pushMark(): this {\n    this._marks.push(this.offset);\n    return this;\n  }\n\n  /**\n   * Pop the last pointer offset from the mark stack, and set the current\n   * pointer offset to the popped value.\n   * @see {@link IOBuffer#pushMark}\n   */\n  public popMark(): this {\n    const offset = this._marks.pop();\n    if (offset === undefined) {\n      throw new Error('Mark stack empty');\n    }\n    this.seek(offset);\n    return this;\n  }\n\n  /**\n   * Move the pointer offset back to 0.\n   */\n  public rewind(): this {\n    this.offset = 0;\n    return this;\n  }\n\n  /**\n   * Make sure the buffer has sufficient memory to write a given byteLength at\n   * the current pointer offset.\n   * If the buffer's memory is insufficient, this method will create a new\n   * buffer (a copy) with a length that is twice (byteLength + current offset).\n   * @param byteLength\n   */\n  public ensureAvailable(byteLength = 1): this {\n    if (!this.available(byteLength)) {\n      const lengthNeeded = this.offset + byteLength;\n      const newLength = lengthNeeded * 2;\n      const newArray = new Uint8Array(newLength);\n      newArray.set(new Uint8Array(this.buffer));\n      this.buffer = newArray.buffer;\n      this.length = this.byteLength = newLength;\n      this._data = new DataView(this.buffer);\n    }\n    return this;\n  }\n\n  /**\n   * Read a byte and return false if the byte's value is 0, or true otherwise.\n   * Moves pointer forward by one byte.\n   */\n  public readBoolean(): boolean {\n    return this.readUint8() !== 0;\n  }\n\n  /**\n   * Read a signed 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readInt8(): number {\n    return this._data.getInt8(this.offset++);\n  }\n\n  /**\n   * Read an unsigned 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readUint8(): number {\n    return this._data.getUint8(this.offset++);\n  }\n\n  /**\n   * Alias for {@link IOBuffer#readUint8}.\n   */\n  public readByte(): number {\n    return this.readUint8();\n  }\n\n  /**\n   * Read `n` bytes and move pointer forward by `n` bytes.\n   */\n  public readBytes(n = 1): Uint8Array {\n    const bytes = new Uint8Array(n);\n    for (let i = 0; i < n; i++) {\n      bytes[i] = this.readByte();\n    }\n    return bytes;\n  }\n\n  /**\n   * Read a 16-bit signed integer and move pointer forward by 2 bytes.\n   */\n  public readInt16(): number {\n    const value = this._data.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.\n   */\n  public readUint16(): number {\n    const value = this._data.getUint16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit signed integer and move pointer forward by 4 bytes.\n   */\n  public readInt32(): number {\n    const value = this._data.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.\n   */\n  public readUint32(): number {\n    const value = this._data.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit floating number and move pointer forward by 4 bytes.\n   */\n  public readFloat32(): number {\n    const value = this._data.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 64-bit floating number and move pointer forward by 8 bytes.\n   */\n  public readFloat64(): number {\n    const value = this._data.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  /**\n   * Read a 1-byte ASCII character and move pointer forward by 1 byte.\n   */\n  public readChar(): string {\n    return String.fromCharCode(this.readInt8());\n  }\n\n  /**\n   * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.\n   */\n  public readChars(n = 1): string {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      result += this.readChar();\n    }\n    return result;\n  }\n\n  /**\n   * Read the next `n` bytes, return a UTF-8 decoded string and move pointer\n   * forward by `n` bytes.\n   */\n  public readUtf8(n = 1): string {\n    return decode(this.readBytes(n));\n  }\n\n  /**\n   * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer\n   * forward by 1 byte.\n   */\n  public writeBoolean(value: unknown): this {\n    this.writeUint8(value ? 0xff : 0x00);\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.\n   */\n  public writeInt8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setInt8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit unsigned integer and move pointer forward by 1\n   * byte.\n   */\n  public writeUint8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setUint8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * An alias for {@link IOBuffer#writeUint8}.\n   */\n  public writeByte(value: number): this {\n    return this.writeUint8(value);\n  }\n\n  /**\n   * Write all elements of `bytes` as uint8 values and move pointer forward by\n   * `bytes.length` bytes.\n   */\n  public writeBytes(bytes: ArrayLike<number>): this {\n    this.ensureAvailable(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      this._data.setUint8(this.offset++, bytes[i]);\n    }\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit signed integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeInt16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setInt16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit unsigned integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeUint16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setUint16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit signed integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeInt32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setInt32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit unsigned integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeUint32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setUint32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit floating number and move pointer forward by 4\n   * bytes.\n   */\n  public writeFloat32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setFloat32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 64-bit floating number and move pointer forward by 8\n   * bytes.\n   */\n  public writeFloat64(value: number): this {\n    this.ensureAvailable(8);\n    this._data.setFloat64(this.offset, value, this.littleEndian);\n    this.offset += 8;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write the charCode of `str`'s first character as an 8-bit unsigned integer\n   * and move pointer forward by 1 byte.\n   */\n  public writeChar(str: string): this {\n    return this.writeUint8(str.charCodeAt(0));\n  }\n\n  /**\n   * Write the charCodes of all `str`'s characters as 8-bit unsigned integers\n   * and move pointer forward by `str.length` bytes.\n   */\n  public writeChars(str: string): this {\n    for (let i = 0; i < str.length; i++) {\n      this.writeUint8(str.charCodeAt(i));\n    }\n    return this;\n  }\n\n  /**\n   * UTF-8 encode and write `str` to the current pointer offset and move pointer\n   * forward according to the encoded length.\n   */\n  public writeUtf8(str: string): this {\n    return this.writeBytes(encode(str));\n  }\n\n  /**\n   * Export a Uint8Array view of the internal buffer.\n   * The view starts at the byte offset and its length\n   * is calculated to stop at the last written byte or the original length.\n   */\n  public toArray(): Uint8Array {\n    return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\n  }\n\n  /**\n   * Update the last written byte offset\n   * @private\n   */\n  private _updateLastWrittenByte(): void {\n    if (this.offset > this.lastWrittenByte) {\n      this.lastWrittenByte = this.offset;\n    }\n  }\n}\n","class TilesetExtBase {\r\n  \r\n}\r\n\r\nexport default TilesetExtBase","import IValidate from \"../../../interfaces/IValidate\";\r\n\r\nclass TileHeaderBase implements IValidate {\r\n  magic: string\r\n  version: number\r\n  byteLength: number\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileHeaderBase","import TileHeaderBase from \"../tile-header-base\";\r\n\r\nclass B3dmHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default B3dmHeader","enum FeatureTableType {\r\n  B3dm = \"b3dm\",\r\n  I3dm = \"i3dm\",\r\n  Pnts = \"pnts\",\r\n  Vctr = \"vctr\"\r\n}\r\n\r\nexport default FeatureTableType","enum TileRefine {\r\n  ADD = \"add\",\r\n  REPLACE = \"replace\"\r\n}\r\n\r\nexport default TileRefine","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\n\r\nclass FeatureTable implements IValidate {\r\n\r\n  _json: Object\r\n  _binary: Uint8Array\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  featureTableType: FeatureTableType\r\n\r\n  validate() {\r\n    return false // base class always return false.\r\n  }\r\n}\r\n\r\nexport default FeatureTable","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IB3dmFTJson from \"../../../../interfaces/tileset/IB3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateB3dmBatchTable(table: B3dmFeatureTable): boolean {\r\n  return table.batchLength === undefined ? false : true\r\n}\r\n\r\nfunction parse(table: B3dmFeatureTable) {\r\n  const json = table._json as IB3dmFTJson\r\n  table.batchLength = json['BATCH_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass B3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  batchLength: number\r\n  rtcCenter?: number[]\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new B3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.B3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateB3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default B3dmFeatureTable","import { IOBuffer } from \"iobuffer\"\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\nimport IBTBinaryRef from \"../../../../interfaces/tileset/IBTBinaryRef\"\r\nimport IBTJson, { BTJsonValue } from \"../../../../interfaces/tileset/IBTJson\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\n\r\n/*\r\n  batchtable\r\n    json: 它有可能是n个数组，每个数组的长度等于不同瓦片的 featureTableJSON.XXXLength，b3dm 是 BATCH_LENGTH，等等：\r\n            {\r\n              \"name\": ['name1', 'name2', 'name3'],\r\n              \"height\": [10, 20, 5]\r\n            }\r\n          也有可能是对二进制 batchtable binary 的引用定义，拥有 byteOffset、componentType、type 三个属性的对象\r\n            {\r\n              \"name\": {\r\n                byteOffset: 16, // 相对于 batchtable binary body 的偏移值\r\n                type: \"SCALAR\",\r\n                componentType: \"INT\"\r\n              }\r\n            }\r\n          所以，batchtable 有一个弱点，不能用 binary 存储文本数据，因为第二种情况只允许存储 scalar、vec2、vec3、vec4 四种数值类型\r\n          不过使用 byte + scalar 的方式或许可以存储字节信息。\r\n    binary: 根据 json 中第二种定义而存储数据\r\n\r\n  扩展：层级 batchtable：\r\n    \r\n */\r\n\r\nfunction parse(table: BatchTable) {\r\n  for (const k of Object.keys(table._json)) {\r\n    table.variables.set(k, table._json[k])\r\n  }\r\n}\r\n\r\nclass BatchTable implements IValidate {\r\n\r\n  _json: IBTJson\r\n  _binary: Uint8Array\r\n\r\n  variables: Map<string, BTJsonValue> = new Map()\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  static createFromJSON(json: IBTJson, binary: Uint8Array) {\r\n    const bt = new BatchTable()\r\n    bt._json = json\r\n    bt._binary = binary\r\n\r\n    parse(bt)\r\n\r\n    return bt\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get variableNames() {\r\n    return Object.keys(this._json)\r\n  }\r\n\r\n  get variableCounts() {\r\n    return this.variableNames.length\r\n  }\r\n\r\n  getVariable(name: string) {\r\n    if (this.variables.has(name)) {\r\n      const v = this.variables.get(name)\r\n      return v\r\n    }\r\n\r\n    throw new Error(`[BatchTable getVariable()] 没有这个值：${name}。`)\r\n  }\r\n}\r\n\r\nfunction timesOperator(fn: () => void, times: number) {\r\n  for (let i = 0; i < times; i++) fn()\r\n}\r\n\r\nfunction getTimes(type: string) {\r\n  return type === \"SCALAR\" ? 1 :\r\n  type === \"VEC2\" ? 2 :\r\n  type === \"VEC3\" ? 3 :\r\n  type === \"VEC4\" ? 4 : -1\r\n}\r\n\r\nfunction getReadFunction(io: IOBuffer, componentType: string) {\r\n  return componentType === \"BYTE\" ? io.readInt8 :\r\n  componentType === \"UNSIGNED_BYTE\" ? io.readUint8 :\r\n  componentType === \"SHORT\" ? io.readInt16 :\r\n  componentType === \"UNSIGNED_SHORT\" ? io.readUint16 : \r\n  componentType === \"INT\" ? io.readInt32:\r\n  componentType === \"UNSIGNED_INT\" ? io.readUint32 :\r\n  componentType === \"FLOAT\" ? io.readFloat32 : io.readFloat64\r\n}\r\n\r\n/**\r\n * 将 BatchTableBinary 读取并转换成普通的数字数组\r\n * @param {BatchTable} table BatchTable 实例\r\n * @param {IBTBinaryRef} variable 从 BatchTable JSON 中获取的引用描述对象，可使用 BatchTable.prototype.getVariable(name) 获取\r\n * @param {number} count FeatureTable 中的 XXXLength，即每个变量有多少个数据\r\n * @returns {number[]}\r\n */\r\nexport const parseBTBinary2Array = (table: BatchTable, variable: IBTBinaryRef, count: number) => {\r\n  let hasHierarchy = false\r\n  table.extensions?.forEach(ext => {\r\n    if ('name' in ext && ext['name'] === '3DTILES_batch_table_hierarchy') {\r\n      hasHierarchy = true\r\n    }\r\n  })\r\n  if (hasHierarchy) {\r\n    return\r\n  }\r\n\r\n  const io = new IOBuffer(table._binary.buffer)\r\n  io.skip(variable.byteOffset)\r\n  const result: number[] = []\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const readFunction = getReadFunction(io, variable.componentType)\r\n    timesOperator(() => result.push(readFunction()), getTimes(variable.type))\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default BatchTable","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass I3dmHeader extends TileHeaderBase implements IValidate {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  gltfFormat: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  validate() {\r\n    if (this.gltfFormat !== 0 && this.gltfFormat !== 1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default I3dmHeader","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IFTBinaryRef from \"../../../../interfaces/tileset/IFTBinaryRef\"\r\nimport II3dmFTJson from \"../../../../interfaces/tileset/II3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateI3dmBatchTable(table: I3dmFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.position !== undefined && table.positionQuantized !== undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  if (\r\n    (table.normalUp === undefined && table.normalRight !== undefined) ||\r\n    (table.normalRight === undefined && table.normalUp !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  if (\r\n    (table.normalUpOct32p === undefined && table.normalRightOct32p !== undefined) ||\r\n    (table.normalRightOct32p === undefined && table.normalUpOct32p !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: I3dmFeatureTable) {\r\n  const json = table._json as II3dmFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.normalUp = json['NORMAL_UP']\r\n  table.normalRight = json['NORMAL_RIGHT']\r\n  table.normalUpOct32p = json['NORMAL_UP_OCT32P']\r\n  table.normalRightOct32p = json['NORMAL_RIGHT_OCT32P']\r\n  table.scale = json['SCALE']\r\n  table.scaleNonUniform = json['SCALE_NON_UNIFORM']\r\n  table.instancesLength = json['INSTANCES_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass I3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  normalUp?: IFTBinaryRef\r\n  normalRight?: IFTBinaryRef\r\n  normalUpOct32p?: IFTBinaryRef\r\n  normalRightOct32p?: IFTBinaryRef\r\n  scale?: IFTBinaryRef\r\n  batchId?: IFTBinaryRef\r\n  scaleNonUniform?: IFTBinaryRef\r\n\r\n  instancesLength: number\r\n\r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  eastNorthUp?: boolean\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new I3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.I3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateI3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default I3dmFeatureTable","import TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass PntsHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  \r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default PntsHeader","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IFTBinaryRef from \"../../../../interfaces/tileset/IFTBinaryRef\"\r\nimport IPntsFTJson from \"../../../../interfaces/tileset/IPntsFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validatePntsFeatureTable(table: PntsFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.batchId !== undefined && table.batchLength === undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: PntsFeatureTable) {\r\n  const json = table._json as IPntsFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.rgba = json['RGBA']\r\n  table.rgb = json['RGB']\r\n  table.rgb565 = json['RGB565']\r\n  table.normal = json['NORMAL']\r\n  table.normalOct16p = json['NORMAL_OCT16P']\r\n  table.batchId = json['BATCH_ID']\r\n  table.pointsLength = json['POINTS_LENGTH']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n  table.constantRgba = json['CONSTANT_RGBA']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass PntsFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  rgba?: IFTBinaryRef\r\n  rgb?: IFTBinaryRef\r\n  rgb565?: IFTBinaryRef\r\n  normal?: IFTBinaryRef\r\n  normalOct16p?: IFTBinaryRef\r\n\r\n  pointsLength: number\r\n  \r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  constantRgba?: number[]\r\n  batchId?: any\r\n  batchLength?: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new PntsFeatureTable()\r\n    \r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.Pnts\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validatePntsFeatureTable(this)\r\n  }\r\n}\r\n\r\nexport default PntsFeatureTable","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass Asset implements IValidate {\r\n  version: string\r\n  tilesetVersion?: string\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default Asset","import { IOBuffer } from 'iobuffer'\r\n\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport B3dmHeader from \"./header\"\r\nimport B3dmFeatureTable from '../featuretable/featuretable-b3dm'\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: B3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(b3dm: B3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(b3dm.header, iobuffer)\r\n\r\n  if (b3dm.byteLength % 8 != 0) {\r\n    throw new Error('[B3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(b3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(b3dm.featureTableBinaryByteLength)\r\n  b3dm.featureTable = B3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (b3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(b3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(b3dm.batchTableBinaryByteLength)\r\n    b3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass B3dm implements IValidate {\r\n  header: B3dmHeader\r\n  featureTable: B3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new B3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default B3dm","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtBatchtableHierarchy extends TilesetExtBase {\r\n  readonly name = \"3DTILES_batch_table_hierarchy\"\r\n\r\n  load() {\r\n    \r\n  }\r\n}\r\n\r\nexport default ExtBatchtableHierarchy","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtContentGLTF extends TilesetExtBase {\r\n  readonly name = \"3DTILES_content_gltf\"\r\n}\r\n\r\nexport default ExtContentGLTF","import { GLTFPrimitiveAttribute } from \"../core\"\r\nimport GLTFExtensionBase from \"./gltf-extension-base\"\r\n\r\n\r\nclass ExtDraco extends GLTFExtensionBase {\r\n  _name: string = \"KHR_draco_mesh_compression\"\r\n  bufferView: number\r\n  attributes: GLTFPrimitiveAttribute\r\n\r\n  get isRequire() {\r\n    return true\r\n  }\r\n\r\n  constructor(options: {\r\n    bufferView: number,\r\n    attributes: GLTFPrimitiveAttribute\r\n  }) {\r\n    super()\r\n    this.bufferView = options.bufferView\r\n    this.attributes = options.attributes\r\n  }\r\n\r\n  validate() {\r\n    return Number.isInteger(this.bufferView)\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  json() {\r\n    return {\r\n      name: this._name,\r\n      bufferView: this.bufferView,\r\n      attributes: this.attributes.json()\r\n    }\r\n  }\r\n}\r\n\r\nexport default ExtDraco","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtImplicitTiling extends TilesetExtBase {\r\n  readonly name = \"3DTILES_implicit_tiling\"\r\n}\r\n\r\nexport default ExtImplicitTiling","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtLayers extends TilesetExtBase {\r\n  readonly name = \"3DTILES_layers\"\r\n}\r\n\r\nexport default ExtLayers","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMetadata extends TilesetExtBase {\r\n  readonly name = \"3DTILES_metadata\"\r\n}\r\n\r\nexport default ExtMetadata","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMultipleContent extends TilesetExtBase {\r\n  readonly name = \"3DTILES_multiple_contents\"\r\n}\r\n\r\nexport default ExtMultipleContent","import { GLTFTextureInfo } from \"../core\"\r\nimport GLTFExtensionBase from \"./gltf-extension-base\"\r\n\r\nclass ExtPbrSpecularGlossiness extends GLTFExtensionBase {\r\n  _name: string = \"KHR_materials_pbrSpecularGlossiness\"\r\n\r\n  diffuseFactor?: number[]\r\n  specularFactor?: number[]\r\n  glossinessFactor?: number\r\n  diffuseTexture?: GLTFTextureInfo\r\n  specularGlossinessTexture?: GLTFTextureInfo\r\n\r\n  get isRequire() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @todo\r\n   */\r\n  json() {\r\n    return {}\r\n  }\r\n}\r\n\r\nexport default ExtPbrSpecularGlossiness","import TilesetExtBase from \"./ext-base\";\r\n\r\nclass ExtPntsDraco extends TilesetExtBase {\r\n  readonly name = \"3DTILES_draco_point_compression\"\r\n}\r\n\r\nexport default ExtPntsDraco","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport { GLTFAttributeType, GLTFComponentType } from \"./enum\"\r\nimport GLTFAccessorSparse from \"./gltf-accessor-sparse\"\r\n\r\n\r\nclass GLTFAccessor implements IValidate, ISerializable {\r\n  componentType: GLTFComponentType\r\n  count: number\r\n  type: GLTFAttributeType\r\n  max?: number[]\r\n  min?: number[]\r\n  sparse?: GLTFAccessorSparse\r\n  name?: string\r\n  normalized?: boolean\r\n  bufferView?: number\r\n  byteOffset?: number\r\n\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(options: {\r\n    componentType: GLTFComponentType\r\n    count: number\r\n    type: GLTFAttributeType\r\n  }) {\r\n    this.componentType = options.componentType\r\n    this.count = options.count\r\n    this.type = options.type\r\n  }\r\n\r\n  validate() {\r\n    /** byteOffset 和 bufferView 必须同时存在 */\r\n    if (this.byteOffset !== undefined && this.bufferView !== undefined) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessor json()] 当前 accessor 属性不合法，请检查')\r\n    }\r\n\r\n    const acc = {\r\n      componentType: this.componentType,\r\n      type: this.type,\r\n      count: this.count,\r\n    }\r\n\r\n    writeDefinedProperty(acc, 'max', this.max)\r\n    writeDefinedProperty(acc, 'min', this.min)\r\n    writeDefinedProperty(acc, 'name', this.name)\r\n    writeDefinedProperty(acc, 'normalized', this.normalized)\r\n    writeDefinedProperty(acc, 'sparse', this.sparse !== undefined ? this.sparse.json() : undefined)\r\n    writeDefinedProperty(acc, 'bufferView', this.bufferView)\r\n    writeDefinedProperty(acc, 'byteOffset', this.byteOffset)\r\n    writeExtensionsProperty(acc, this.extensions)\r\n    writeDefinedProperty(acc, 'extras', this.extras)\r\n    \r\n    return acc\r\n  }\r\n}\r\n\r\nexport default GLTFAccessor","import { ISerializable, IValidate } from \"src/interfaces\"\r\nimport GLTFAccessorSparseIndices from \"./gltf-accessor-sparse-indices\"\r\nimport GLTFAccessorSparseValues from \"./gltf-accessor-sparse-values\"\r\n\r\n\r\nclass GLTFAccessorSparse implements IValidate, ISerializable {\r\n  count: number\r\n  indices: GLTFAccessorSparseIndices\r\n  values: GLTFAccessorSparseValues\r\n\r\n  validate() {\r\n    return this.count > 0 && this.values.validate() && this.indices.validate()\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessorSparse json()] 此 sparse 对象属性不合法，请检查属性')\r\n    }\r\n\r\n    const spr = {\r\n      count: this.count,\r\n      indices: this.indices.json(),\r\n      values: this.values.json()\r\n    }\r\n\r\n    return spr\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparse","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport { GLTFComponentType } from \"./enum\"\r\n\r\nclass GLTFAccessorSparseIndices implements IValidate, ISerializable {\r\n  bufferView: number\r\n  byteOffset: number\r\n  componentType: GLTFComponentType\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (\r\n      this.componentType !== GLTFComponentType.UNSIGNED_BYTE &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_INT &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_SHORT\r\n    ) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessorSparseIndices json()] 此 accessor.sparse.indices 的属性不合法，请检查')\r\n    }\r\n\r\n    const i = {\r\n      bufferView: this.bufferView,\r\n      byteOffset: this.byteOffset,\r\n      componentType: this.componentType,\r\n    }\r\n\r\n    writeExtensionsProperty(i, this.extensions)\r\n    writeDefinedProperty(i, 'extras', this.extras)\r\n\r\n    return i\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseIndices","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\n\r\nclass GLTFAccessorSparseValues implements IValidate, ISerializable {\r\n  bufferView: number\r\n  byteOffset?: number\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    return !(this.byteOffset! < 0)\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessorSparseValues json()] 此 accessor.sparse.values 的属性不合法，请检查')\r\n    }\r\n\r\n    const v = {\r\n      bufferView: this.bufferView\r\n    }\r\n\r\n    writeDefinedProperty(v, 'byteOffset', this.byteOffset)\r\n    writeExtensionsProperty(v, this.extensions)\r\n    writeDefinedProperty(v, 'extras', this.extras)\r\n\r\n    return v\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseValues","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFAnimationChannel from \"./gltf-animation-channel\"\r\nimport GLTFAnimationSampler from \"./gltf-animation-sampler\"\r\n\r\nclass GLTFAnimation implements IValidate, ISerializable {\r\n  channels: GLTFAnimationChannel[] = []\r\n  samplers: GLTFAnimationSampler[] = []\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set() \r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.channels!.length < 1 || this.samplers!.length < 1) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAnimation json()] 当前 animation 对象属性不合法，请检查')\r\n    }\r\n\r\n    const ani = {}\r\n\r\n    writeDefinedProperty(ani, 'name', this.name)\r\n    writeDefinedProperty(ani, 'channels', this.channels.length !== 0 ? this.channels.map(c => c.json()) : undefined)\r\n    writeDefinedProperty(ani, 'samplers', this.samplers.length !== 0 ? this.samplers.map(s => s.json()) : undefined)\r\n    writeExtensionsProperty(ani, this.extensions)\r\n    writeDefinedProperty(ani, 'extras', this.extras)\r\n\r\n    return ani\r\n  }\r\n}\r\n\r\nexport default GLTFAnimation","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFAnimationChannelTarget from \"./gltf-animation-channel-target\"\r\n\r\nclass GLTFAnimationChannel implements IValidate {\r\n  sampler: number\r\n  target: GLTFAnimationChannelTarget\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    return this.target.validate()\r\n  } \r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAnimationChannel json()] 当前 animation channel 对象的属性不合法，请检查')\r\n    }\r\n\r\n    const ac = {\r\n      sampler: this.sampler,\r\n      target: this.target.json(),\r\n    }\r\n\r\n    writeExtensionsProperty(ac, this.extensions)\r\n    writeDefinedProperty(ac, 'extras', this.extras)\r\n\r\n    return ac\r\n  }\r\n}\r\n\r\nexport default GLTFAnimationChannel","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFAnimationChannelTargetPath from \"./enum/gltf-animation-channel-target-path\"\r\n\r\nclass GLTFAnimationChannelTarget implements IValidate, ISerializable {\r\n  node?: number\r\n  path: GLTFAnimationChannelTargetPath\r\n  extensions: Set<GLTFExtensionBase> = new Set\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const act = {\r\n      path: this.path,\r\n    }\r\n\r\n    writeExtensionsProperty(act, this.extensions)\r\n    writeDefinedProperty(act, 'node', this.node)\r\n\r\n    return act\r\n  }\r\n}\r\n\r\nexport default GLTFAnimationChannelTarget","import { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport GLTFAnimationInterpolation from \"./enum/gltf-animation-interpolation\"\r\n\r\n\r\nclass GLTFAnimationSampler implements IValidate, ISerializable {\r\n  input: number\r\n  interpolation?: GLTFAnimationInterpolation\r\n  output: number\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const as = {\r\n      input: this.input,\r\n      output: this.output\r\n    }\r\n\r\n    writeDefinedProperty(as, 'interpolation', this.interpolation)\r\n\r\n    return as\r\n  }\r\n}\r\n\r\nexport default GLTFAnimationSampler","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFCameraType from \"./enum/gltf-cameratype\"\r\nimport GLTFOrthographicCamera from \"./gltf-orthographic-camera\"\r\nimport GLTFPerspectiveCamera from \"./gltf-perspective-camera\"\r\n\r\nclass GLTFCamera implements IValidate, ISerializable {\r\n  orthographic?: GLTFOrthographicCamera\r\n  perspective?: GLTFPerspectiveCamera\r\n  type: GLTFCameraType\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(options: {\r\n    orthographic?: GLTFOrthographicCamera\r\n    perspective?: GLTFPerspectiveCamera\r\n    type: GLTFCameraType\r\n    name?: string\r\n  }) {\r\n    this.orthographic = options.orthographic\r\n    this.perspective = options.perspective\r\n    this.type = options.type\r\n    this.name = options.name\r\n  }\r\n\r\n  validate() {\r\n    if (this.orthographic !== undefined && this.perspective !== undefined) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFCamera json()] 数据有问题，请检查 camera 对象的合法性')\r\n    }\r\n\r\n    const camera = {\r\n      type: this.type\r\n    }\r\n\r\n    writeDefinedProperty(camera, 'name', this.name)\r\n    writeDefinedProperty(camera, 'perspective', this.perspective ? this.perspective.json() : undefined)\r\n    writeDefinedProperty(camera, 'orthographic', this.orthographic ? this.orthographic.json() : undefined)\r\n    writeExtensionsProperty(camera, this.extensions)\r\n    writeDefinedProperty(camera, 'extras', this.extras)\r\n\r\n    return camera\r\n  }\r\n}\r\n\r\nexport default GLTFCamera","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport MIME from \"./enum/mime\"\r\n\r\nclass GLTFImage implements IValidate, ISerializable {\r\n  uri?: string\r\n  bufferView?: number\r\n  mimeType?: MIME\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.uri !== undefined && this.bufferView !== undefined) {\r\n      return false\r\n    }\r\n    if (this.bufferView !== undefined) {\r\n      if (this.mimeType === undefined) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const img = {}\r\n    writeDefinedProperty(img, 'name', this.name)\r\n    writeDefinedProperty(img, 'bufferView', this.bufferView)\r\n    writeDefinedProperty(img, 'uri', this.uri)\r\n    writeDefinedProperty(img, 'mimeType', this.mimeType)\r\n    writeExtensionsProperty(img, this.extensions)\r\n    writeDefinedProperty(img, 'extras', this.extras)\r\n\r\n    return img\r\n  }\r\n}\r\n\r\nexport default GLTFImage","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport { GLTFAlphaMode } from \"./enum\"\r\nimport GLTFNormalTextureInfo from \"./gltf-normal-texture-info\"\r\nimport GLTFOcclusionTextureInfo from \"./gltf-occlusion-texture-info\"\r\nimport GLTFPbr from \"./gltf-pbr\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFMaterial implements IValidate, ISerializable {\r\n  name?: string\r\n  pbrMetallicRoughness?: GLTFPbr\r\n  normalTexture?: GLTFNormalTextureInfo\r\n  occlusionTexture?: GLTFOcclusionTextureInfo\r\n  emissiveTexture?: GLTFTextureInfo\r\n  emissiveFactor?: number[] = [0, 0, 0]\r\n  alphaMode?: GLTFAlphaMode = GLTFAlphaMode.OPAQUE\r\n  alphaCutoff?: number = 0.5\r\n  doubleSided?: boolean = false\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.pbrMetallicRoughness!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.normalTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.occlusionTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.alphaMode === GLTFAlphaMode.MASK && this.alphaCutoff === undefined) {\r\n      return false\r\n    }\r\n    if (this.emissiveFactor!.length !== 3) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFMaterial json()] 此 material 对象的属性不合法，请检查')\r\n    }\r\n\r\n    const m = {}\r\n\r\n    writeDefinedProperty(m, 'name', this.name)\r\n    writeDefinedProperty(m, 'pbrMetallicRoughness', this.pbrMetallicRoughness !== undefined ? this.pbrMetallicRoughness.json() : undefined)\r\n    writeDefinedProperty(m, 'normalTexture', this.normalTexture !== undefined ? this.normalTexture.json() : undefined)\r\n    writeDefinedProperty(m, 'emissiveTexture', this.emissiveTexture !== undefined ? this.emissiveTexture.json() : undefined)\r\n    writeDefinedProperty(m, 'emissiveFactor', this.emissiveFactor)\r\n    writeDefinedProperty(m, 'alphaMode', this.alphaMode !== undefined && this.alphaMode !== GLTFAlphaMode.OPAQUE ? this.alphaMode : undefined)\r\n    writeDefinedProperty(m, 'alphaCutoff', this.alphaCutoff !== 0.5 && this.alphaCutoff !== undefined ? this.alphaCutoff : undefined)\r\n    writeDefinedProperty(m, 'alphaCutoff', this.doubleSided !== false && this.doubleSided !== undefined ? this.doubleSided : undefined)\r\n    writeExtensionsProperty(m, this.extensions)\r\n    writeDefinedProperty(m, 'extras', this.extras)\r\n    \r\n    return m\r\n  }\r\n}\r\n\r\nexport default GLTFMaterial","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFPrimitive from \"./gltf-primitive\"\r\n\r\nclass GLTFMesh implements IValidate, ISerializable {\r\n  primitives: GLTFPrimitive[] = []\r\n  weights?: number[]\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    let flag = false\r\n    if (this.primitives.every(primitive => primitive.validate())) {\r\n      flag = true\r\n    }\r\n    return flag\r\n  }\r\n\r\n  json() {\r\n    const mesh = {\r\n      primitives: this.primitives.map(prmt => prmt.json())\r\n    }\r\n    writeDefinedProperty(mesh, 'weights', this.weights)\r\n    writeDefinedProperty(mesh, 'name', this.name)\r\n    writeExtensionsProperty(mesh, this.extensions)\r\n\r\n    return mesh\r\n  }\r\n}\r\n\r\nexport default GLTFMesh","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\n\r\nclass GLTFNode implements IValidate, ISerializable {\r\n  children: number[] = []\r\n  mesh?: number\r\n  rotation?: number[]\r\n  translation?: number[]\r\n  weights?: number[]\r\n  name?: string\r\n  skin?: number\r\n  camera?: number\r\n  matrix?: number[]\r\n  scale?: number[]\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(options: {\r\n    children?: number[]\r\n    mesh?: number\r\n    rotation?: number[]\r\n    translation?: number[]\r\n    weights?: number[]\r\n    name?: string\r\n    skin?: number\r\n    camera?: number\r\n    matrix?: number[]\r\n    scale?: number[]\r\n  }) {\r\n    this.mesh = options.mesh\r\n    this.camera = options.camera\r\n    this.scale = options.scale\r\n    this.skin = options.skin\r\n    this.matrix = options.matrix\r\n    this.translation = options.translation\r\n    this.rotation = options.rotation\r\n    this.name = options.name\r\n    this.weights = options.weights\r\n  }\r\n\r\n  private validateTransforms() {\r\n    let flag = true\r\n    if (this.matrix !== undefined) {\r\n      if (this.rotation !== undefined || this.scale !== undefined || this.translation !== undefined) {\r\n        flag = false\r\n      }\r\n    }\r\n    if (this.matrix!.length !== 16) {\r\n      flag = false\r\n    }\r\n    if (this.scale!.length !== 3) {\r\n      flag = false\r\n    }\r\n    if (this.translation!.length !== 3) {\r\n      flag = false\r\n    }\r\n\r\n    if (this.rotation!.length !== 4) {\r\n      flag = false\r\n    } else {\r\n      flag = this.rotation!.every(r => r > 1 || r < -1)\r\n    }\r\n\r\n    return flag\r\n  }\r\n\r\n  validate() {\r\n    if (this.validateTransforms()) {\r\n      return false\r\n    }\r\n    if (this.weights!.length < 1) {\r\n      return false\r\n    } else if (this.weights !== undefined && this.mesh === undefined) {\r\n      return false\r\n    }\r\n    if (this.skin !== undefined && this.mesh === undefined) {\r\n      return false\r\n    }\r\n\r\n    if (this.children!.length < 1) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFNode json()] 当前 node 属性不合法，请检查属性')\r\n    }\r\n\r\n    const n = {}\r\n\r\n    writeDefinedProperty(n, 'mesh', this.mesh)\r\n    writeDefinedProperty(n, 'rotation', this.rotation)\r\n    writeDefinedProperty(n, 'translation', this.translation)\r\n    writeDefinedProperty(n, 'scale', this.scale)\r\n    writeDefinedProperty(n, 'matrix', this.matrix)\r\n    writeDefinedProperty(n, 'weights', this.weights)\r\n    writeDefinedProperty(n, 'skin', this.skin)\r\n    writeDefinedProperty(n, 'camera', this.camera)\r\n    writeDefinedProperty(n, 'name', this.name)\r\n    \r\n    if (this.children.length !== 0) {\r\n      writeDefinedProperty(n, 'children', this.children)\r\n    }\r\n    writeExtensionsProperty(n, this.extensions)\r\n    writeDefinedProperty(n, 'extras', this.extras)\r\n\r\n    return n\r\n  }\r\n}\r\n\r\nexport default GLTFNode","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFNormalTextureInfo \r\nextends GLTFTextureInfo \r\nimplements IValidate, ISerializable {\r\n  scale: number\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(index: number, texCoord: number, scale: number) {\r\n    super(index, texCoord)\r\n    this.scale = scale\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFNormalTextureInfo json()] 当前 normal textureinfo 属性不合法，请检查')\r\n    }\r\n\r\n    const st = super.json()\r\n    writeDefinedProperty(st, 'scale', this.scale)\r\n    writeExtensionsProperty(st, this.extensions)\r\n    writeDefinedProperty(st, 'extras', this.extras)\r\n\r\n    return st\r\n  }\r\n}\r\n\r\nexport default GLTFNormalTextureInfo","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFOcclusionTextureInfo \r\nextends GLTFTextureInfo\r\nimplements IValidate, ISerializable {\r\n  strength: number\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(index: number, texCoord: number, strength: number) {\r\n    super(index, texCoord)\r\n    this.strength = strength\r\n  }\r\n\r\n  validate() {\r\n    return (this.strength > 1 || this.strength < 0)\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFOcclusionTextureInfo json()] 当前 occlusion texture info 属性不合法，请检查')\r\n    }\r\n\r\n    const st = super.json()\r\n\r\n    writeDefinedProperty(st, 'strength', this.strength)\r\n    writeExtensionsProperty(st, this.extensions)\r\n    writeDefinedProperty(st, 'extras', this.extras)\r\n\r\n    return st\r\n  }\r\n}\r\n\r\nexport default GLTFOcclusionTextureInfo","import { IGLTFOrthographicCameraConstructionParam, IValidate } from \"src/interfaces\"\r\nimport ISerializable from \"src/interfaces/ISerializable\"\r\n\r\n\r\nclass GLTFOrthographicCamera implements IValidate, ISerializable {\r\n  xmag: number\r\n  ymag: number\r\n  zfar: number\r\n  znear: number\r\n\r\n  constructor(options: IGLTFOrthographicCameraConstructionParam) {\r\n    this.xmag = options.xmag\r\n    this.ymag = options.ymag\r\n    this.zfar = options.zfar\r\n    this.znear = options.znear\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  validate() {\r\n    return false\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFOrthographicCamera json()] 当前对象属性不合法，请检查')\r\n    }\r\n\r\n    const c = {\r\n      xmag: this.xmag,\r\n      ymag: this.ymag,\r\n      zfar: this.zfar,\r\n      znear: this.znear,\r\n    }\r\n\r\n    return c\r\n  }\r\n}\r\n\r\nexport default GLTFOrthographicCamera","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFPbr implements IValidate, ISerializable {\r\n  baseColorFactor?: number[] = [1, 1, 1, 1]\r\n  baseColorTexture?: GLTFTextureInfo\r\n  metallicFactor?: number\r\n  roughnessFactor?: number\r\n  metallicRoughnessTexture?: GLTFTextureInfo\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.baseColorFactor!.length !== 4 || this.baseColorFactor!.every(v => v < 0 || v > 1)) {\r\n      return false\r\n    }\r\n    if (this.roughnessFactor! > 1 || this.roughnessFactor! < 0) {\r\n      return false\r\n    }\r\n    if (this.metallicFactor! > 1 || this.metallicFactor! < 0) {\r\n      return false\r\n    }\r\n    if (this.baseColorTexture!.validate() === false || this.metallicRoughnessTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFPbr json()] 此 pbr 对象属性有误，请检查')\r\n    }\r\n\r\n    const pbr = {}\r\n\r\n    writeDefinedProperty(pbr, 'baseColorFactor', this.baseColorFactor)\r\n    writeDefinedProperty(pbr, 'baseColorTexture', this.baseColorTexture !== undefined ? this.baseColorTexture.json() : undefined)\r\n    writeDefinedProperty(pbr, 'metallicFactor', this.metallicFactor)\r\n    writeDefinedProperty(pbr, 'roughnessFactor', this.roughnessFactor)\r\n    writeDefinedProperty(pbr, 'metallicRoughnessTexture', this.metallicRoughnessTexture !== undefined ? this.metallicRoughnessTexture.json() : undefined)\r\n    writeExtensionsProperty(pbr, this.extensions)\r\n    writeDefinedProperty(pbr, 'extras', this.extras)\r\n\r\n    return pbr\r\n  }\r\n}\r\n\r\nexport default GLTFPbr","import { IGLTFPerspectiveCameraConstructionParam, IValidate } from \"src/interfaces\"\r\nimport ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\n\r\nclass GLTFPerspectiveCamera implements IValidate, ISerializable {\r\n  yfov: number\r\n  znear: number\r\n  zfar?: number\r\n  aspectRatio?: number\r\n\r\n  constructor(options: IGLTFPerspectiveCameraConstructionParam) {\r\n    this.yfov = options.yfov\r\n    this.znear = options.znear\r\n    this.zfar = options.zfar\r\n    this.aspectRatio = options.aspectRatio\r\n  }\r\n\r\n  /**\r\n   * @todo \r\n   */\r\n  validate() {\r\n    return false\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFPerspectiveCamera json()] 当前对象属性有问题，请检查')\r\n    }\r\n\r\n    const c = {\r\n      yfov: this.yfov,\r\n      znear: this.znear\r\n    }\r\n\r\n    writeDefinedProperty(c, 'aspectRatio', this.aspectRatio)\r\n    writeDefinedProperty(c, 'zfar', this.zfar)\r\n\r\n    return c\r\n  }\r\n}\r\n\r\nexport default GLTFPerspectiveCamera","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFPrimitiveMode from \"./enum/gltf-primitivemode\"\r\nimport GLTFPrimitiveAttribute from \"./gltf-primitive-attribute\"\r\n\r\nclass GLTFPrimitive implements IValidate, ISerializable {\r\n  attribute: GLTFPrimitiveAttribute\r\n  indices?: number\r\n  material?: number\r\n  mode: GLTFPrimitiveMode = GLTFPrimitiveMode.TRIANGLES\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n  extras: any\r\n\r\n  constructor(options: {\r\n    attribute: {\r\n      position: number,\r\n      [propName: string]: any\r\n    },\r\n    indices?: number,\r\n    material?: number,\r\n    mode?: GLTFPrimitiveMode\r\n  }) {\r\n    this.attribute = new GLTFPrimitiveAttribute({\r\n      position: options.attribute.position,\r\n      uv0: options.attribute['uv0'],\r\n      normal: options.attribute['normal']\r\n    })\r\n    this.indices = options.indices\r\n    this.material = options.material\r\n    if (options.mode! !== GLTFPrimitiveMode.TRIANGLES) {\r\n      this.mode = <GLTFPrimitiveMode>options.mode\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    if (this.attribute.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.indices! < 0) {\r\n      return false\r\n    }\r\n    if (this.material! < 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const prmt = {\r\n      attribute: this.attribute.json()\r\n    }\r\n    if (this.mode !== GLTFPrimitiveMode.TRIANGLES && this.mode !== undefined) {\r\n      writeDefinedProperty(prmt, 'mode', this.mode)\r\n    }\r\n    writeDefinedProperty(prmt, 'indices', this.indices)\r\n    writeDefinedProperty(prmt, 'material', this.material)\r\n    writeExtensionsProperty(prmt, this.extensions)\r\n    writeDefinedProperty(prmt, 'extras', this.extras)\r\n\r\n    return prmt\r\n  }\r\n}\r\n\r\nexport default GLTFPrimitive","import ISerializable from 'src/interfaces/ISerializable'\r\nimport writeDefinedProperty from 'src/utils/io/writeDefinedProperty'\r\nimport writeExtensionsProperty from 'src/utils/io/writeExtensionsProperty'\r\nimport IValidate from '../../../interfaces/IValidate'\r\nimport GLTFExtensionBase from '../../ext/gltf-extension-base'\r\nimport GLTFFilter from './enum/gltf-filter'\r\nimport GLTFWrapMode from './enum/gltf-wrapmode'\r\n\r\nclass GLTFSampler implements IValidate, ISerializable {\r\n  magFilter?: GLTFFilter\r\n  minFilter?: GLTFFilter\r\n  wrapS?: GLTFWrapMode\r\n  wrapT?: GLTFWrapMode\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras: any\r\n\r\n  validate() {\r\n    // 注意默认值检查\r\n    if (this.magFilter === undefined && this.minFilter === undefined && this.wrapS === undefined && this.wrapT === undefined)\r\n      return false\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const spl = {}\r\n    writeDefinedProperty(spl, 'magFilter', this.magFilter)\r\n    writeDefinedProperty(spl, 'minFilter', this.minFilter)\r\n    writeDefinedProperty(spl, 'wrapS', this.wrapS)\r\n    writeDefinedProperty(spl, 'wrapT', this.wrapT)\r\n    writeDefinedProperty(spl, 'name', this.name)\r\n    writeExtensionsProperty(spl, this.extensions)\r\n    writeDefinedProperty(spl, 'extras', this.extras)\r\n\r\n    return spl\r\n  }\r\n}\r\n\r\nexport default GLTFSampler","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFScene implements IValidate, ISerializable {\r\n  nodes: number[] = []\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n  \r\n  validate() {\r\n    return (this.nodes.length < 1)\r\n  }\r\n\r\n  json() {\r\n    const s = {\r\n      nodes: this.nodes\r\n    }\r\n    writeDefinedProperty(s, 'name', this.name)\r\n    writeExtensionsProperty(s, this.extensions)\r\n    return s\r\n  }\r\n}\r\n\r\nexport default GLTFScene","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\n\r\nclass GLTFSkin implements IValidate {\r\n  inverseBindMatrices?: number\r\n  skeleton?: number\r\n  name?: string\r\n  joints: number[]\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    return this.joints.length > 1\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFSkin json()] 当前 skin 属性不合法，请检查')\r\n    }\r\n\r\n    const sk = {}\r\n\r\n    writeDefinedProperty(sk, 'inverseBindMatrices', this.inverseBindMatrices)\r\n    writeDefinedProperty(sk, 'skeleton', this.skeleton)\r\n    writeDefinedProperty(sk, 'name', this.name)\r\n    writeDefinedProperty(sk, 'joints', this.joints.length !== 0 ? this.joints : undefined)\r\n    writeExtensionsProperty(sk, this.extensions)\r\n    writeDefinedProperty(sk, 'extras', this.extras)\r\n\r\n    return sk\r\n  }\r\n}\r\n\r\nexport default GLTFSkin","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFTexture implements IValidate, ISerializable {\r\n  sampler?: number\r\n  source?: number\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.sampler === undefined && this.source === undefined && this.name === undefined)\r\n      return false\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const tx = {}\r\n    writeDefinedProperty(tx, 'name', this.name)\r\n    writeDefinedProperty(tx, 'source', this.source)\r\n    writeDefinedProperty(tx, 'sampler', this.sampler)\r\n    writeExtensionsProperty(tx, this.extensions)\r\n    writeDefinedProperty(tx, 'extras', this.extras)\r\n\r\n    return tx\r\n  }\r\n}\r\n\r\nexport default GLTFTexture","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport I3dmFeatureTable from \"../featuretable/featuretable-i3dm\"\r\nimport I3dmHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: I3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n  header.gltfFormat = io.readUint32()\r\n}\r\n\r\nfunction parse(i3dm: I3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(i3dm.header, iobuffer)\r\n\r\n  if (i3dm.byteLength % 8 != 0) {\r\n    throw new Error('[I3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(32)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(i3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(i3dm.featureTableBinaryByteLength)\r\n  i3dm.featureTable = I3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (i3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(i3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(i3dm.batchTableBinaryByteLength)\r\n    i3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass I3dm implements IValidate {\r\n  header: I3dmHeader\r\n  featureTable: I3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  externalData: string | GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new I3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get gltfFormat() {\r\n    return this.header.gltfFormat\r\n  }\r\n\r\n  get sizeWithoutExternalData() {\r\n    return 32 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default I3dm","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../..\"\r\nimport PntsFeatureTable from \"../featuretable/featuretable-pnts\"\r\nimport PntsHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: PntsHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(pnts: Pnts, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(pnts.header, iobuffer)\r\n\r\n  if (pnts.byteLength % 8 != 0) {\r\n    throw new Error('[Pnts 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(pnts.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(pnts.featureTableBinaryByteLength)\r\n  pnts.featureTable = PntsFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (pnts.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(pnts.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(pnts.batchTableBinaryByteLength)\r\n    pnts.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n}\r\n\r\nclass Pnts implements IValidate {\r\n  header: PntsHeader\r\n  featureTable: PntsFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new PntsHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default Pnts","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileRefine from \"./enum/tile-refine\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\nimport TileContent from \"./tile-content\"\r\n\r\nclass Tile implements IValidate {\r\n  boundingVolume: TileBoundingVolume\r\n  geometricError: number\r\n  viewerRequestVolume?: TileBoundingVolume\r\n  refine?: TileRefine\r\n  content?: TileContent\r\n  transform?: number[] = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] // wait to def as Mat4\r\n  children?: Tile[]\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  toJson() {\r\n    if (!this.validate()) {\r\n      throw new Error('[Tile toJson()] 验证此对象失败！')\r\n    }\r\n    const obj = {}\r\n    if (this.transform !== undefined) {\r\n      Object.defineProperty(obj, 'transform', {\r\n        value: this.transform\r\n      })\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default Tile","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass TileBoundingVolume implements IValidate {\r\n  box?: number[]\r\n  region?: number[]\r\n  sphere?: number[]\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  validate() {\r\n    const boxExist = this.box === undefined ? 1 : 0\r\n    const regionExist = this.region === undefined ? 1 : 0\r\n    const sphereExist = this.sphere === undefined ? 1 : 0\r\n    // === 3 意思是三个都不存在\r\n    // === 2 意思是存在 1 个\r\n    // === 1 意思是存在 2 个\r\n    // === 0 意思是存在 3 个\r\n    if (boxExist + regionExist + sphereExist !== 2) {\r\n      return false\r\n    }\r\n\r\n    if ((<number[]>this.box).length != 12)\r\n      return false\r\n    if ((<number[]>this.region).length != 6)\r\n      return false\r\n    if ((<number[]>this.sphere).length != 4)\r\n      return false\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileBoundingVolume","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\n// import * as URI from 'uri-js'\r\n\r\nclass TileContent implements IValidate {\r\n  boundingVolume?: TileBoundingVolume\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n\r\n  /**\r\n   * @deprecated `TileContent.url` 已废弃，请使用 `TileContent.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileContent","import ITilesetConstructionParam from \"../../../interfaces/tileset/ITilesetConstructionParam\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport Asset from \"./asset\"\r\nimport Property from \"./property\"\r\nimport Tile from \"./tile\"\r\n\r\nclass Tileset {\r\n  asset: Asset\r\n  root: Tile\r\n  geometricError: number\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n  extensionsUsed?: string[] = []\r\n  extensionsRequired?: string[] = []\r\n  properties?: Map<any, Property>\r\n\r\n  constructor(options: ITilesetConstructionParam) {\r\n    this.root = options.root\r\n    this.geometricError = options.geometricError\r\n    this.uri = options.uri\r\n  }\r\n\r\n  /**\r\n   * @deprecated `Tileset.url` 已废弃，请使用 `Tileset.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n  set url(value: string) {\r\n    this.uri = value\r\n  }\r\n}\r\n\r\nexport default Tileset","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IFTBinaryRef from \"../../../../interfaces/tileset/IFTBinaryRef\"\r\nimport IVctrFTJson from \"../../../../interfaces/tileset/IVctrFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateVctrFeatureTable(table: VctrFeatureTable) {\r\n  if (table.region.length !== 6) {\r\n    return false\r\n  }\r\n  if ((<number[]>table.rtcCenter).length !== 3) {\r\n    return false\r\n  }\r\n  if (table.polygonsLength !== undefined) {\r\n    if (table.polygonCounts === undefined || table.polygonIndexCounts === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  if (table.polylinesLength !== undefined) {\r\n    if (table.polylineCounts === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: VctrFeatureTable) {\r\n  const json = table._json as IVctrFTJson\r\n  table.region = json['REGION']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n  table.polygonsLength = json['POLYGONS_LENGTH']\r\n  table.polylinesLength = json['POLYLINES_LENGTH']\r\n  table.pointsLength = json['POINTS_LENGTH']\r\n\r\n  table.polygonCounts = json['POLYGON_COUNTS']\r\n  table.polygonIndexCounts = json['POLYGON_INDEX_COUNTS']\r\n  table.polygonMinimumHeights = json['POLYGON_MINIMUM_HEIGHTS']\r\n  table.polygonMaximumHeights = json['POLYGON_MAXIMUM_HEIGHTS']\r\n\r\n  table.polylineCounts = json['POLYLINE_COUNTS']\r\n  table.polylineBatchIds = json['POLYLINE_BATCH_IDS']\r\n  table.pointBatchIds = json['POINT_BATCH_IDS']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // TODO\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass VctrFeatureTable extends FeatureTable implements IValidate {\r\n  region: number[]\r\n  rtcCenter?: number[]\r\n  \r\n  polygonsLength?: number\r\n  polylinesLength?: number\r\n  pointsLength?: number\r\n  \r\n  polygonCounts?: IFTBinaryRef\r\n  polygonIndexCounts?: IFTBinaryRef\r\n  polygonMinimumHeights?: IFTBinaryRef\r\n  polygonMaximumHeights?: IFTBinaryRef\r\n  polygonBatchIds?: IFTBinaryRef\r\n  \r\n  polylineCounts?: IFTBinaryRef\r\n  polylineBatchIds?: IFTBinaryRef\r\n\r\n  pointBatchIds?: IFTBinaryRef\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new VctrFeatureTable()\r\n    \r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.Vctr\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateVctrFeatureTable(this)\r\n  }\r\n}\r\n\r\nexport default VctrFeatureTable","import { IOBuffer } from \"iobuffer\"\r\nimport readGLTF from \"./read-gltf\"\r\n\r\nconst readGLB = (binary: Uint8Array | ArrayBuffer | Buffer) => {\r\n  /* read head */\r\n  const io = new IOBuffer(binary)\r\n  const magic = io.readChars(4)\r\n  if (magic !== \"gltf\") {\r\n    throw new Error(\"[readGLB()] 不是 glb 二进制\")\r\n  }\r\n  const version = io.readUint32()\r\n  if (version !== 2) {\r\n    throw new Error(\"[readGLB()] 暂不支持其他版本，仅支持 2.0 版本\")\r\n  }\r\n  const length = io.readUint32()\r\n  if (length !== binary.byteLength) {\r\n    throw new Error(\"[readGLB()] 数据长度异常\")\r\n  }\r\n  \r\n  /* read json */\r\n  const jsonByteLength = io.readUint32()\r\n  const jsonType = io.readUint32()\r\n  console.log(`数据块 1 的类型: ${jsonType} (1=json, 0=bin)`)\r\n  const jsonText = io.readChars(jsonByteLength)\r\n  const json = JSON.parse(jsonText)\r\n\r\n  /* read binarydata */\r\n  const binByteLength = io.readUint32()\r\n  const binType = io.readUint32()\r\n  console.log(`数据块 2 的类型: ${binType} (1=json, 0=bin)`)\r\n  let binarydata = undefined\r\n  try {\r\n    binarydata = io.readBytes(binByteLength)\r\n  } catch {\r\n    throw new Error(\"[readGLB()] 数据长度异常，试检查 glb binary 块有无问题\")\r\n  }\r\n\r\n  /* read as gltfdocument */\r\n  if (binarydata) {\r\n    return readGLTF(json, binarydata)\r\n  }\r\n}\r\n\r\nexport default readGLB"],"names":["writeDefinedProperty","obj","name","data","undefined","Object","defineProperty","value","writeExtensionsProperty","exts","extObj","_","forEach","ext","json","GLTFVersion","GLTFBufferViewTarget","GLTFAsset","this","TWO","Set","asset","version","generator","minVersion","copyright","extras","GLTFBuffer","uri","byteLength","bf","extensions","GLTFAlphaMode","GLTFBufferView","buffer","byteOffset","byteStride","validate","Error","bv","target","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","GLTFAttributeType","GLTFComponentType","GLTFFilter","GLTFWrapMode","GLTFPrimitiveMode","MIME","GLTFPrimitiveAttribute","options","position","uv0","uv1","color0","normal","tangent","joints0","weights0","values","every","k","attr","POSITION","GLTFTextureInfo","index","texCoord","GLTFDocument","gltfObj","buffers","map","bufferViews","bufferView","accessors","acc","scenes","scene","nodes","node","meshes","mesh","materials","length","mt","textures","tx","images","img","samplers","spl","cameras","c","animations","ani","skins","skin","extensionsUsed","extensionsRequired","GLTFExtensionBase","_name","readGLTF","resources","doc","resourcesLength","console","log","JSON","parse","trim","gltfAsset","ONE","gltfBuffers","bfjson","push","readBuffers","gltfBufferViews","bvjson","readBufferViews","FastTextEncoder","utfLabel","RangeError","FastTextDecoder","fatal","scope","window","self","prototype","encode","string","stream","pos","extra","len","at","tlen","Math","max","Uint8Array","charCodeAt","update","set","slice","decode","bytes","out","byte1","byte2","byte3","codepoint","String","fromCharCode","apply","decoder","TextDecoder","exports","encoder","TextEncoder","str","IOBuffer","dataIsGiven","ArrayBuffer","lastWrittenByte","offset","dvOffset","isView","littleEndian","_data","DataView","_mark","_marks","n","pop","seek","available","newLength","newArray","readUint8","getInt8","getUint8","i","readByte","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","readInt8","result","readChar","utf8_1","readBytes","writeUint8","ensureAvailable","setInt8","_updateLastWrittenByte","setUint8","setInt16","setUint16","setInt32","setUint32","setFloat32","setFloat64","writeBytes","TilesetExtBase","TileHeaderBase","B3dmHeader","super","FeatureTableType","TileRefine","FeatureTable","B3dmFeatureTable","binary","ft","_json","_binary","featureTableType","B3dm","table","batchLength","rtcCenter","BatchTable","Map","bt","keys","variables","variableNames","has","get","I3dmHeader","gltfFormat","I3dmFeatureTable","I3dm","positionQuantized","normalUp","normalRight","normalUpOct32p","normalRightOct32p","scale","scaleNonUniform","instancesLength","quantizedVolumeOffset","quantizedVolumeScale","PntsHeader","PntsFeatureTable","Pnts","rgba","rgb","rgb565","normalOct16p","batchId","pointsLength","constantRgba","cacheBuffer","header","b3dm","iobuffer","io","rewind","magic","readChars","readUint32","featureTableJSONByteLength","featureTableBinaryByteLength","batchTableJSONByteLength","batchTableBinaryByteLength","skip","ftJSON","ftBin","featureTable","createFromJSON","btJSON","btBin","batchTable","attributes","Number","isInteger","componentType","count","type","min","normalized","sparse","indices","UNSIGNED_BYTE","UNSIGNED_INT","UNSIGNED_SHORT","v","channels","s","ac","sampler","act","path","as","input","output","interpolation","orthographic","perspective","camera","mimeType","OPAQUE","pbrMetallicRoughness","normalTexture","occlusionTexture","alphaMode","MASK","alphaCutoff","emissiveFactor","m","emissiveTexture","doubleSided","flag","primitives","primitive","prmt","weights","matrix","translation","rotation","r","validateTransforms","children","st","strength","xmag","ymag","zfar","znear","baseColorFactor","roughnessFactor","metallicFactor","baseColorTexture","metallicRoughnessTexture","pbr","yfov","aspectRatio","TRIANGLES","attribute","material","mode","magFilter","minFilter","wrapS","wrapT","joints","sk","inverseBindMatrices","skeleton","source","i3dm","pnts","transform","box","region","sphere","root","geometricError","VctrFeatureTable","Vctr","polygonsLength","polylinesLength","polygonCounts","polygonIndexCounts","polygonMinimumHeights","polygonMaximumHeights","polylineCounts","polylineBatchIds","pointBatchIds","jsonByteLength","jsonType","jsonText","binByteLength","binType","binarydata"],"mappings":"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"}