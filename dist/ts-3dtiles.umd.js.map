{"version":3,"file":"ts-3dtiles.umd.js","sources":["../src/gltf/core/def/enum/gltf-version.ts","../src/gltf/core/def/enum/gltf-alphamode.ts","../src/gltf/core/def/gltf-asset.ts","../src/gltf/core/def/enum/gltf-primitivemode.ts","../src/gltf/core/def/gltf-primitive-attribute.ts","../src/gltf/core/def/enum/gltf-attribute-type.ts","../src/gltf/core/def/enum/gltf-component-type.ts","../src/gltf/core/def/enum/gltf-filter.ts","../src/gltf/core/def/enum/gltf-wrapmode.ts","../src/gltf/core/def/enum/mime.ts","../src/gltf/core/def/gltf-texture-info.ts","../src/gltf/ext/gltf-extension-base.ts","../src/tileset/ext/ext-base.ts","../src/tileset/core/def/tile-header-base.ts","../src/tileset/core/def/tile-b3dm/header.ts","../node_modules/iobuffer/src/text-encoding-polyfill.js","../node_modules/iobuffer/src/utf8.browser.ts","../node_modules/iobuffer/src/IOBuffer.ts","../src/tileset/core/def/enum/featuretable-type.ts","../src/tileset/core/def/enum/tile-refine.ts","../src/tileset/core/def/featuretable/featuretable-base.ts","../src/tileset/core/def/featuretable/featuretable-b3dm.ts","../src/tileset/core/def/batchtable/batchtable-base.ts","../src/tileset/core/def/tile-i3dm/header.ts","../src/tileset/core/def/featuretable/featuretable-i3dm.ts","../src/tileset/core/def/tile-pnts/header.ts","../src/tileset/core/def/featuretable/featuretable-pnts.ts","../src/tileset/core/def/asset.ts","../src/tileset/core/def/tile-b3dm/index.ts","../src/tileset/ext/ext-batchtable-hierarchy.ts","../src/tileset/ext/ext-content-gltf.ts","../src/gltf/ext/ext-draco.ts","../src/tileset/ext/ext-implicit-tiling.ts","../src/tileset/ext/ext-layers.ts","../src/tileset/ext/ext-metadata.ts","../src/tileset/ext/ext-multiple-content.ts","../src/gltf/ext/ext-pbr-specular-glossiness.ts","../src/tileset/ext/ext-pnts-draco.ts","../src/gltf/core/def/gltf-accessor.ts","../src/gltf/core/def/gltf-accessor-sparse.ts","../src/gltf/core/def/gltf-accessor-sparse-indices.ts","../src/gltf/core/def/gltf-accessor-sparse-values.ts","../src/gltf/core/def/gltf-animation.ts","../src/gltf/core/def/gltf-animation-channel.ts","../src/gltf/core/def/gltf-animation-channel-target.ts","../src/gltf/core/def/gltf-buffer.ts","../src/gltf/core/def/gltf-bufferview.ts","../src/gltf/core/def/gltf-camera.ts","../src/gltf/core/gltf-document.ts","../src/gltf/core/def/gltf-image.ts","../src/gltf/core/def/gltf-material.ts","../src/gltf/core/def/gltf-mesh.ts","../src/gltf/core/def/gltf-node.ts","../src/gltf/core/def/gltf-normal-texture-info.ts","../src/gltf/core/def/gltf-occlusion-texture-info.ts","../src/gltf/core/def/gltf-orthographic-camera.ts","../src/gltf/core/def/gltf-pbr.ts","../src/gltf/core/def/gltf-perspective-camera.ts","../src/gltf/core/def/gltf-primitive.ts","../src/gltf/io/read-action/index.ts","../src/gltf/core/def/gltf-sampler.ts","../src/gltf/core/def/gltf-scene.ts","../src/gltf/core/def/gltf-skin.ts","../src/gltf/core/def/gltf-texture.ts","../src/gltf/io/write-action/index.ts","../src/tileset/core/def/tile-i3dm/index.ts","../src/tileset/core/def/tile-pnts/index.ts","../src/tileset/core/def/tile.ts","../src/tileset/core/def/tile-bounding-volume.ts","../src/tileset/core/def/tile-content.ts","../src/tileset/core/def/tileset.ts"],"sourcesContent":["enum GLTFVersion {\r\n  TWO = \"2.0\",\r\n  ONE = \"1.0\"\r\n}\r\n\r\nexport default GLTFVersion","/**\r\n * @enum {GLTFAlphaMode} 透明度模式\r\n */\r\nenum GLTFAlphaMode {\r\n  /** \r\n   * @description 不透明。默认选项。\r\n   */\r\n  OPAQUE = \"OPAQUE\",\r\n  /**\r\n   * @description 透明度取决于 alphaCutOff 值，即半透明\r\n   */\r\n  MASK = \"MASK\",\r\n  /**\r\n   * @description 混合模式\r\n   */\r\n  BLEND = \"BLEND\"\r\n}\r\n\r\nexport default GLTFAlphaMode","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFVersion from \"./enum/gltf-version\"\r\n\r\nclass GLTFAsset implements IValidate {\r\n  version: GLTFVersion = GLTFVersion.TWO\r\n  generator?: string  \r\n  copyright?: string\r\n  minVersion?: GLTFVersion\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate = () => true\r\n}\r\n\r\nexport default GLTFAsset","enum GLTFPrimitiveMode {\r\n  POINTS = 0,\r\n  LINES = 1,\r\n  LINE_LOOP = 2,\r\n  LINE_STRIP = 3,\r\n  TRIANGLES = 4,\r\n  TRIANGLE_STRIP = 5,\r\n  TRIANGLE_FAN = 6\r\n}\r\n\r\nexport default GLTFPrimitiveMode","import IValidate from \"../../../typings/IValidate\"\r\n\r\nclass GLTFPrimitiveAttribute implements IValidate {\r\n  position: number\r\n  st1?: number\r\n  normal?: number\r\n  \r\n  constructor(options: {\r\n    position: number,\r\n    st1?: number,\r\n    normal?: number\r\n  }) {\r\n    this.position = options.position\r\n    this.st1 = options.st1\r\n    this.normal = options.normal\r\n  }\r\n\r\n  validate() {\r\n    return Object.values(this).every(k => k! < 0)\r\n  }\r\n}\r\n\r\nexport default GLTFPrimitiveAttribute","enum GLTFAttributeType {\r\n  SCALAR = \"SCALAR\",\r\n  VEC2 = \"VEC2\",\r\n  VEC3 = \"VEC3\",\r\n  VEC4 = \"VEC4\",\r\n  MAT2 = \"MAT2\",\r\n  MAT3 = \"MAT3\",\r\n  MAT4 = \"MAT4\",\r\n}\r\n\r\nexport const getAttributeTypeElementCount = (t: GLTFAttributeType): number => {\r\n  switch (t) {\r\n    case GLTFAttributeType.VEC2:\r\n      return 2\r\n    case GLTFAttributeType.VEC3:\r\n      return 3\r\n    case GLTFAttributeType.VEC4:\r\n    case GLTFAttributeType.MAT2:\r\n      return 4\r\n    case GLTFAttributeType.MAT3:\r\n      return 9\r\n    case GLTFAttributeType.MAT4:\r\n      return 16\r\n    default: // means SCALAR\r\n      return 1\r\n  }\r\n}\r\n\r\nexport default GLTFAttributeType","enum GLTFComponentType {\r\n  BYTE = 5120,\r\n  UNSIGNED_BYTE = 5121,\r\n  SHORT = 5122,\r\n  UNSIGNED_SHORT = 5123,\r\n  UNSIGNED_INT = 5125,\r\n  FLOAT = 5126\r\n}\r\n\r\nexport const getComponentTypeByteSize = (t: GLTFComponentType): number => {\r\n  switch (t) {\r\n    case GLTFComponentType.BYTE:\r\n    case GLTFComponentType.UNSIGNED_BYTE:\r\n      return 1\r\n    case GLTFComponentType.SHORT:\r\n    case GLTFComponentType.UNSIGNED_SHORT:\r\n      return 2\r\n    case GLTFComponentType.UNSIGNED_INT:\r\n      return 4\r\n    default: // means FLOAT\r\n      return 8\r\n  }\r\n}\r\n\r\nexport default GLTFComponentType","enum GLTFFilter {\r\n  NEAREST = 9728,\r\n  LINEAR = 9729,\r\n  NEAREST_MIPMAP_NEAREST = 9984,\r\n  LINEAR_MIPMAP_NEAREST = 9985,\r\n  NEAREST_MIPMAP_LINEAR = 9986,\r\n  LINEAR_MIPMAP_LINEAR = 9987\r\n}\r\n\r\nexport default GLTFFilter","enum GLTFWrapMode {\r\n  REPEAT = 10497,\r\n  CLAMP_TO_EDGE = 33071,\r\n  MIRRORED_REPEAT = 33648,\r\n}\r\n\r\nexport default GLTFWrapMode","enum MIME {\r\n  JPG = \"image/jpg\",\r\n  JPEG = \"image/jpeg\",\r\n  PNG = \"image/png\",\r\n  WEBP = \"image/webp\",\r\n}\r\n\r\nexport default MIME","import IValidate from \"../../../typings/IValidate\";\r\n\r\nclass GLTFTextureInfo implements IValidate {\r\n  index: number\r\n  texCoord: number\r\n\r\n  constructor(index: number, texCoord: number) {\r\n    this.index = index\r\n    this.texCoord = texCoord\r\n  }\r\n\r\n  validate() {\r\n    return (this.index < 0 || this.texCoord < 0)\r\n  }\r\n}\r\n\r\nexport default GLTFTextureInfo","import IValidate from \"../../typings/IValidate\"\r\n\r\nclass GLTFExtensionBase implements IValidate {\r\n  get isRequire() {\r\n    return false\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFExtensionBase","class TilesetExtBase {\r\n  \r\n}\r\n\r\nexport default TilesetExtBase","import IValidate from \"../../../typings/IValidate\";\r\n\r\nclass TileHeaderBase implements IValidate {\r\n  magic: string\r\n  version: number\r\n  byteLength: number\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileHeaderBase","import TileHeaderBase from \"../tile-header-base\";\r\n\r\nclass B3dmHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default B3dmHeader","/*\n * Copyright 2017 Sam Thorogood. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n(function(scope) {\n  'use strict';\n\n  // fail early\n  if (scope['TextEncoder'] && scope['TextDecoder']) {\n    return false;\n  }\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   */\n  function FastTextEncoder(utfLabel = 'utf-8') {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextEncoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextEncoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  /**\n   * @param {string} string\n   * @param {{stream: boolean}=} options\n   * @return {!Uint8Array}\n   */\n  FastTextEncoder.prototype.encode = function(\n    string,\n    options = { stream: false },\n  ) {\n    if (options.stream) {\n      throw new Error(`Failed to encode: the 'stream' option is unsupported.`);\n    }\n\n    let pos = 0;\n    const len = string.length;\n    const out = [];\n\n    let at = 0; // output position\n    let tlen = Math.max(32, len + (len >> 1) + 7); // 1.5x size\n    let target = new Uint8Array((tlen >> 3) << 3); // ... but at 8 byte offset\n\n    while (pos < len) {\n      let value = string.charCodeAt(pos++);\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < len) {\n          const extra = string.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n        if (value >= 0xd800 && value <= 0xdbff) {\n          continue; // drop lone surrogate\n        }\n      }\n\n      // expand the buffer if we couldn't write 4 bytes\n      if (at + 4 > target.length) {\n        tlen += 8; // minimum extra\n        tlen *= 1.0 + (pos / string.length) * 2; // take 2x the remaining\n        tlen = (tlen >> 3) << 3; // 8 byte offset\n\n        const update = new Uint8Array(tlen);\n        update.set(target);\n        target = update;\n      }\n\n      if ((value & 0xffffff80) === 0) {\n        // 1-byte\n        target[at++] = value; // ASCII\n        continue;\n      } else if ((value & 0xfffff800) === 0) {\n        // 2-byte\n        target[at++] = ((value >> 6) & 0x1f) | 0xc0;\n      } else if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        target[at++] = ((value >> 12) & 0x0f) | 0xe0;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else if ((value & 0xffe00000) === 0) {\n        // 4-byte\n        target[at++] = ((value >> 18) & 0x07) | 0xf0;\n        target[at++] = ((value >> 12) & 0x3f) | 0x80;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // FIXME: do we care\n        continue;\n      }\n\n      target[at++] = (value & 0x3f) | 0x80;\n    }\n\n    return target.slice(0, at);\n  };\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   * @param {{fatal: boolean}=} options\n   */\n  function FastTextDecoder(utfLabel = 'utf-8', options = { fatal: false }) {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextDecoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n    if (options.fatal) {\n      throw new Error(\n        `Failed to construct 'TextDecoder': the 'fatal' option is unsupported.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextDecoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'fatal', { value: false });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'ignoreBOM', {\n    value: false,\n  });\n\n  /**\n   * @param {(!ArrayBuffer|!ArrayBufferView)} buffer\n   * @param {{stream: boolean}=} options\n   */\n  FastTextDecoder.prototype.decode = function(\n    buffer,\n    options = { stream: false },\n  ) {\n    if (options['stream']) {\n      throw new Error(`Failed to decode: the 'stream' option is unsupported.`);\n    }\n\n    const bytes = new Uint8Array(buffer);\n    let pos = 0;\n    const len = bytes.length;\n    const out = [];\n\n    while (pos < len) {\n      const byte1 = bytes[pos++];\n      if (byte1 === 0) {\n        break; // NULL\n      }\n\n      if ((byte1 & 0x80) === 0) {\n        // 1-byte\n        out.push(byte1);\n      } else if ((byte1 & 0xe0) === 0xc0) {\n        // 2-byte\n        const byte2 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 6) | byte2);\n      } else if ((byte1 & 0xf0) === 0xe0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n      } else if ((byte1 & 0xf8) === 0xf0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        const byte4 = bytes[pos++] & 0x3f;\n\n        // this can be > 0xffff, so possibly generate surrogates\n        let codepoint =\n          ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n        if (codepoint > 0xffff) {\n          // codepoint &= ~0x10000;\n          codepoint -= 0x10000;\n          out.push(((codepoint >>> 10) & 0x3ff) | 0xd800);\n          codepoint = 0xdc00 | (codepoint & 0x3ff);\n        }\n        out.push(codepoint);\n      } else {\n        // FIXME: we're ignoring this\n      }\n    }\n\n    return String.fromCharCode.apply(null, out);\n  };\n\n  scope['TextEncoder'] = FastTextEncoder;\n  scope['TextDecoder'] = FastTextDecoder;\n})(\n  typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : this,\n);\n","// eslint-disable-next-line import/no-unassigned-import\nimport './text-encoding-polyfill';\n\nconst decoder = new TextDecoder('utf-8');\n\nexport function decode(bytes: Uint8Array): string {\n  return decoder.decode(bytes);\n}\n\nconst encoder = new TextEncoder();\n\nexport function encode(str: string): Uint8Array {\n  return encoder.encode(str);\n}\n","import { decode, encode } from './utf8';\n\nconst defaultByteLength = 1024 * 8;\n\ntype InputData = number | ArrayBufferLike | ArrayBufferView | IOBuffer | Buffer;\n\ninterface IOBufferOptions {\n  /**\n   * Ignore the first n bytes of the ArrayBuffer.\n   */\n  offset?: number;\n}\n\nexport class IOBuffer {\n  /**\n   * Reference to the internal ArrayBuffer object.\n   */\n  public buffer: ArrayBufferLike;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public byteLength: number;\n\n  /**\n   * Byte offset of the internal ArrayBuffer.\n   */\n  public byteOffset: number;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public length: number;\n\n  /**\n   * The current offset of the buffer's pointer.\n   */\n  public offset: number;\n\n  private lastWrittenByte: number;\n  private littleEndian: boolean;\n\n  private _data: DataView;\n  private _mark: number;\n  private _marks: number[];\n\n  /**\n   * @param data - The data to construct the IOBuffer with.\n   * If data is a number, it will be the new buffer's length<br>\n   * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>\n   * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,\n   * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.\n   * @param options\n   */\n  public constructor(\n    data: InputData = defaultByteLength,\n    options: IOBufferOptions = {},\n  ) {\n    let dataIsGiven = false;\n    if (typeof data === 'number') {\n      data = new ArrayBuffer(data);\n    } else {\n      dataIsGiven = true;\n      this.lastWrittenByte = data.byteLength;\n    }\n\n    const offset = options.offset ? options.offset >>> 0 : 0;\n    const byteLength = data.byteLength - offset;\n    let dvOffset = offset;\n    if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\n      if (data.byteLength !== data.buffer.byteLength) {\n        dvOffset = data.byteOffset + offset;\n      }\n      data = data.buffer;\n    }\n    if (dataIsGiven) {\n      this.lastWrittenByte = byteLength;\n    } else {\n      this.lastWrittenByte = 0;\n    }\n    this.buffer = data;\n    this.length = byteLength;\n    this.byteLength = byteLength;\n    this.byteOffset = dvOffset;\n    this.offset = 0;\n    this.littleEndian = true;\n    this._data = new DataView(this.buffer, dvOffset, byteLength);\n    this._mark = 0;\n    this._marks = [];\n  }\n\n  /**\n   * Checks if the memory allocated to the buffer is sufficient to store more\n   * bytes after the offset.\n   * @param byteLength - The needed memory in bytes.\n   * @returns `true` if there is sufficient space and `false` otherwise.\n   */\n  public available(byteLength = 1): boolean {\n    return this.offset + byteLength <= this.length;\n  }\n\n  /**\n   * Check if little-endian mode is used for reading and writing multi-byte\n   * values.\n   * @returns `true` if little-endian mode is used, `false` otherwise.\n   */\n  public isLittleEndian(): boolean {\n    return this.littleEndian;\n  }\n\n  /**\n   * Set little-endian mode for reading and writing multi-byte values.\n   */\n  public setLittleEndian(): this {\n    this.littleEndian = true;\n    return this;\n  }\n\n  /**\n   * Check if big-endian mode is used for reading and writing multi-byte values.\n   * @returns `true` if big-endian mode is used, `false` otherwise.\n   */\n  public isBigEndian(): boolean {\n    return !this.littleEndian;\n  }\n\n  /**\n   * Switches to big-endian mode for reading and writing multi-byte values.\n   */\n  public setBigEndian(): this {\n    this.littleEndian = false;\n    return this;\n  }\n\n  /**\n   * Move the pointer n bytes forward.\n   * @param n - Number of bytes to skip.\n   */\n  public skip(n = 1): this {\n    this.offset += n;\n    return this;\n  }\n\n  /**\n   * Move the pointer to the given offset.\n   * @param offset\n   */\n  public seek(offset: number): this {\n    this.offset = offset;\n    return this;\n  }\n\n  /**\n   * Store the current pointer offset.\n   * @see {@link IOBuffer#reset}\n   */\n  public mark(): this {\n    this._mark = this.offset;\n    return this;\n  }\n\n  /**\n   * Move the pointer back to the last pointer offset set by mark.\n   * @see {@link IOBuffer#mark}\n   */\n  public reset(): this {\n    this.offset = this._mark;\n    return this;\n  }\n\n  /**\n   * Push the current pointer offset to the mark stack.\n   * @see {@link IOBuffer#popMark}\n   */\n  public pushMark(): this {\n    this._marks.push(this.offset);\n    return this;\n  }\n\n  /**\n   * Pop the last pointer offset from the mark stack, and set the current\n   * pointer offset to the popped value.\n   * @see {@link IOBuffer#pushMark}\n   */\n  public popMark(): this {\n    const offset = this._marks.pop();\n    if (offset === undefined) {\n      throw new Error('Mark stack empty');\n    }\n    this.seek(offset);\n    return this;\n  }\n\n  /**\n   * Move the pointer offset back to 0.\n   */\n  public rewind(): this {\n    this.offset = 0;\n    return this;\n  }\n\n  /**\n   * Make sure the buffer has sufficient memory to write a given byteLength at\n   * the current pointer offset.\n   * If the buffer's memory is insufficient, this method will create a new\n   * buffer (a copy) with a length that is twice (byteLength + current offset).\n   * @param byteLength\n   */\n  public ensureAvailable(byteLength = 1): this {\n    if (!this.available(byteLength)) {\n      const lengthNeeded = this.offset + byteLength;\n      const newLength = lengthNeeded * 2;\n      const newArray = new Uint8Array(newLength);\n      newArray.set(new Uint8Array(this.buffer));\n      this.buffer = newArray.buffer;\n      this.length = this.byteLength = newLength;\n      this._data = new DataView(this.buffer);\n    }\n    return this;\n  }\n\n  /**\n   * Read a byte and return false if the byte's value is 0, or true otherwise.\n   * Moves pointer forward by one byte.\n   */\n  public readBoolean(): boolean {\n    return this.readUint8() !== 0;\n  }\n\n  /**\n   * Read a signed 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readInt8(): number {\n    return this._data.getInt8(this.offset++);\n  }\n\n  /**\n   * Read an unsigned 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readUint8(): number {\n    return this._data.getUint8(this.offset++);\n  }\n\n  /**\n   * Alias for {@link IOBuffer#readUint8}.\n   */\n  public readByte(): number {\n    return this.readUint8();\n  }\n\n  /**\n   * Read `n` bytes and move pointer forward by `n` bytes.\n   */\n  public readBytes(n = 1): Uint8Array {\n    const bytes = new Uint8Array(n);\n    for (let i = 0; i < n; i++) {\n      bytes[i] = this.readByte();\n    }\n    return bytes;\n  }\n\n  /**\n   * Read a 16-bit signed integer and move pointer forward by 2 bytes.\n   */\n  public readInt16(): number {\n    const value = this._data.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.\n   */\n  public readUint16(): number {\n    const value = this._data.getUint16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit signed integer and move pointer forward by 4 bytes.\n   */\n  public readInt32(): number {\n    const value = this._data.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.\n   */\n  public readUint32(): number {\n    const value = this._data.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit floating number and move pointer forward by 4 bytes.\n   */\n  public readFloat32(): number {\n    const value = this._data.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 64-bit floating number and move pointer forward by 8 bytes.\n   */\n  public readFloat64(): number {\n    const value = this._data.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  /**\n   * Read a 1-byte ASCII character and move pointer forward by 1 byte.\n   */\n  public readChar(): string {\n    return String.fromCharCode(this.readInt8());\n  }\n\n  /**\n   * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.\n   */\n  public readChars(n = 1): string {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      result += this.readChar();\n    }\n    return result;\n  }\n\n  /**\n   * Read the next `n` bytes, return a UTF-8 decoded string and move pointer\n   * forward by `n` bytes.\n   */\n  public readUtf8(n = 1): string {\n    return decode(this.readBytes(n));\n  }\n\n  /**\n   * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer\n   * forward by 1 byte.\n   */\n  public writeBoolean(value: unknown): this {\n    this.writeUint8(value ? 0xff : 0x00);\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.\n   */\n  public writeInt8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setInt8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit unsigned integer and move pointer forward by 1\n   * byte.\n   */\n  public writeUint8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setUint8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * An alias for {@link IOBuffer#writeUint8}.\n   */\n  public writeByte(value: number): this {\n    return this.writeUint8(value);\n  }\n\n  /**\n   * Write all elements of `bytes` as uint8 values and move pointer forward by\n   * `bytes.length` bytes.\n   */\n  public writeBytes(bytes: ArrayLike<number>): this {\n    this.ensureAvailable(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      this._data.setUint8(this.offset++, bytes[i]);\n    }\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit signed integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeInt16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setInt16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit unsigned integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeUint16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setUint16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit signed integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeInt32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setInt32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit unsigned integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeUint32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setUint32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit floating number and move pointer forward by 4\n   * bytes.\n   */\n  public writeFloat32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setFloat32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 64-bit floating number and move pointer forward by 8\n   * bytes.\n   */\n  public writeFloat64(value: number): this {\n    this.ensureAvailable(8);\n    this._data.setFloat64(this.offset, value, this.littleEndian);\n    this.offset += 8;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write the charCode of `str`'s first character as an 8-bit unsigned integer\n   * and move pointer forward by 1 byte.\n   */\n  public writeChar(str: string): this {\n    return this.writeUint8(str.charCodeAt(0));\n  }\n\n  /**\n   * Write the charCodes of all `str`'s characters as 8-bit unsigned integers\n   * and move pointer forward by `str.length` bytes.\n   */\n  public writeChars(str: string): this {\n    for (let i = 0; i < str.length; i++) {\n      this.writeUint8(str.charCodeAt(i));\n    }\n    return this;\n  }\n\n  /**\n   * UTF-8 encode and write `str` to the current pointer offset and move pointer\n   * forward according to the encoded length.\n   */\n  public writeUtf8(str: string): this {\n    return this.writeBytes(encode(str));\n  }\n\n  /**\n   * Export a Uint8Array view of the internal buffer.\n   * The view starts at the byte offset and its length\n   * is calculated to stop at the last written byte or the original length.\n   */\n  public toArray(): Uint8Array {\n    return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\n  }\n\n  /**\n   * Update the last written byte offset\n   * @private\n   */\n  private _updateLastWrittenByte(): void {\n    if (this.offset > this.lastWrittenByte) {\n      this.lastWrittenByte = this.offset;\n    }\n  }\n}\n","enum FeatureTableType {\r\n  B3dm = \"b3dm\",\r\n  I3dm = \"i3dm\",\r\n  Pnts = \"pnts\",\r\n  Vctr = \"vctr\"\r\n}\r\n\r\nexport default FeatureTableType","enum TileRefine {\r\n  ADD = \"add\",\r\n  REPLACE = \"replace\"\r\n}\r\n\r\nexport default TileRefine","import IValidate from \"../../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\n\r\nclass FeatureTable implements IValidate {\r\n\r\n  _json: Object\r\n  _binary: Uint8Array\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  featureTableType: FeatureTableType\r\n\r\n  validate() {\r\n    return false // base class always return false.\r\n  }\r\n}\r\n\r\nexport default FeatureTable","import IValidate from \"../../../../typings/IValidate\"\r\nimport IB3dmFTJson from \"../../../../typings/tileset/IB3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateB3dmBatchTable(table: B3dmFeatureTable): boolean {\r\n  return table.batchLength === undefined ? false : true\r\n}\r\n\r\nfunction parse(table: B3dmFeatureTable) {\r\n  const json = table._json as IB3dmFTJson\r\n  table.batchLength = json['BATCH_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass B3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  batchLength: number\r\n  rtcCenter?: number[]\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new B3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.B3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateB3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default B3dmFeatureTable","import { IOBuffer } from \"iobuffer\"\r\nimport IValidate from \"../../../../typings/IValidate\"\r\nimport IBTBinaryRef from \"../../../../typings/tileset/IBTBinaryRef\"\r\nimport IBTJson, { BTJsonValue } from \"../../../../typings/tileset/IBTJson\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\n\r\n/*\r\n  batchtable\r\n    json: 它有可能是n个数组，每个数组的长度等于不同瓦片的 featureTableJSON.XXXLength，b3dm 是 BATCH_LENGTH，等等：\r\n            {\r\n              \"name\": ['name1', 'name2', 'name3'],\r\n              \"height\": [10, 20, 5]\r\n            }\r\n          也有可能是对二进制 batchtable binary 的引用定义，拥有 byteOffset、componentType、type 三个属性的对象\r\n            {\r\n              \"name\": {\r\n                byteOffset: 16, // 相对于 batchtable binary body 的偏移值\r\n                type: \"SCALAR\",\r\n                componentType: \"INT\"\r\n              }\r\n            }\r\n          所以，batchtable 有一个弱点，不能用 binary 存储文本数据，因为第二种情况只允许存储 scalar、vec2、vec3、vec4 四种数值类型\r\n          不过使用 byte + scalar 的方式或许可以存储字节信息。\r\n    binary: 根据 json 中第二种定义而存储数据\r\n\r\n  扩展：层级 batchtable：\r\n    \r\n */\r\n\r\nfunction parse(table: BatchTable) {\r\n  for (const k of Object.keys(table._json)) {\r\n    table.variables.set(k, table._json[k])\r\n  }\r\n}\r\n\r\nclass BatchTable implements IValidate {\r\n\r\n  _json: IBTJson\r\n  _binary: Uint8Array\r\n\r\n  variables: Map<string, BTJsonValue> = new Map()\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  static createFromJSON(json: IBTJson, binary: Uint8Array) {\r\n    const bt = new BatchTable()\r\n    bt._json = json\r\n    bt._binary = binary\r\n\r\n    parse(bt)\r\n\r\n    return bt\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get variableNames() {\r\n    return Object.keys(this._json)\r\n  }\r\n\r\n  get variableCounts() {\r\n    return this.variableNames.length\r\n  }\r\n\r\n  getVariable(name: string) {\r\n    if (this.variables.has(name)) {\r\n      const v = this.variables.get(name)\r\n      return v\r\n    }\r\n\r\n    throw new Error(`[BatchTable getVariable()] 没有这个值：${name}。`)\r\n  }\r\n}\r\n\r\nfunction timesOperator(fn: () => void, times: number) {\r\n  for (let i = 0; i < times; i++) fn()\r\n}\r\n\r\nfunction getTimes(type: string) {\r\n  return type === \"SCALAR\" ? 1 :\r\n  type === \"VEC2\" ? 2 :\r\n  type === \"VEC3\" ? 3 :\r\n  type === \"VEC4\" ? 4 : -1\r\n}\r\n\r\nfunction getReadFunction(io: IOBuffer, componentType: string) {\r\n  return componentType === \"BYTE\" ? io.readInt8 :\r\n  componentType === \"UNSIGNED_BYTE\" ? io.readUint8 :\r\n  componentType === \"SHORT\" ? io.readInt16 :\r\n  componentType === \"UNSIGNED_SHORT\" ? io.readUint16 : \r\n  componentType === \"INT\" ? io.readInt32:\r\n  componentType === \"UNSIGNED_INT\" ? io.readUint32 :\r\n  componentType === \"FLOAT\" ? io.readFloat32 : io.readFloat64\r\n}\r\n\r\n/**\r\n * 将 BatchTableBinary 读取并转换成普通的数字数组\r\n * @param {BatchTable} table BatchTable 实例\r\n * @param {IBTBinaryRef} variable 从 BatchTable JSON 中获取的引用描述对象，可使用 BatchTable.prototype.getVariable(name) 获取\r\n * @param {number} count FeatureTable 中的 XXXLength，即每个变量有多少个数据\r\n * @returns {number[]}\r\n */\r\nexport const parseBTBinary2Array = (table: BatchTable, variable: IBTBinaryRef, count: number) => {\r\n  let hasHierarchy = false\r\n  table.extensions?.forEach(ext => {\r\n    if ('name' in ext && ext['name'] === '3DTILES_batch_table_hierarchy') {\r\n      hasHierarchy = true\r\n    }\r\n  })\r\n  if (hasHierarchy) {\r\n    return\r\n  }\r\n\r\n  const io = new IOBuffer(table._binary.buffer)\r\n  io.skip(variable.byteOffset)\r\n  const result: number[] = []\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const readFunction = getReadFunction(io, variable.componentType)\r\n    timesOperator(() => result.push(readFunction()), getTimes(variable.type))\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default BatchTable","import IValidate from \"../../../../typings/IValidate\"\r\nimport TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass I3dmHeader extends TileHeaderBase implements IValidate {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  gltfFormat: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  validate() {\r\n    if (this.gltfFormat !== 0 && this.gltfFormat !== 1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default I3dmHeader","import IValidate from \"../../../../typings/IValidate\"\r\nimport IFTBinaryRef from \"../../../../typings/tileset/IFTBinaryRef\"\r\nimport II3dmFTJson from \"../../../../typings/tileset/II3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateI3dmBatchTable(table: I3dmFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.position !== undefined && table.positionQuantized !== undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  if (\r\n    (table.normalUp === undefined && table.normalRight !== undefined) ||\r\n    (table.normalRight === undefined && table.normalUp !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  if (\r\n    (table.normalUpOct32p === undefined && table.normalRightOct32p !== undefined) ||\r\n    (table.normalRightOct32p === undefined && table.normalUpOct32p !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: I3dmFeatureTable) {\r\n  const json = table._json as II3dmFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.normalUp = json['NORMAL_UP']\r\n  table.normalRight = json['NORMAL_RIGHT']\r\n  table.normalUpOct32p = json['NORMAL_UP_OCT32P']\r\n  table.normalRightOct32p = json['NORMAL_RIGHT_OCT32P']\r\n  table.scale = json['SCALE']\r\n  table.scaleNonUniform = json['SCALE_NON_UNIFORM']\r\n  table.instancesLength = json['INSTANCES_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass I3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  normalUp?: IFTBinaryRef\r\n  normalRight?: IFTBinaryRef\r\n  normalUpOct32p?: IFTBinaryRef\r\n  normalRightOct32p?: IFTBinaryRef\r\n  scale?: IFTBinaryRef\r\n  batchId?: IFTBinaryRef\r\n  scaleNonUniform?: IFTBinaryRef\r\n\r\n  instancesLength: number\r\n\r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  eastNorthUp?: boolean\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new I3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.I3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateI3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default I3dmFeatureTable","import TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass PntsHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  \r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default PntsHeader","import IValidate from \"../../../../typings/IValidate\"\r\nimport IFTBinaryRef from \"../../../../typings/tileset/IFTBinaryRef\"\r\nimport IPntsFTJson from \"../../../../typings/tileset/IPntsFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validatePntsFeatureTable(table: PntsFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.batchId !== undefined && table.batchLength === undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: PntsFeatureTable) {\r\n  const json = table._json as IPntsFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.rgba = json['RGBA']\r\n  table.rgb = json['RGB']\r\n  table.rgb565 = json['RGB565']\r\n  table.normal = json['NORMAL']\r\n  table.normalOct16p = json['NORMAL_OCT16P']\r\n  table.batchId = json['BATCH_ID']\r\n  table.pointsLength = json['POINTS_LENGTH']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n  table.constantRgba = json['CONSTANT_RGBA']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass PntsFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  rgba?: IFTBinaryRef\r\n  rgb?: IFTBinaryRef\r\n  rgb565?: IFTBinaryRef\r\n  normal?: IFTBinaryRef\r\n  normalOct16p?: IFTBinaryRef\r\n\r\n  pointsLength: number\r\n  \r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  constantRgba?: number[]\r\n  batchId?: any\r\n  batchLength?: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new PntsFeatureTable()\r\n    \r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.Pnts\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validatePntsFeatureTable(this)\r\n  }\r\n}\r\n\r\nexport default PntsFeatureTable","import IValidate from \"../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass Asset implements IValidate {\r\n  version: string\r\n  tilesetVersion?: string\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default Asset","import { IOBuffer } from 'iobuffer'\r\n\r\nimport IValidate from \"../../../../typings/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport B3dmHeader from \"./header\"\r\nimport B3dmFeatureTable from '../featuretable/featuretable-b3dm'\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: B3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(b3dm: B3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(b3dm.header, iobuffer)\r\n\r\n  if (b3dm.byteLength % 8 != 0) {\r\n    throw new Error('[B3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(b3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(b3dm.featureTableBinaryByteLength)\r\n  b3dm.featureTable = B3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (b3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(b3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(b3dm.batchTableBinaryByteLength)\r\n    b3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass B3dm implements IValidate {\r\n  header: B3dmHeader\r\n  featureTable: B3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new B3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default B3dm","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtBatchtableHierarchy extends TilesetExtBase {\r\n  readonly name = \"3DTILES_batch_table_hierarchy\"\r\n\r\n  load() {\r\n    \r\n  }\r\n}\r\n\r\nexport default ExtBatchtableHierarchy","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtContentGLTF extends TilesetExtBase {\r\n  readonly name = \"3DTILES_content_gltf\"\r\n}\r\n\r\nexport default ExtContentGLTF","import GLTFPrimitiveAttribute from \"../core/def/gltf-primitive-attribute\";\r\nimport GLTFExtensionBase from \"./gltf-extension-base\";\r\n\r\nclass ExtDraco extends GLTFExtensionBase {\r\n  readonly name = \"KHR_draco_mesh_compression\"\r\n  bufferView: number\r\n  attributes: GLTFPrimitiveAttribute\r\n\r\n  get isRequire() {\r\n    return true\r\n  }\r\n\r\n  constructor(options: {\r\n    bufferView: number,\r\n    attributes: GLTFPrimitiveAttribute\r\n  }) {\r\n    super()\r\n    this.bufferView = options.bufferView\r\n    this.attributes = options.attributes\r\n  }\r\n\r\n  validate() {\r\n    return Number.isInteger(this.bufferView)\r\n  }\r\n}\r\n\r\nexport default ExtDraco","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtImplicitTiling extends TilesetExtBase {\r\n  readonly name = \"3DTILES_implicit_tiling\"\r\n}\r\n\r\nexport default ExtImplicitTiling","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtLayers extends TilesetExtBase {\r\n  readonly name = \"3DTILES_layers\"\r\n}\r\n\r\nexport default ExtLayers","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMetadata extends TilesetExtBase {\r\n  readonly name = \"3DTILES_metadata\"\r\n}\r\n\r\nexport default ExtMetadata","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMultipleContent extends TilesetExtBase {\r\n  readonly name = \"3DTILES_multiple_contents\"\r\n}\r\n\r\nexport default ExtMultipleContent","import GLTFTextureInfo from \"../core/def/gltf-texture-info\";\r\nimport GLTFExtensionBase from \"./gltf-extension-base\";\r\n\r\nclass ExtPbrSpecularGlossiness extends GLTFExtensionBase {\r\n  readonly name = \"KHR_materials_pbrSpecularGlossiness\"\r\n  diffuseFactor?: number[]\r\n  specularFactor?: number[]\r\n  glossinessFactor?: number\r\n  diffuseTexture?: GLTFTextureInfo\r\n  specularGlossinessTexture?: GLTFTextureInfo\r\n\r\n  get isRequire() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default ExtPbrSpecularGlossiness","import TilesetExtBase from \"./ext-base\";\r\n\r\nclass ExtPntsDraco extends TilesetExtBase {\r\n  readonly name = \"3DTILES_draco_point_compression\"\r\n}\r\n\r\nexport default ExtPntsDraco","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFAttributeType from \"./enum/gltf-attribute-type\"\r\nimport GLTFComponentType from \"./enum/gltf-component-type\"\r\n\r\nclass GLTFAccessor implements IValidate {\r\n  componentType: GLTFComponentType\r\n  count: number\r\n  type: GLTFAttributeType\r\n  max?: number[]\r\n  min?: number[]\r\n  sparse?: any\r\n  name?: string\r\n  normalized?: boolean\r\n  bufferView?: number\r\n  byteOffset?: number\r\n\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(options: {\r\n    componentType: GLTFComponentType\r\n    count: number\r\n    type: GLTFAttributeType\r\n  }) {\r\n    this.componentType = options.componentType\r\n    this.count = options.count\r\n    this.type = options.type\r\n  }\r\n\r\n  validate() {\r\n    /** byteOffset 和 bufferView 必须同时存在 */\r\n    if (this.byteOffset !== undefined && this.bufferView !== undefined) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport default GLTFAccessor","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFAccessorSparseIndices from \"./gltf-accessor-sparse-indices\"\r\nimport GLTFAccessorSparseValues from \"./gltf-accessor-sparse-values\"\r\n\r\nclass GLTFAccessorSparse implements IValidate {\r\n  count: number\r\n  indices: GLTFAccessorSparseIndices\r\n  values: GLTFAccessorSparseValues\r\n\r\n  validate() {\r\n    return this.values.validate() && this.indices.validate()\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparse","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport { GLTFComponentType } from \"./enum\"\r\n\r\nclass GLTFAccessorSparseIndices implements IValidate {\r\n  bufferView: number\r\n  byteOffset: number\r\n  componentType: GLTFComponentType\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (\r\n      this.componentType !== GLTFComponentType.UNSIGNED_BYTE &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_INT &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_SHORT\r\n    ) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseIndices","import IValidate from \"../../../typings/IValidate\";\r\nimport { GLTFExtensionBase } from \"../../ext\";\r\n\r\nclass GLTFAccessorSparseValues implements IValidate {\r\n  bufferView: number\r\n  byteOffset?: number\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    return !(this.byteOffset! < 0)\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseValues","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFAnimationChannel from \"./gltf-animation-channel\"\r\nimport GLTFAnimationSampler from \"./gltf-animation-sampler\"\r\n\r\nclass GLTFAnimation implements IValidate {\r\n  channels: GLTFAnimationChannel[]\r\n  samplers: GLTFAnimationSampler[]\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set() \r\n\r\n  validate() {\r\n    if (this.channels!.length < 1 || this.samplers!.length < 1) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFAnimation","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFAnimationChannelTarget from \"./gltf-animation-channel-target\"\r\n\r\nclass GLTFAnimationChannel implements IValidate {\r\n  sampler: number\r\n  target: GLTFAnimationChannelTarget\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate = () => this.target.validate()\r\n}\r\n\r\nexport default GLTFAnimationChannel","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFAnimationChannelTargetPath from \"./enum/gltf-animation-channel-target-path\"\r\n\r\nclass GLTFAnimationChannelTarget implements IValidate {\r\n  node?: number\r\n  path: GLTFAnimationChannelTargetPath\r\n  extensions: Set<GLTFExtensionBase> = new Set\r\n\r\n  validate = () => true\r\n}\r\n\r\nexport default GLTFAnimationChannelTarget","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFBuffer implements IValidate {\r\n  byteLength: number = 0\r\n  uri?: string\r\n  /** @deprecated */\r\n  url?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.byteLength < 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFBuffer","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFBufferView implements IValidate {\r\n  buffer: number = 0\r\n  byteLength: number = 0\r\n  byteOffset?: number = 0\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.buffer < 0) {\r\n      return false\r\n    }\r\n    if (this.byteLength < 0) {\r\n      return false\r\n    }\r\n    if (this.byteOffset! < 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default GLTFBufferView","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFCameraType from \"./enum/gltf-cameratype\"\r\nimport GLTFOrthographicCamera from \"./gltf-orthographic-camera\"\r\nimport GLTFPerspectiveCamera from \"./gltf-perspective-camera\"\r\n\r\nclass GLTFCamera implements IValidate {\r\n  orthographic?: GLTFOrthographicCamera\r\n  perspective?: GLTFPerspectiveCamera\r\n  type: GLTFCameraType\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(options: {\r\n    orthographic?: GLTFOrthographicCamera\r\n    perspective?: GLTFPerspectiveCamera\r\n    type: GLTFCameraType\r\n    name?: string\r\n  }) {\r\n    this.orthographic = options.orthographic\r\n    this.perspective = options.perspective\r\n    this.type = options.type\r\n    this.name = options.name\r\n  }\r\n\r\n  validate() {\r\n    if (this.orthographic !== undefined && this.perspective !== undefined) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFCamera","import {\r\n  GLTFAsset,\r\n  GLTFBuffer,\r\n  GLTFBufferView,\r\n  GLTFAccessor,\r\n  GLTFScene,\r\n  GLTFNode,\r\n  GLTFMesh,\r\n  GLTFMaterial,\r\n  GLTFImage,\r\n  GLTFTexture,\r\n  GLTFSampler,\r\n} from './def'\r\n\r\nclass GLTFDocument {\r\n  asset: GLTFAsset = new GLTFAsset()\r\n  scene: number = 0\r\n\r\n  buffers: GLTFBuffer[] = []\r\n  bufferViews: GLTFBufferView[] = []\r\n  accessors: GLTFAccessor[] = []\r\n\r\n  scenes: GLTFScene[] = []\r\n  nodes: GLTFNode[] = []\r\n  meshes: GLTFMesh[] = []\r\n  \r\n  materials: GLTFMaterial[] = []\r\n  textures: GLTFTexture[] = []\r\n  images: GLTFImage[] = []\r\n  samplers: GLTFSampler[] = []\r\n}\r\n\r\nexport default GLTFDocument","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport MIME from \"./enum/mime\"\r\n\r\nclass GLTFImage implements IValidate {\r\n  uri?: string\r\n  bufferView?: number\r\n  mimeType?: MIME\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.uri !== undefined && this.bufferView !== undefined) {\r\n      return false\r\n    }\r\n    if (this.bufferView !== undefined) {\r\n      if (this.mimeType === undefined) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFImage","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFAlphaMode from \"./enum/gltf-alphamode\"\r\nimport GLTFPbr from \"./gltf-pbr\"\r\nimport GLTFOcclusionTextureInfo from \"./gltf-occlusion-texture-info\"\r\nimport GLTFNormalTextureInfo from \"./gltf-normal-texture-info\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFMaterial implements IValidate {\r\n  pbrMetallicRoughness?: GLTFPbr\r\n  normalTexture?: GLTFNormalTextureInfo\r\n  occlusionTexture?: GLTFOcclusionTextureInfo\r\n  emissiveTexture?: GLTFTextureInfo\r\n  emissiveFactor?: number[]\r\n  alphaMode?: GLTFAlphaMode\r\n  alphaCutoff?: number\r\n  doubleSided?: boolean\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.pbrMetallicRoughness!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.normalTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.occlusionTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.alphaMode === GLTFAlphaMode.MASK && this.alphaCutoff === undefined) {\r\n      return false\r\n    }\r\n    if (this.emissiveFactor!.length !== 3) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFMaterial","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFPrimitive from \"./gltf-primitive\"\r\n\r\nclass GLTFMesh implements IValidate {\r\n  primitives: GLTFPrimitive[] = []\r\n  weights?: number[]\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    let flag = false\r\n    if (this.primitives.every(primitive => primitive.validate())) {\r\n      flag = true\r\n    }\r\n    return flag\r\n  }\r\n}\r\n\r\nexport default GLTFMesh","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFNode implements IValidate {\r\n  children: number[] = []\r\n  mesh?: number\r\n  rotation?: number[]\r\n  translation?: number[]\r\n  weights?: number[]\r\n  name?: string\r\n  skin?: number\r\n  camera?: number\r\n  matrix?: number[]\r\n  scale?: number[]\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(options: {\r\n    children?: number[]\r\n    mesh?: number\r\n    rotation?: number[]\r\n    translation?: number[]\r\n    weights?: number[]\r\n    name?: string\r\n    skin?: number\r\n    camera?: number\r\n    matrix?: number[]\r\n    scale?: number[]\r\n  }) {\r\n    this.mesh = options.mesh\r\n    this.camera = options.camera\r\n    this.scale = options.scale\r\n    this.skin = options.skin\r\n    this.matrix = options.matrix\r\n    this.translation = options.translation\r\n    this.rotation = options.rotation\r\n    this.name = options.name\r\n    this.weights = options.weights\r\n  }\r\n\r\n  private validateTransforms() {\r\n    let flag = true\r\n    if (this.matrix !== undefined) {\r\n      if (this.rotation !== undefined || this.scale !== undefined || this.translation !== undefined) {\r\n        flag = false\r\n      }\r\n    }\r\n    if (this.matrix!.length !== 16) {\r\n      flag = false\r\n    }\r\n    if (this.scale!.length !== 3) {\r\n      flag = false\r\n    }\r\n    if (this.translation!.length !== 3) {\r\n      flag = false\r\n    }\r\n\r\n    if (this.rotation!.length !== 4) {\r\n      flag = false\r\n    } else {\r\n      flag = this.rotation!.every(r => r > 1 || r < -1)\r\n    }\r\n\r\n    return flag\r\n  }\r\n\r\n  validate() {\r\n    if (this.validateTransforms()) {\r\n      return false\r\n    }\r\n    if (this.weights!.length < 1) {\r\n      return false\r\n    } else if (this.weights !== undefined && this.mesh === undefined) {\r\n      return false\r\n    }\r\n    if (this.skin !== undefined && this.mesh === undefined) {\r\n      return false\r\n    }\r\n\r\n    if (this.children!.length < 1) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFNode","import IValidate from \"../../../typings/IValidate\";\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\";\r\nimport GLTFTextureInfo from \"./gltf-texture-info\";\r\n\r\nclass GLTFNormalTextureInfo \r\nextends GLTFTextureInfo \r\nimplements IValidate {\r\n  scale: number\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(index: number, texCoord: number, scale: number) {\r\n    super(index, texCoord)\r\n    this.scale = scale\r\n  }\r\n}\r\n\r\nexport default GLTFNormalTextureInfo","import IValidate from \"../../../typings/IValidate\";\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\";\r\nimport GLTFTextureInfo from \"./gltf-texture-info\";\r\n\r\nclass GLTFOcclusionTextureInfo \r\nextends GLTFTextureInfo \r\nimplements IValidate {\r\n  strength: number\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(index: number, texCoord: number, strength: number) {\r\n    super(index, texCoord)\r\n    this.strength = strength\r\n  }\r\n\r\n  validate() {\r\n    return (this.strength > 1 || this.strength < 0)\r\n  }\r\n}\r\n\r\nexport default GLTFOcclusionTextureInfo","import IGLTFOrthographicCameraConstructionParam from '../../../typings/IGLTFOrthographicCameraConstructionParam'\r\n\r\nclass GLTFOrthographicCamera {\r\n  xmag: number\r\n  ymag: number\r\n  zfar: number\r\n  znear: number\r\n\r\n  constructor(options: IGLTFOrthographicCameraConstructionParam) {\r\n    this.xmag = options.xmag\r\n    this.ymag = options.ymag\r\n    this.zfar = options.zfar\r\n    this.znear = options.znear\r\n  }\r\n}\r\n\r\nexport default GLTFOrthographicCamera","import IValidate from \"../../../typings/IValidate\";\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\";\r\nimport GLTFTextureInfo from \"./gltf-texture-info\";\r\n\r\nclass GLTFPbr implements IValidate {\r\n  baseColorFactor?: number[]\r\n  baseColorTexture?: GLTFTextureInfo\r\n  metallicFactor?: number\r\n  roughnessFactor?: number\r\n  metallicRoughnessTexture?: GLTFTextureInfo\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.baseColorFactor!.length !== 4 || this.baseColorFactor!.every(v => v < 0 || v > 1)) {\r\n      return false\r\n    }\r\n    if (this.roughnessFactor! > 1 || this.roughnessFactor! < 0) {\r\n      return false\r\n    }\r\n    if (this.metallicFactor! > 1 || this.metallicFactor! < 0) {\r\n      return false\r\n    }\r\n    if (this.baseColorTexture!.validate() === false || this.metallicRoughnessTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFPbr","import IGLTFPerspectiveCameraConstructionParam from \"../../../typings/IGLTFPerspectiveCameraConstructionParam\";\r\nimport IValidate from \"../../../typings/IValidate\";\r\n\r\nclass GLTFPerspectiveCamera implements IValidate {\r\n  yfov: number\r\n  znear: number\r\n  zfar?: number\r\n  aspectRatio?: number\r\n\r\n  constructor(options: IGLTFPerspectiveCameraConstructionParam) {\r\n    this.yfov = options.yfov\r\n    this.znear = options.znear\r\n    this.zfar = options.zfar\r\n    this.aspectRatio = options.aspectRatio\r\n  }\r\n\r\n  /**\r\n   * @todo \r\n   */\r\n  validate() {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default GLTFPerspectiveCamera","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFPrimitiveMode from \"./enum/gltf-primitivemode\"\r\nimport GLTFPrimitiveAttribute from \"./gltf-primitive-attribute\"\r\n\r\nclass GLTFPrimitive implements IValidate {\r\n  attribute: GLTFPrimitiveAttribute\r\n  indices?: number\r\n  material?: number\r\n  mode?: GLTFPrimitiveMode\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n  \r\n  constructor(options: {\r\n    attribute: {\r\n      position: number,\r\n      [propName: string]: any\r\n    },\r\n    indices?: number,\r\n    material?: number,\r\n    mode?: GLTFPrimitiveMode\r\n  }) {\r\n    this.attribute = new GLTFPrimitiveAttribute({\r\n      position: options.attribute.position,\r\n      st1: options.attribute['st1'],\r\n      normal: options.attribute['normal']\r\n    })\r\n    this.indices = options.indices\r\n    this.material = options.material\r\n    if (options.mode! !== GLTFPrimitiveMode.TRIANGLES) {\r\n      this.mode = options.mode\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    if (this.attribute.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.indices! < 0) {\r\n      return false\r\n    }\r\n    if (this.material! < 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFPrimitive","class GLTFReadAction {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  read(callback: () => void) {\r\n    callback()\r\n  }\r\n}\r\n\r\nexport default GLTFReadAction","import IValidate from '../../../typings/IValidate'\r\nimport GLTFExtensionBase from '../../ext/gltf-extension-base'\r\nimport GLTFFilter from './enum/gltf-filter'\r\nimport GLTFWrapMode from './enum/gltf-wrapmode'\r\n\r\nclass GLTFSampler implements IValidate {\r\n  magFilter?: GLTFFilter\r\n  minFilter?: GLTFFilter\r\n  wrapS?: GLTFWrapMode\r\n  wrapT?: GLTFWrapMode\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate = () => true\r\n}\r\n\r\nexport default GLTFSampler","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFScene implements IValidate {\r\n  nodes: number[] = []\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n  \r\n  validate() {\r\n    return (this.nodes.length < 1)\r\n  }\r\n}\r\n\r\nexport default GLTFScene","import IValidate from \"../../../typings/IValidate\";\r\nimport { GLTFExtensionBase } from \"../../ext\";\r\n\r\nclass GLTFSkin implements IValidate {\r\n  inverseBindMatrices?: number\r\n  skeleton?: number\r\n  name?: string\r\n  joints: number[]\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return !(this.joints.length < 1)\r\n  }\r\n}\r\n\r\nexport default GLTFSkin","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFTexture implements IValidate {\r\n  sampler?: number\r\n  source?: number\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate = () => true\r\n}\r\n\r\nexport default GLTFTexture","import { GLTFDocument } from \"../..\";\r\n\r\nclass GLTFWriteAction {\r\n  doc?: GLTFDocument\r\n  constructor() {\r\n    this.doc = undefined\r\n  }\r\n\r\n  setDocument(d: GLTFDocument) {\r\n    // if (d.validate()) {\r\n    //   this.doc = d\r\n    // }\r\n    this.doc = d\r\n  }\r\n\r\n  write(resultPath: string) {\r\n    console.log(resultPath)\r\n    return this.doc\r\n  }\r\n}\r\n\r\nexport default GLTFWriteAction","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../typings/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport I3dmFeatureTable from \"../featuretable/featuretable-i3dm\"\r\nimport I3dmHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: I3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n  header.gltfFormat = io.readUint32()\r\n}\r\n\r\nfunction parse(i3dm: I3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(i3dm.header, iobuffer)\r\n\r\n  if (i3dm.byteLength % 8 != 0) {\r\n    throw new Error('[I3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(32)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(i3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(i3dm.featureTableBinaryByteLength)\r\n  i3dm.featureTable = I3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (i3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(i3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(i3dm.batchTableBinaryByteLength)\r\n    i3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass I3dm implements IValidate {\r\n  header: I3dmHeader\r\n  featureTable: I3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  externalData: string | GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new I3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get gltfFormat() {\r\n    return this.header.gltfFormat\r\n  }\r\n\r\n  get sizeWithoutExternalData() {\r\n    return 32 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default I3dm","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../typings/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../..\"\r\nimport PntsFeatureTable from \"../featuretable/featuretable-pnts\"\r\nimport PntsHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: PntsHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(pnts: Pnts, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(pnts.header, iobuffer)\r\n\r\n  if (pnts.byteLength % 8 != 0) {\r\n    throw new Error('[Pnts 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(pnts.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(pnts.featureTableBinaryByteLength)\r\n  pnts.featureTable = PntsFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (pnts.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(pnts.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(pnts.batchTableBinaryByteLength)\r\n    pnts.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n}\r\n\r\nclass Pnts implements IValidate {\r\n  header: PntsHeader\r\n  featureTable: PntsFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new PntsHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default Pnts","import IValidate from \"../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileRefine from \"./enum/tile-refine\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\nimport TileContent from \"./tile-content\"\r\n\r\nclass Tile implements IValidate {\r\n  boundingVolume: TileBoundingVolume\r\n  geometricError: number\r\n  viewerRequestVolume?: TileBoundingVolume\r\n  refine?: TileRefine\r\n  content?: TileContent\r\n  transform?: number[] = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] // wait to def as Mat4\r\n  children?: Tile[]\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  toJson() {\r\n    if (!this.validate()) {\r\n      throw new Error('[Tile toJson()] 验证此对象失败！')\r\n    }\r\n    const obj = {}\r\n    if (this.transform !== undefined) {\r\n      Object.defineProperty(obj, 'transform', {\r\n        value: this.transform\r\n      })\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default Tile","import IValidate from \"../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass TileBoundingVolume implements IValidate {\r\n  box?: number[]\r\n  region?: number[]\r\n  sphere?: number[]\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  validate() {\r\n    const boxExist = this.box === undefined ? 1 : 0\r\n    const regionExist = this.region === undefined ? 1 : 0\r\n    const sphereExist = this.sphere === undefined ? 1 : 0\r\n    // === 3 意思是三个都不存在\r\n    // === 2 意思是存在 1 个\r\n    // === 1 意思是存在 2 个\r\n    // === 0 意思是存在 3 个\r\n    if (boxExist + regionExist + sphereExist !== 2) {\r\n      return false\r\n    }\r\n\r\n    if ((<number[]>this.box).length != 12)\r\n      return false\r\n    if ((<number[]>this.region).length != 6)\r\n      return false\r\n    if ((<number[]>this.sphere).length != 4)\r\n      return false\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileBoundingVolume","import IValidate from \"../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\n// import * as URI from 'uri-js'\r\n\r\nclass TileContent implements IValidate {\r\n  boundingVolume?: TileBoundingVolume\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n\r\n  /**\r\n   * @deprecated `TileContent.url` 已废弃，请使用 `TileContent.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileContent","import ITilesetConstructionParam from \"../../../typings/tileset/ITilesetConstructionParam\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport Asset from \"./asset\"\r\nimport Property from \"./property\"\r\nimport Tile from \"./tile\"\r\n\r\nclass Tileset {\r\n  asset: Asset\r\n  root: Tile\r\n  geometricError: number\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n  extensionsUsed?: string[] = []\r\n  extensionsRequired?: string[] = []\r\n  properties?: Map<any, Property>\r\n\r\n  constructor(options: ITilesetConstructionParam) {\r\n    this.root = options.root\r\n    this.geometricError = options.geometricError\r\n    this.uri = options.uri\r\n  }\r\n\r\n  /**\r\n   * @deprecated `Tileset.url` 已废弃，请使用 `Tileset.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n  set url(value: string) {\r\n    this.uri = value\r\n  }\r\n}\r\n\r\nexport default Tileset"],"names":["GLTFVersion","GLTFAlphaMode","GLTFAsset","this","TWO","Set","GLTFPrimitiveMode","GLTFPrimitiveAttribute","options","position","st1","normal","Object","values","every","k","GLTFAttributeType","GLTFComponentType","GLTFFilter","GLTFWrapMode","MIME","GLTFTextureInfo","index","texCoord","GLTFExtensionBase","TilesetExtBase","TileHeaderBase","B3dmHeader","super","FastTextEncoder","utfLabel","RangeError","FastTextDecoder","fatal","Error","scope","window","self","defineProperty","prototype","value","encode","string","stream","pos","extra","len","length","at","tlen","Math","max","target","Uint8Array","charCodeAt","update","set","slice","decode","buffer","bytes","out","byte1","push","byte2","byte3","codepoint","String","fromCharCode","apply","decoder","TextDecoder","exports","encoder","TextEncoder","str","IOBuffer","data","dataIsGiven","ArrayBuffer","lastWrittenByte","byteLength","offset","dvOffset","isView","byteOffset","littleEndian","_data","DataView","_mark","_marks","n","pop","undefined","seek","available","newLength","newArray","readUint8","getInt8","getUint8","i","readByte","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","readInt8","result","readChar","utf8_1","readBytes","writeUint8","ensureAvailable","setInt8","_updateLastWrittenByte","setUint8","setInt16","setUint16","setInt32","setUint32","setFloat32","setFloat64","writeBytes","FeatureTableType","TileRefine","FeatureTable","B3dmFeatureTable","json","binary","ft","_json","_binary","featureTableType","B3dm","table","batchLength","rtcCenter","extensions","extras","BatchTable","Map","bt","keys","variables","parse","variableNames","name","has","get","I3dmHeader","gltfFormat","I3dmFeatureTable","I3dm","positionQuantized","normalUp","normalRight","normalUpOct32p","normalRightOct32p","scale","scaleNonUniform","instancesLength","quantizedVolumeOffset","quantizedVolumeScale","PntsHeader","PntsFeatureTable","Pnts","rgba","rgb","rgb565","normalOct16p","batchId","pointsLength","constantRgba","cacheBuffer","header","b3dm","iobuffer","io","rewind","magic","readChars","version","readUint32","featureTableJSONByteLength","featureTableBinaryByteLength","batchTableJSONByteLength","batchTableBinaryByteLength","skip","ftJSON","JSON","ftBin","featureTable","createFromJSON","btJSON","btBin","batchTable","bufferView","attributes","Number","isInteger","componentType","count","type","validate","indices","UNSIGNED_BYTE","UNSIGNED_INT","UNSIGNED_SHORT","channels","samplers","orthographic","perspective","uri","mimeType","pbrMetallicRoughness","normalTexture","occlusionTexture","alphaMode","MASK","alphaCutoff","emissiveFactor","flag","primitives","primitive","mesh","camera","skin","matrix","translation","rotation","weights","r","validateTransforms","children","strength","xmag","ymag","zfar","znear","baseColorFactor","v","roughnessFactor","metallicFactor","baseColorTexture","metallicRoughnessTexture","yfov","aspectRatio","attribute","material","mode","TRIANGLES","callback","nodes","joints","doc","d","resultPath","console","log","i3dm","pnts","transform","box","region","sphere","root","geometricError"],"mappings":"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"}