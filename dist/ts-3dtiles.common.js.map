{"version":3,"file":"ts-3dtiles.common.js","sources":["../src/utils/io/writeDefinedProperty.ts","../src/utils/io/writeExtensionsProperty.ts","../src/gltf/core/def/enum/gltf-version.ts","../src/gltf/core/def/enum/gltf-bufferview-target.ts","../src/gltf/core/def/gltf-asset.ts","../src/gltf/core/def/gltf-accessor.ts","../src/gltf/core/def/gltf-buffer.ts","../src/gltf/core/def/enum/gltf-alphamode.ts","../src/gltf/core/def/gltf-bufferview.ts","../src/gltf/core/def/gltf-scene.ts","../src/gltf/core/def/gltf-node.ts","../src/gltf/core/def/gltf-mesh.ts","../src/gltf/core/def/enum/gltf-attribute-type.ts","../src/gltf/core/def/enum/gltf-component-type.ts","../src/gltf/core/def/enum/gltf-filter.ts","../src/gltf/core/def/enum/gltf-wrapmode.ts","../src/gltf/core/def/enum/gltf-primitivemode.ts","../src/gltf/core/def/enum/mime.ts","../src/gltf/core/def/gltf-material.ts","../src/gltf/core/def/gltf-texture.ts","../src/gltf/core/def/gltf-image.ts","../src/gltf/core/def/gltf-sampler.ts","../src/gltf/core/def/gltf-animation.ts","../src/gltf/core/def/gltf-camera.ts","../src/gltf/core/def/gltf-skin.ts","../src/gltf/core/def/gltf-primitive-attribute.ts","../src/gltf/core/def/gltf-primitive.ts","../src/gltf/core/def/gltf-animation-channel.ts","../src/gltf/core/def/gltf-animation-channel-target.ts","../src/gltf/core/def/gltf-animation-sampler.ts","../src/gltf/core/def/gltf-accessor-sparse.ts","../src/gltf/core/def/gltf-accessor-sparse-indices.ts","../src/gltf/core/def/gltf-accessor-sparse-values.ts","../src/gltf/core/def/gltf-texture-info.ts","../src/gltf/core/def/gltf-normal-texture-info.ts","../src/gltf/core/def/gltf-occlusion-texture-info.ts","../src/gltf/core/def/gltf-pbr.ts","../src/gltf/core/def/gltf-perspective-camera.ts","../src/gltf/core/def/gltf-orthographic-camera.ts","../src/gltf/core/gltf-document.ts","../src/gltf/ext/gltf-extension-base.ts","../src/gltf/ext/ext-draco.ts","../src/gltf/ext/ext-pbr-specular-glossiness.ts","../src/gltf/io/read-action/read-gltf.ts","../node_modules/iobuffer/src/text-encoding-polyfill.js","../node_modules/iobuffer/src/utf8.browser.ts","../node_modules/iobuffer/src/IOBuffer.ts","../src/tileset/core/def/enum/featuretable-type.ts","../src/gltf/io/read-action/read-glb.ts","../src/tileset/ext/ext-base.ts","../src/tileset/ext/ext-batchtable-hierarchy.ts","../src/tileset/ext/ext-pnts-draco.ts","../src/tileset/ext/ext-content-gltf.ts","../src/tileset/ext/ext-implicit-tiling.ts","../src/tileset/ext/ext-layers.ts","../src/tileset/ext/ext-metadata.ts","../src/tileset/ext/ext-multiple-content.ts","../src/tileset/core/def/tile.ts","../src/tileset/core/def/tileset.ts","../src/tileset/core/def/tile-bounding-volume.ts","../src/tileset/core/def/tile-content.ts","../src/tileset/core/def/property.ts","../src/tileset/core/def/asset.ts","../src/tileset/core/def/tile-header-base.ts","../src/tileset/core/def/tile-b3dm/header.ts","../src/tileset/core/def/enum/tile-refine.ts","../src/tileset/core/def/featuretable/featuretable-base.ts","../src/tileset/core/def/featuretable/featuretable-b3dm.ts","../src/tileset/core/def/batchtable/batchtable-base.ts","../src/tileset/core/def/tile-b3dm/index.ts","../src/tileset/core/def/tile-i3dm/header.ts","../src/tileset/core/def/featuretable/featuretable-i3dm.ts","../src/tileset/core/def/tile-i3dm/index.ts","../src/tileset/core/def/tile-pnts/header.ts","../src/tileset/core/def/featuretable/featuretable-pnts.ts","../src/tileset/core/def/tile-pnts/index.ts","../src/tileset/core/def/tile-cmpt/index.ts","../src/tileset/core/def/featuretable/featuretable-vctr.ts"],"sourcesContent":["function writeDefinedProperty(obj: any, name: string, data: any) {\r\n  if (data !== undefined)\r\n    Object.defineProperty(obj, name, {\r\n      value: data\r\n    })\r\n}\r\n\r\nexport default writeDefinedProperty","import { GLTFExtensionBase } from \"src/gltf\";\r\n\r\nfunction writeExtensionsProperty(obj: any, exts?: Set<GLTFExtensionBase>) {\r\n  if (exts !== undefined) {\r\n    const extObj = {}\r\n    const _ = [...exts]\r\n    _.forEach(ext => {\r\n      Object.defineProperty(extObj, ext.name, {\r\n        value: ext.json()\r\n      })\r\n    })\r\n    Object.defineProperty(obj, 'extensions', {\r\n      value: extObj\r\n    })\r\n  }\r\n}\r\n\r\nexport default writeExtensionsProperty","enum GLTFVersion {\r\n  TWO = \"2.0\",\r\n  ONE = \"1.0\"\r\n}\r\n\r\nexport default GLTFVersion","enum GLTFBufferViewTarget {\r\n  ARRAY_BUFFER = 34962,\r\n  ELEMENT_ARRAY_BUFFER = 34963\r\n}\r\n\r\nexport default GLTFBufferViewTarget","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFVersion from \"./enum/gltf-version\"\r\n\r\nclass GLTFAsset implements IValidate, ISerializable {\r\n  version: GLTFVersion = GLTFVersion.TWO\r\n  generator?: string\r\n  copyright?: string\r\n  minVersion?: GLTFVersion\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n  json() {\r\n    const asset = {\r\n      version: this.version\r\n    }\r\n    writeDefinedProperty(asset, 'generator', this.generator)\r\n    writeDefinedProperty(asset, 'minVersion', this.minVersion)\r\n    writeDefinedProperty(asset, 'copyright', this.copyright)\r\n    writeDefinedProperty(asset, 'extensions', this.generator)\r\n    writeDefinedProperty(asset, 'extras', this.extras)\r\n\r\n    return asset\r\n  }\r\n}\r\n\r\nexport default GLTFAsset","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport { GLTFAttributeType, GLTFComponentType } from \"./enum\"\r\nimport GLTFAccessorSparse from \"./gltf-accessor-sparse\"\r\n\r\n\r\nclass GLTFAccessor implements IValidate, ISerializable {\r\n  componentType: GLTFComponentType\r\n  count: number\r\n  type: GLTFAttributeType\r\n  max?: number[]\r\n  min?: number[]\r\n  sparse?: GLTFAccessorSparse\r\n  name?: string\r\n  normalized?: boolean\r\n  bufferView?: number\r\n  byteOffset?: number\r\n\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(options: {\r\n    componentType: GLTFComponentType\r\n    count: number\r\n    type: GLTFAttributeType\r\n  }) {\r\n    this.componentType = options.componentType\r\n    this.count = options.count\r\n    this.type = options.type\r\n  }\r\n\r\n  validate() {\r\n    /** byteOffset 和 bufferView 必须同时存在 */\r\n    if (this.byteOffset !== undefined && this.bufferView !== undefined) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessor json()] 当前 accessor 属性不合法，请检查')\r\n    }\r\n\r\n    const acc = {\r\n      componentType: this.componentType,\r\n      type: this.type,\r\n      count: this.count,\r\n    }\r\n\r\n    writeDefinedProperty(acc, 'max', this.max)\r\n    writeDefinedProperty(acc, 'min', this.min)\r\n    writeDefinedProperty(acc, 'name', this.name)\r\n    writeDefinedProperty(acc, 'normalized', this.normalized)\r\n    writeDefinedProperty(acc, 'sparse', this.sparse !== undefined ? this.sparse.json() : undefined)\r\n    writeDefinedProperty(acc, 'bufferView', this.bufferView)\r\n    writeDefinedProperty(acc, 'byteOffset', this.byteOffset)\r\n    writeExtensionsProperty(acc, this.extensions)\r\n    writeDefinedProperty(acc, 'extras', this.extras)\r\n    \r\n    return acc\r\n  }\r\n}\r\n\r\nexport default GLTFAccessor","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFBuffer implements IValidate, ISerializable {\r\n  byteLength: number = 0\r\n  uri?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  /** @deprecated */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n\r\n  validate() {\r\n    return this.byteLength > 0\r\n  }\r\n\r\n  json() {\r\n    const bf = {\r\n      byteLength: this.byteLength\r\n    }\r\n    writeDefinedProperty(bf, 'uri', this.uri)\r\n    writeExtensionsProperty(bf, this.extensions)\r\n    writeDefinedProperty(bf, 'extras', this.extras)\r\n\r\n    return bf\r\n  }\r\n}\r\n\r\nexport default GLTFBuffer","/**\r\n * @enum {GLTFAlphaMode} 透明度模式\r\n */\r\nenum GLTFAlphaMode {\r\n  /** \r\n   * @description 不透明。默认选项。\r\n   */\r\n  OPAQUE = \"OPAQUE\",\r\n  /**\r\n   * @description 透明度取决于 alphaCutOff 值，即半透明\r\n   */\r\n  MASK = \"MASK\",\r\n  /**\r\n   * @description 混合模式\r\n   */\r\n  BLEND = \"BLEND\"\r\n}\r\n\r\nexport default GLTFAlphaMode","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFBufferViewTarget from \"./enum/gltf-bufferview-target\"\r\n\r\n\r\nclass GLTFBufferView implements IValidate, ISerializable {\r\n  buffer: number = 0\r\n  byteLength: number = 1\r\n  byteOffset?: number = 0\r\n  byteStride?: number = 4\r\n  target?: GLTFBufferViewTarget\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.buffer < 0) {\r\n      return false\r\n    }\r\n    if (this.byteLength < 1) {\r\n      return false\r\n    }\r\n    if (this.byteOffset! < 0) {\r\n      return false\r\n    }\r\n    if (this.byteStride! % 4 !== 0 || this.byteStride! > 252 || this.byteStride! < 4) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFBufferView json()] 当前 bufferView 属性不合法，请检查')\r\n    }\r\n\r\n    const bv = {\r\n      buffer: this.buffer,\r\n      byteLength: this.byteLength,\r\n    }\r\n\r\n    if (this.target === GLTFBufferViewTarget.ARRAY_BUFFER || this.target === GLTFBufferViewTarget.ELEMENT_ARRAY_BUFFER) {\r\n      writeDefinedProperty(bv, 'target', this.target)\r\n    }\r\n    writeDefinedProperty(bv, 'byteOffset', this.byteOffset)\r\n    writeDefinedProperty(bv, 'byteStride', this.byteStride)\r\n    writeExtensionsProperty(bv, this.extensions)\r\n    writeDefinedProperty(bv, 'extras', this.extras)\r\n\r\n    return bv\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default GLTFBufferView","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFScene implements IValidate, ISerializable {\r\n  nodes: number[] = []\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n  \r\n  validate() {\r\n    return (this.nodes.length < 1)\r\n  }\r\n\r\n  json() {\r\n    const s = {\r\n      nodes: this.nodes\r\n    }\r\n    writeDefinedProperty(s, 'name', this.name)\r\n    writeExtensionsProperty(s, this.extensions)\r\n    return s\r\n  }\r\n}\r\n\r\nexport default GLTFScene","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\n\r\nclass GLTFNode implements IValidate, ISerializable {\r\n  children: number[] = []\r\n  mesh?: number\r\n  rotation?: number[]\r\n  translation?: number[]\r\n  weights?: number[]\r\n  name?: string\r\n  skin?: number\r\n  camera?: number\r\n  matrix?: number[]\r\n  scale?: number[]\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(options: {\r\n    children?: number[]\r\n    mesh?: number\r\n    rotation?: number[]\r\n    translation?: number[]\r\n    weights?: number[]\r\n    name?: string\r\n    skin?: number\r\n    camera?: number\r\n    matrix?: number[]\r\n    scale?: number[]\r\n  }) {\r\n    this.mesh = options.mesh\r\n    this.camera = options.camera\r\n    this.scale = options.scale\r\n    this.skin = options.skin\r\n    this.matrix = options.matrix\r\n    this.translation = options.translation\r\n    this.rotation = options.rotation\r\n    this.name = options.name\r\n    this.weights = options.weights\r\n  }\r\n\r\n  private validateTransforms() {\r\n    let flag = true\r\n    if (this.matrix !== undefined) {\r\n      if (this.rotation !== undefined || this.scale !== undefined || this.translation !== undefined) {\r\n        flag = false\r\n      }\r\n    }\r\n    if (this.matrix!.length !== 16) {\r\n      flag = false\r\n    }\r\n    if (this.scale!.length !== 3) {\r\n      flag = false\r\n    }\r\n    if (this.translation!.length !== 3) {\r\n      flag = false\r\n    }\r\n\r\n    if (this.rotation!.length !== 4) {\r\n      flag = false\r\n    } else {\r\n      flag = this.rotation!.every(r => r > 1 || r < -1)\r\n    }\r\n\r\n    return flag\r\n  }\r\n\r\n  validate() {\r\n    if (this.validateTransforms()) {\r\n      return false\r\n    }\r\n    if (this.weights!.length < 1) {\r\n      return false\r\n    } else if (this.weights !== undefined && this.mesh === undefined) {\r\n      return false\r\n    }\r\n    if (this.skin !== undefined && this.mesh === undefined) {\r\n      return false\r\n    }\r\n\r\n    if (this.children!.length < 1) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFNode json()] 当前 node 属性不合法，请检查属性')\r\n    }\r\n\r\n    const n = {}\r\n\r\n    writeDefinedProperty(n, 'mesh', this.mesh)\r\n    writeDefinedProperty(n, 'rotation', this.rotation)\r\n    writeDefinedProperty(n, 'translation', this.translation)\r\n    writeDefinedProperty(n, 'scale', this.scale)\r\n    writeDefinedProperty(n, 'matrix', this.matrix)\r\n    writeDefinedProperty(n, 'weights', this.weights)\r\n    writeDefinedProperty(n, 'skin', this.skin)\r\n    writeDefinedProperty(n, 'camera', this.camera)\r\n    writeDefinedProperty(n, 'name', this.name)\r\n    \r\n    if (this.children.length !== 0) {\r\n      writeDefinedProperty(n, 'children', this.children)\r\n    }\r\n    writeExtensionsProperty(n, this.extensions)\r\n    writeDefinedProperty(n, 'extras', this.extras)\r\n\r\n    return n\r\n  }\r\n}\r\n\r\nexport default GLTFNode","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFPrimitive from \"./gltf-primitive\"\r\n\r\nclass GLTFMesh implements IValidate, ISerializable {\r\n  primitives: GLTFPrimitive[] = []\r\n  weights?: number[]\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    let flag = false\r\n    if (this.primitives.every(primitive => primitive.validate())) {\r\n      flag = true\r\n    }\r\n    return flag\r\n  }\r\n\r\n  json() {\r\n    const mesh = {\r\n      primitives: this.primitives.map(prmt => prmt.json())\r\n    }\r\n    writeDefinedProperty(mesh, 'weights', this.weights)\r\n    writeDefinedProperty(mesh, 'name', this.name)\r\n    writeExtensionsProperty(mesh, this.extensions)\r\n\r\n    return mesh\r\n  }\r\n}\r\n\r\nexport default GLTFMesh","enum GLTFAttributeType {\r\n  SCALAR = \"SCALAR\",\r\n  VEC2 = \"VEC2\",\r\n  VEC3 = \"VEC3\",\r\n  VEC4 = \"VEC4\",\r\n  MAT2 = \"MAT2\",\r\n  MAT3 = \"MAT3\",\r\n  MAT4 = \"MAT4\",\r\n}\r\n\r\nexport const getAttributeTypeElementCount = (t: GLTFAttributeType): number => {\r\n  switch (t) {\r\n    case GLTFAttributeType.VEC2:\r\n      return 2\r\n    case GLTFAttributeType.VEC3:\r\n      return 3\r\n    case GLTFAttributeType.VEC4:\r\n    case GLTFAttributeType.MAT2:\r\n      return 4\r\n    case GLTFAttributeType.MAT3:\r\n      return 9\r\n    case GLTFAttributeType.MAT4:\r\n      return 16\r\n    default: // means SCALAR\r\n      return 1\r\n  }\r\n}\r\n\r\nexport default GLTFAttributeType","enum GLTFComponentType {\r\n  BYTE = 5120,\r\n  UNSIGNED_BYTE = 5121,\r\n  SHORT = 5122,\r\n  UNSIGNED_SHORT = 5123,\r\n  UNSIGNED_INT = 5125,\r\n  FLOAT = 5126\r\n}\r\n\r\nexport const getComponentTypeByteSize = (t: GLTFComponentType): number => {\r\n  switch (t) {\r\n    case GLTFComponentType.BYTE:\r\n    case GLTFComponentType.UNSIGNED_BYTE:\r\n      return 1\r\n    case GLTFComponentType.SHORT:\r\n    case GLTFComponentType.UNSIGNED_SHORT:\r\n      return 2\r\n    case GLTFComponentType.UNSIGNED_INT:\r\n      return 4\r\n    default: // means FLOAT\r\n      return 8\r\n  }\r\n}\r\n\r\nexport default GLTFComponentType","enum GLTFFilter {\r\n  NEAREST = 9728,\r\n  LINEAR = 9729,\r\n  NEAREST_MIPMAP_NEAREST = 9984,\r\n  LINEAR_MIPMAP_NEAREST = 9985,\r\n  NEAREST_MIPMAP_LINEAR = 9986,\r\n  LINEAR_MIPMAP_LINEAR = 9987\r\n}\r\n\r\nexport default GLTFFilter","enum GLTFWrapMode {\r\n  REPEAT = 10497,\r\n  CLAMP_TO_EDGE = 33071,\r\n  MIRRORED_REPEAT = 33648,\r\n}\r\n\r\nexport default GLTFWrapMode","enum GLTFPrimitiveMode {\r\n  POINTS = 0,\r\n  LINES = 1,\r\n  LINE_LOOP = 2,\r\n  LINE_STRIP = 3,\r\n  TRIANGLES = 4,\r\n  TRIANGLE_STRIP = 5,\r\n  TRIANGLE_FAN = 6\r\n}\r\n\r\nexport default GLTFPrimitiveMode","enum MIME {\r\n  JPG = \"image/jpg\",\r\n  JPEG = \"image/jpeg\",\r\n  PNG = \"image/png\",\r\n  WEBP = \"image/webp\",\r\n}\r\n\r\nexport default MIME","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport { GLTFAlphaMode } from \"./enum\"\r\nimport GLTFNormalTextureInfo from \"./gltf-normal-texture-info\"\r\nimport GLTFOcclusionTextureInfo from \"./gltf-occlusion-texture-info\"\r\nimport GLTFPbr from \"./gltf-pbr\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFMaterial implements IValidate, ISerializable {\r\n  name?: string\r\n  pbrMetallicRoughness?: GLTFPbr\r\n  normalTexture?: GLTFNormalTextureInfo\r\n  occlusionTexture?: GLTFOcclusionTextureInfo\r\n  emissiveTexture?: GLTFTextureInfo\r\n  emissiveFactor?: number[] = [0, 0, 0]\r\n  alphaMode?: GLTFAlphaMode = GLTFAlphaMode.OPAQUE\r\n  alphaCutoff?: number = 0.5\r\n  doubleSided?: boolean = false\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.pbrMetallicRoughness!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.normalTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.occlusionTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.alphaMode === GLTFAlphaMode.MASK && this.alphaCutoff === undefined) {\r\n      return false\r\n    }\r\n    if (this.emissiveFactor!.length !== 3) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFMaterial json()] 此 material 对象的属性不合法，请检查')\r\n    }\r\n\r\n    const m = {}\r\n\r\n    writeDefinedProperty(m, 'name', this.name)\r\n    writeDefinedProperty(m, 'pbrMetallicRoughness', this.pbrMetallicRoughness !== undefined ? this.pbrMetallicRoughness.json() : undefined)\r\n    writeDefinedProperty(m, 'normalTexture', this.normalTexture !== undefined ? this.normalTexture.json() : undefined)\r\n    writeDefinedProperty(m, 'emissiveTexture', this.emissiveTexture !== undefined ? this.emissiveTexture.json() : undefined)\r\n    writeDefinedProperty(m, 'emissiveFactor', this.emissiveFactor)\r\n    writeDefinedProperty(m, 'alphaMode', this.alphaMode !== undefined && this.alphaMode !== GLTFAlphaMode.OPAQUE ? this.alphaMode : undefined)\r\n    writeDefinedProperty(m, 'alphaCutoff', this.alphaCutoff !== 0.5 && this.alphaCutoff !== undefined ? this.alphaCutoff : undefined)\r\n    writeDefinedProperty(m, 'alphaCutoff', this.doubleSided !== false && this.doubleSided !== undefined ? this.doubleSided : undefined)\r\n    writeExtensionsProperty(m, this.extensions)\r\n    writeDefinedProperty(m, 'extras', this.extras)\r\n    \r\n    return m\r\n  }\r\n}\r\n\r\nexport default GLTFMaterial","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFTexture implements IValidate, ISerializable {\r\n  sampler?: number\r\n  source?: number\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.sampler === undefined && this.source === undefined && this.name === undefined)\r\n      return false\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const tx = {}\r\n    writeDefinedProperty(tx, 'name', this.name)\r\n    writeDefinedProperty(tx, 'source', this.source)\r\n    writeDefinedProperty(tx, 'sampler', this.sampler)\r\n    writeExtensionsProperty(tx, this.extensions)\r\n    writeDefinedProperty(tx, 'extras', this.extras)\r\n\r\n    return tx\r\n  }\r\n}\r\n\r\nexport default GLTFTexture","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport MIME from \"./enum/mime\"\r\n\r\nclass GLTFImage implements IValidate, ISerializable {\r\n  uri?: string\r\n  bufferView?: number\r\n  mimeType?: MIME\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.uri !== undefined && this.bufferView !== undefined) {\r\n      return false\r\n    }\r\n    if (this.bufferView !== undefined) {\r\n      if (this.mimeType === undefined) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const img = {}\r\n    writeDefinedProperty(img, 'name', this.name)\r\n    writeDefinedProperty(img, 'bufferView', this.bufferView)\r\n    writeDefinedProperty(img, 'uri', this.uri)\r\n    writeDefinedProperty(img, 'mimeType', this.mimeType)\r\n    writeExtensionsProperty(img, this.extensions)\r\n    writeDefinedProperty(img, 'extras', this.extras)\r\n\r\n    return img\r\n  }\r\n}\r\n\r\nexport default GLTFImage","import ISerializable from 'src/interfaces/ISerializable'\r\nimport writeDefinedProperty from 'src/utils/io/writeDefinedProperty'\r\nimport writeExtensionsProperty from 'src/utils/io/writeExtensionsProperty'\r\nimport IValidate from '../../../interfaces/IValidate'\r\nimport GLTFExtensionBase from '../../ext/gltf-extension-base'\r\nimport GLTFFilter from './enum/gltf-filter'\r\nimport GLTFWrapMode from './enum/gltf-wrapmode'\r\n\r\nclass GLTFSampler implements IValidate, ISerializable {\r\n  magFilter?: GLTFFilter\r\n  minFilter?: GLTFFilter\r\n  wrapS?: GLTFWrapMode\r\n  wrapT?: GLTFWrapMode\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras: any\r\n\r\n  validate() {\r\n    // 注意默认值检查\r\n    if (this.magFilter === undefined && this.minFilter === undefined && this.wrapS === undefined && this.wrapT === undefined)\r\n      return false\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const spl = {}\r\n    writeDefinedProperty(spl, 'magFilter', this.magFilter)\r\n    writeDefinedProperty(spl, 'minFilter', this.minFilter)\r\n    writeDefinedProperty(spl, 'wrapS', this.wrapS)\r\n    writeDefinedProperty(spl, 'wrapT', this.wrapT)\r\n    writeDefinedProperty(spl, 'name', this.name)\r\n    writeExtensionsProperty(spl, this.extensions)\r\n    writeDefinedProperty(spl, 'extras', this.extras)\r\n\r\n    return spl\r\n  }\r\n}\r\n\r\nexport default GLTFSampler","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFAnimationChannel from \"./gltf-animation-channel\"\r\nimport GLTFAnimationSampler from \"./gltf-animation-sampler\"\r\n\r\nclass GLTFAnimation implements IValidate, ISerializable {\r\n  channels: GLTFAnimationChannel[] = []\r\n  samplers: GLTFAnimationSampler[] = []\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set() \r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.channels!.length < 1 || this.samplers!.length < 1) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAnimation json()] 当前 animation 对象属性不合法，请检查')\r\n    }\r\n\r\n    const ani = {}\r\n\r\n    writeDefinedProperty(ani, 'name', this.name)\r\n    writeDefinedProperty(ani, 'channels', this.channels.length !== 0 ? this.channels.map(c => c.json()) : undefined)\r\n    writeDefinedProperty(ani, 'samplers', this.samplers.length !== 0 ? this.samplers.map(s => s.json()) : undefined)\r\n    writeExtensionsProperty(ani, this.extensions)\r\n    writeDefinedProperty(ani, 'extras', this.extras)\r\n\r\n    return ani\r\n  }\r\n}\r\n\r\nexport default GLTFAnimation","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFCameraType from \"./enum/gltf-cameratype\"\r\nimport GLTFOrthographicCamera from \"./gltf-orthographic-camera\"\r\nimport GLTFPerspectiveCamera from \"./gltf-perspective-camera\"\r\n\r\nclass GLTFCamera implements IValidate, ISerializable {\r\n  orthographic?: GLTFOrthographicCamera\r\n  perspective?: GLTFPerspectiveCamera\r\n  type: GLTFCameraType\r\n  name?: string\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(options: {\r\n    orthographic?: GLTFOrthographicCamera\r\n    perspective?: GLTFPerspectiveCamera\r\n    type: GLTFCameraType\r\n    name?: string\r\n  }) {\r\n    this.orthographic = options.orthographic\r\n    this.perspective = options.perspective\r\n    this.type = options.type\r\n    this.name = options.name\r\n  }\r\n\r\n  validate() {\r\n    if (this.orthographic !== undefined && this.perspective !== undefined) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFCamera json()] 数据有问题，请检查 camera 对象的合法性')\r\n    }\r\n\r\n    const camera = {\r\n      type: this.type\r\n    }\r\n\r\n    writeDefinedProperty(camera, 'name', this.name)\r\n    writeDefinedProperty(camera, 'perspective', this.perspective ? this.perspective.json() : undefined)\r\n    writeDefinedProperty(camera, 'orthographic', this.orthographic ? this.orthographic.json() : undefined)\r\n    writeExtensionsProperty(camera, this.extensions)\r\n    writeDefinedProperty(camera, 'extras', this.extras)\r\n\r\n    return camera\r\n  }\r\n}\r\n\r\nexport default GLTFCamera","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\n\r\nclass GLTFSkin implements IValidate {\r\n  inverseBindMatrices?: number\r\n  skeleton?: number\r\n  name?: string\r\n  joints: number[]\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    return this.joints.length > 1\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFSkin json()] 当前 skin 属性不合法，请检查')\r\n    }\r\n\r\n    const sk = {}\r\n\r\n    writeDefinedProperty(sk, 'inverseBindMatrices', this.inverseBindMatrices)\r\n    writeDefinedProperty(sk, 'skeleton', this.skeleton)\r\n    writeDefinedProperty(sk, 'name', this.name)\r\n    writeDefinedProperty(sk, 'joints', this.joints.length !== 0 ? this.joints : undefined)\r\n    writeExtensionsProperty(sk, this.extensions)\r\n    writeDefinedProperty(sk, 'extras', this.extras)\r\n\r\n    return sk\r\n  }\r\n}\r\n\r\nexport default GLTFSkin","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\n\r\nclass GLTFPrimitiveAttribute implements IValidate, ISerializable {\r\n  position: number\r\n  uv0?: number\r\n  uv1?: number\r\n  color0?: number\r\n  normal?: number\r\n  tangent?: number\r\n  joints0?: number\r\n  weights0?: number\r\n\r\n  constructor(options: {\r\n    position: number,\r\n    uv0?: number,\r\n    uv1?: number,\r\n    color0?: number,\r\n    normal?: number,\r\n    tangent?: number,\r\n    joints0?: number\r\n    weights0?: number\r\n  }) {\r\n    this.position = options.position\r\n    this.uv0 = options.uv0\r\n    this.uv1 = options.uv1\r\n    this.color0 = options.color0\r\n    this.normal = options.normal\r\n    this.tangent = options.tangent\r\n    this.joints0 = options.joints0\r\n    this.weights0 = options.weights0\r\n  }\r\n\r\n  validate() {\r\n    return Object.values(this).every(k => k! < 0)\r\n  }\r\n\r\n  json() {\r\n    const attr = {\r\n      POSITION: this.position,\r\n    }\r\n    writeDefinedProperty(attr, 'NORMAL', this.normal)\r\n    writeDefinedProperty(attr, 'TANGENT', this.tangent)\r\n    writeDefinedProperty(attr, 'TEXCOORD_0', this.uv0)\r\n    writeDefinedProperty(attr, 'TEXCOORD_1', this.uv1)\r\n    writeDefinedProperty(attr, 'COLOR_0', this.color0)\r\n    writeDefinedProperty(attr, 'JOINTS_0', this.joints0)\r\n    writeDefinedProperty(attr, 'WEIGHTS_0', this.weights0)\r\n\r\n    return attr\r\n  }\r\n}\r\n\r\nexport default GLTFPrimitiveAttribute","import ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFPrimitiveMode from \"./enum/gltf-primitivemode\"\r\nimport GLTFPrimitiveAttribute from \"./gltf-primitive-attribute\"\r\n\r\nclass GLTFPrimitive implements IValidate, ISerializable {\r\n  attribute: GLTFPrimitiveAttribute\r\n  indices?: number\r\n  material?: number\r\n  mode: GLTFPrimitiveMode = GLTFPrimitiveMode.TRIANGLES\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n  extras: any\r\n\r\n  constructor(options: {\r\n    attribute: {\r\n      position: number,\r\n      [propName: string]: any\r\n    },\r\n    indices?: number,\r\n    material?: number,\r\n    mode?: GLTFPrimitiveMode\r\n  }) {\r\n    this.attribute = new GLTFPrimitiveAttribute({\r\n      position: options.attribute.position,\r\n      uv0: options.attribute['uv0'],\r\n      normal: options.attribute['normal']\r\n    })\r\n    this.indices = options.indices\r\n    this.material = options.material\r\n    if (options.mode! !== GLTFPrimitiveMode.TRIANGLES) {\r\n      this.mode = <GLTFPrimitiveMode>options.mode\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    if (this.attribute.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.indices! < 0) {\r\n      return false\r\n    }\r\n    if (this.material! < 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const prmt = {\r\n      attribute: this.attribute.json()\r\n    }\r\n    if (this.mode !== GLTFPrimitiveMode.TRIANGLES && this.mode !== undefined) {\r\n      writeDefinedProperty(prmt, 'mode', this.mode)\r\n    }\r\n    writeDefinedProperty(prmt, 'indices', this.indices)\r\n    writeDefinedProperty(prmt, 'material', this.material)\r\n    writeExtensionsProperty(prmt, this.extensions)\r\n    writeDefinedProperty(prmt, 'extras', this.extras)\r\n\r\n    return prmt\r\n  }\r\n}\r\n\r\nexport default GLTFPrimitive","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFAnimationChannelTarget from \"./gltf-animation-channel-target\"\r\n\r\nclass GLTFAnimationChannel implements IValidate {\r\n  sampler: number\r\n  target: GLTFAnimationChannelTarget\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    return this.target.validate()\r\n  } \r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAnimationChannel json()] 当前 animation channel 对象的属性不合法，请检查')\r\n    }\r\n\r\n    const ac = {\r\n      sampler: this.sampler,\r\n      target: this.target.json(),\r\n    }\r\n\r\n    writeExtensionsProperty(ac, this.extensions)\r\n    writeDefinedProperty(ac, 'extras', this.extras)\r\n\r\n    return ac\r\n  }\r\n}\r\n\r\nexport default GLTFAnimationChannel","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFAnimationChannelTargetPath from \"./enum/gltf-animation-channel-target-path\"\r\n\r\nclass GLTFAnimationChannelTarget implements IValidate, ISerializable {\r\n  node?: number\r\n  path: GLTFAnimationChannelTargetPath\r\n  extensions: Set<GLTFExtensionBase> = new Set\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const act = {\r\n      path: this.path,\r\n    }\r\n\r\n    writeExtensionsProperty(act, this.extensions)\r\n    writeDefinedProperty(act, 'node', this.node)\r\n\r\n    return act\r\n  }\r\n}\r\n\r\nexport default GLTFAnimationChannelTarget","import { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport GLTFAnimationInterpolation from \"./enum/gltf-animation-interpolation\"\r\n\r\n\r\nclass GLTFAnimationSampler implements IValidate, ISerializable {\r\n  input: number\r\n  interpolation?: GLTFAnimationInterpolation\r\n  output: number\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const as = {\r\n      input: this.input,\r\n      output: this.output\r\n    }\r\n\r\n    writeDefinedProperty(as, 'interpolation', this.interpolation)\r\n\r\n    return as\r\n  }\r\n}\r\n\r\nexport default GLTFAnimationSampler","import { ISerializable, IValidate } from \"src/interfaces\"\r\nimport GLTFAccessorSparseIndices from \"./gltf-accessor-sparse-indices\"\r\nimport GLTFAccessorSparseValues from \"./gltf-accessor-sparse-values\"\r\n\r\n\r\nclass GLTFAccessorSparse implements IValidate, ISerializable {\r\n  count: number\r\n  indices: GLTFAccessorSparseIndices\r\n  values: GLTFAccessorSparseValues\r\n\r\n  validate() {\r\n    return this.count > 0 && this.values.validate() && this.indices.validate()\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessorSparse json()] 此 sparse 对象属性不合法，请检查属性')\r\n    }\r\n\r\n    const spr = {\r\n      count: this.count,\r\n      indices: this.indices.json(),\r\n      values: this.values.json()\r\n    }\r\n\r\n    return spr\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparse","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport { GLTFComponentType } from \"./enum\"\r\n\r\nclass GLTFAccessorSparseIndices implements IValidate, ISerializable {\r\n  bufferView: number\r\n  byteOffset: number\r\n  componentType: GLTFComponentType\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (\r\n      this.componentType !== GLTFComponentType.UNSIGNED_BYTE &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_INT &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_SHORT\r\n    ) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessorSparseIndices json()] 此 accessor.sparse.indices 的属性不合法，请检查')\r\n    }\r\n\r\n    const i = {\r\n      bufferView: this.bufferView,\r\n      byteOffset: this.byteOffset,\r\n      componentType: this.componentType,\r\n    }\r\n\r\n    writeExtensionsProperty(i, this.extensions)\r\n    writeDefinedProperty(i, 'extras', this.extras)\r\n\r\n    return i\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseIndices","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\n\r\nclass GLTFAccessorSparseValues implements IValidate, ISerializable {\r\n  bufferView: number\r\n  byteOffset?: number\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    return !(this.byteOffset! < 0)\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessorSparseValues json()] 此 accessor.sparse.values 的属性不合法，请检查')\r\n    }\r\n\r\n    const v = {\r\n      bufferView: this.bufferView\r\n    }\r\n\r\n    writeDefinedProperty(v, 'byteOffset', this.byteOffset)\r\n    writeExtensionsProperty(v, this.extensions)\r\n    writeDefinedProperty(v, 'extras', this.extras)\r\n\r\n    return v\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseValues","import { ISerializable, IValidate } from \"src/interfaces\"\r\n\r\nclass GLTFTextureInfo implements IValidate, ISerializable {\r\n  index: number\r\n  texCoord: number\r\n\r\n  constructor(index: number, texCoord: number) {\r\n    this.index = index\r\n    this.texCoord = texCoord\r\n  }\r\n\r\n  validate() {\r\n    return (this.index < 0 || this.texCoord < 0)\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFTextureInfo json()] 当前 textureinfo 对象属性不合法，请检查')\r\n    }\r\n\r\n    const tinfo = {\r\n      index: this.index,\r\n      texCoord: this.texCoord\r\n    }\r\n\r\n    return tinfo\r\n  }\r\n}\r\n\r\nexport default GLTFTextureInfo","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFNormalTextureInfo \r\nextends GLTFTextureInfo \r\nimplements IValidate, ISerializable {\r\n  scale: number\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(index: number, texCoord: number, scale: number) {\r\n    super(index, texCoord)\r\n    this.scale = scale\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFNormalTextureInfo json()] 当前 normal textureinfo 属性不合法，请检查')\r\n    }\r\n\r\n    const st = super.json()\r\n    writeDefinedProperty(st, 'scale', this.scale)\r\n    writeExtensionsProperty(st, this.extensions)\r\n    writeDefinedProperty(st, 'extras', this.extras)\r\n\r\n    return st\r\n  }\r\n}\r\n\r\nexport default GLTFNormalTextureInfo","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFOcclusionTextureInfo \r\nextends GLTFTextureInfo\r\nimplements IValidate, ISerializable {\r\n  strength: number\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  constructor(index: number, texCoord: number, strength: number) {\r\n    super(index, texCoord)\r\n    this.strength = strength\r\n  }\r\n\r\n  validate() {\r\n    return (this.strength > 1 || this.strength < 0)\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFOcclusionTextureInfo json()] 当前 occlusion texture info 属性不合法，请检查')\r\n    }\r\n\r\n    const st = super.json()\r\n\r\n    writeDefinedProperty(st, 'strength', this.strength)\r\n    writeExtensionsProperty(st, this.extensions)\r\n    writeDefinedProperty(st, 'extras', this.extras)\r\n\r\n    return st\r\n  }\r\n}\r\n\r\nexport default GLTFOcclusionTextureInfo","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFPbr implements IValidate, ISerializable {\r\n  baseColorFactor?: number[] = [1, 1, 1, 1]\r\n  baseColorTexture?: GLTFTextureInfo\r\n  metallicFactor?: number\r\n  roughnessFactor?: number\r\n  metallicRoughnessTexture?: GLTFTextureInfo\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: any\r\n\r\n  validate() {\r\n    if (this.baseColorFactor!.length !== 4 || this.baseColorFactor!.every(v => v < 0 || v > 1)) {\r\n      return false\r\n    }\r\n    if (this.roughnessFactor! > 1 || this.roughnessFactor! < 0) {\r\n      return false\r\n    }\r\n    if (this.metallicFactor! > 1 || this.metallicFactor! < 0) {\r\n      return false\r\n    }\r\n    if (this.baseColorTexture!.validate() === false || this.metallicRoughnessTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFPbr json()] 此 pbr 对象属性有误，请检查')\r\n    }\r\n\r\n    const pbr = {}\r\n\r\n    writeDefinedProperty(pbr, 'baseColorFactor', this.baseColorFactor)\r\n    writeDefinedProperty(pbr, 'baseColorTexture', this.baseColorTexture !== undefined ? this.baseColorTexture.json() : undefined)\r\n    writeDefinedProperty(pbr, 'metallicFactor', this.metallicFactor)\r\n    writeDefinedProperty(pbr, 'roughnessFactor', this.roughnessFactor)\r\n    writeDefinedProperty(pbr, 'metallicRoughnessTexture', this.metallicRoughnessTexture !== undefined ? this.metallicRoughnessTexture.json() : undefined)\r\n    writeExtensionsProperty(pbr, this.extensions)\r\n    writeDefinedProperty(pbr, 'extras', this.extras)\r\n\r\n    return pbr\r\n  }\r\n}\r\n\r\nexport default GLTFPbr","import { IGLTFPerspectiveCameraConstructionParam, IValidate } from \"src/interfaces\"\r\nimport ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\n\r\nclass GLTFPerspectiveCamera implements IValidate, ISerializable {\r\n  yfov: number\r\n  znear: number\r\n  zfar?: number\r\n  aspectRatio?: number\r\n\r\n  constructor(options: IGLTFPerspectiveCameraConstructionParam) {\r\n    this.yfov = options.yfov\r\n    this.znear = options.znear\r\n    this.zfar = options.zfar\r\n    this.aspectRatio = options.aspectRatio\r\n  }\r\n\r\n  /**\r\n   * @todo \r\n   */\r\n  validate() {\r\n    return false\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFPerspectiveCamera json()] 当前对象属性有问题，请检查')\r\n    }\r\n\r\n    const c = {\r\n      yfov: this.yfov,\r\n      znear: this.znear\r\n    }\r\n\r\n    writeDefinedProperty(c, 'aspectRatio', this.aspectRatio)\r\n    writeDefinedProperty(c, 'zfar', this.zfar)\r\n\r\n    return c\r\n  }\r\n}\r\n\r\nexport default GLTFPerspectiveCamera","import { IGLTFOrthographicCameraConstructionParam, IValidate } from \"src/interfaces\"\r\nimport ISerializable from \"src/interfaces/ISerializable\"\r\n\r\n\r\nclass GLTFOrthographicCamera implements IValidate, ISerializable {\r\n  xmag: number\r\n  ymag: number\r\n  zfar: number\r\n  znear: number\r\n\r\n  constructor(options: IGLTFOrthographicCameraConstructionParam) {\r\n    this.xmag = options.xmag\r\n    this.ymag = options.ymag\r\n    this.zfar = options.zfar\r\n    this.znear = options.znear\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  validate() {\r\n    return false\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFOrthographicCamera json()] 当前对象属性不合法，请检查')\r\n    }\r\n\r\n    const c = {\r\n      xmag: this.xmag,\r\n      ymag: this.ymag,\r\n      zfar: this.zfar,\r\n      znear: this.znear,\r\n    }\r\n\r\n    return c\r\n  }\r\n}\r\n\r\nexport default GLTFOrthographicCamera","import ISerializable from 'src/interfaces/ISerializable'\r\nimport writeDefinedProperty from 'src/utils/io/writeDefinedProperty'\r\nimport writeExtensionsProperty from 'src/utils/io/writeExtensionsProperty'\r\nimport { GLTFExtensionBase } from '../ext'\r\nimport {\r\n  GLTFAsset,\r\n  GLTFBuffer,\r\n  GLTFBufferView,\r\n  GLTFAccessor,\r\n  GLTFScene,\r\n  GLTFNode,\r\n  GLTFMesh,\r\n  GLTFMaterial,\r\n  GLTFImage,\r\n  GLTFTexture,\r\n  GLTFSampler,\r\n  GLTFAnimation,\r\n  GLTFCamera,\r\n  GLTFSkin,\r\n} from './def'\r\n\r\nclass GLTFDocument implements ISerializable {\r\n  asset: GLTFAsset = new GLTFAsset()\r\n  scene?: number = 0\r\n\r\n  buffers: GLTFBuffer[] = []\r\n  bufferViews: GLTFBufferView[] = []\r\n  accessors: GLTFAccessor[] = []\r\n\r\n  scenes: GLTFScene[] = []\r\n  nodes: GLTFNode[] = []\r\n  meshes: GLTFMesh[] = []\r\n\r\n  materials?: GLTFMaterial[] = []\r\n  textures?: GLTFTexture[] = []\r\n  images?: GLTFImage[]\r\n  samplers?: GLTFSampler[]\r\n\r\n  animations?: GLTFAnimation[]\r\n  cameras?: GLTFCamera[]\r\n  skins?: GLTFSkin[]\r\n\r\n  extensions?: Set<GLTFExtensionBase>\r\n  extras?: object\r\n  extensionsUsed?: string[]\r\n  extensionsRequired?: string[]\r\n\r\n  json() {\r\n    const gltfObj = {\r\n      asset: this.asset.json(),\r\n      buffers: this.buffers.map(buffer => buffer.json()),\r\n      bufferViews: this.bufferViews.map(bufferView => bufferView.json()),\r\n      accessors: this.accessors.map(acc => acc.json()),\r\n      \r\n      scenes: this.scenes.map(scene => scene.json()),\r\n      nodes: this.nodes.map(node => node.json()),\r\n      meshes: this.meshes.map(mesh => mesh.json()),\r\n    }\r\n    writeDefinedProperty(gltfObj, 'scene', this.scene)\r\n    writeDefinedProperty(gltfObj, 'materials', this.materials !== undefined && this.materials.length !== 0 ? this.materials.map(mt => mt.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'textures', this.textures !== undefined && this.textures.length !== 0 ? this.textures.map(tx => tx.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'images', this.images !== undefined && this.images.length !== 0 ? this.images.map(img => img.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'samplers', this.samplers !== undefined && this.samplers.length !== 0 ? this.samplers.map(spl => spl.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'cameras', this.cameras !== undefined && this.cameras.length !== 0 ? this.cameras.map(c => c.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'animations', this.animations !== undefined && this.animations.length !== 0 ? this.animations.map(ani => ani.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'skins', this.skins !== undefined && this.skins.length !== 0 ? this.skins.map(skin => skin.json()) : undefined)\r\n\r\n    writeExtensionsProperty(gltfObj, this.extensions)\r\n    writeDefinedProperty(gltfObj, 'extras', this.extras)\r\n    writeDefinedProperty(gltfObj, 'extensionsUsed', this.extensionsUsed)\r\n    writeDefinedProperty(gltfObj, 'extensionsRequired', this.extensionsRequired)\r\n  }\r\n}\r\n\r\nexport default GLTFDocument","import { ISerializable, IValidate } from \"src/interfaces\"\r\n\r\nclass GLTFExtensionBase implements IValidate, ISerializable {\r\n  protected _name: string = \"\"\r\n  get name() {\r\n    return this._name\r\n  }\r\n  \r\n  get isRequire() {\r\n    return false\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    return\r\n  }\r\n}\r\n\r\nexport default GLTFExtensionBase","import { GLTFPrimitiveAttribute } from \"../core\"\r\nimport GLTFExtensionBase from \"./gltf-extension-base\"\r\n\r\n\r\nclass ExtDraco extends GLTFExtensionBase {\r\n  _name: string = \"KHR_draco_mesh_compression\"\r\n  bufferView: number\r\n  attributes: GLTFPrimitiveAttribute\r\n\r\n  get isRequire() {\r\n    return true\r\n  }\r\n\r\n  constructor(options: {\r\n    bufferView: number,\r\n    attributes: GLTFPrimitiveAttribute\r\n  }) {\r\n    super()\r\n    this.bufferView = options.bufferView\r\n    this.attributes = options.attributes\r\n  }\r\n\r\n  validate() {\r\n    return Number.isInteger(this.bufferView)\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  json() {\r\n    return {\r\n      name: this._name,\r\n      bufferView: this.bufferView,\r\n      attributes: this.attributes.json()\r\n    }\r\n  }\r\n}\r\n\r\nexport default ExtDraco","import { GLTFTextureInfo } from \"../core\"\r\nimport GLTFExtensionBase from \"./gltf-extension-base\"\r\n\r\nclass ExtPbrSpecularGlossiness extends GLTFExtensionBase {\r\n  _name: string = \"KHR_materials_pbrSpecularGlossiness\"\r\n\r\n  diffuseFactor?: number[]\r\n  specularFactor?: number[]\r\n  glossinessFactor?: number\r\n  diffuseTexture?: GLTFTextureInfo\r\n  specularGlossinessTexture?: GLTFTextureInfo\r\n\r\n  get isRequire() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @todo\r\n   */\r\n  json() {\r\n    return {}\r\n  }\r\n}\r\n\r\nexport default ExtPbrSpecularGlossiness","import { GLTFAsset, GLTFBuffer, GLTFBufferView, GLTFDocument, GLTFVersion } from \"src/gltf/core\"\r\nimport { IGLTFObj } from \"src/interfaces\"\r\nimport { IGLTFAsset, IGLTFBuffer, IGLTFBufferView } from \"src/interfaces/IGLTFObj\"\r\nimport GLTFReadType from \"src/interfaces/GLTFReadType\"\r\nimport GLTFResources from \"src/interfaces/GLTFResources\"\r\n\r\nfunction readAsset(gltfAsset: GLTFAsset, json: IGLTFAsset) {\r\n  gltfAsset.version = json.version === \"1.0\" ? GLTFVersion.ONE : GLTFVersion.TWO\r\n  gltfAsset.minVersion = json.minVersion === \"1.0\" ? GLTFVersion.ONE : GLTFVersion.TWO\r\n  gltfAsset.copyright = json.copyright\r\n  gltfAsset.generator = json.generator\r\n  gltfAsset.extras = json.extras\r\n  // extensions 单独处理\r\n}\r\n\r\nfunction readBuffers(gltfBuffers: GLTFBuffer[], json: IGLTFBuffer[]) {\r\n  for (const bfjson of json) {\r\n    const bf = new GLTFBuffer()\r\n    bf.uri = bfjson.uri\r\n    bf.byteLength = bfjson.byteLength\r\n    bf.extras = bfjson.extras\r\n    // extensions 单独处理\r\n    gltfBuffers.push(bf)\r\n  }\r\n}\r\n\r\nfunction readBufferViews(gltfBufferViews: GLTFBufferView[], json: IGLTFBufferView[]) {\r\n  for (const bvjson of json) {\r\n    const bv = new GLTFBufferView()\r\n    bv.buffer = bvjson.buffer\r\n    bv.byteLength = bvjson.byteLength\r\n    bv.byteOffset = bvjson.byteOffset\r\n    bv.extras = bvjson.extras\r\n    bv.target = bvjson.target\r\n    // extensions 单独处理\r\n    gltfBufferViews.push(bv)\r\n  }\r\n}\r\n\r\n// function bind(doc: GLTFDocument) {\r\n//   // 绑定 doc 到各个元素上\r\n// }\r\n\r\nconst readGLTF = (json: GLTFReadType, ...resources: GLTFResources[]): GLTFDocument => {\r\n  const doc = new GLTFDocument()\r\n  let resourcesLength = resources.length\r\n  console.log(`Resources Length is ${resourcesLength}`);\r\n\r\n  let obj = json\r\n  if (typeof json === \"string\") {\r\n    obj = JSON.parse(json.trim())\r\n  }\r\n  obj = obj as IGLTFObj\r\n\r\n  doc.scene = obj['scene']\r\n  readAsset(doc.asset, obj['asset'])\r\n  readBuffers(doc.buffers, obj['buffers'])\r\n  readBufferViews(doc.bufferViews, obj['bufferViews'])\r\n\r\n  // bind(doc)\r\n  return doc\r\n}\r\n\r\nexport default readGLTF","/*\n * Copyright 2017 Sam Thorogood. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n(function(scope) {\n  'use strict';\n\n  // fail early\n  if (scope['TextEncoder'] && scope['TextDecoder']) {\n    return false;\n  }\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   */\n  function FastTextEncoder(utfLabel = 'utf-8') {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextEncoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextEncoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  /**\n   * @param {string} string\n   * @param {{stream: boolean}=} options\n   * @return {!Uint8Array}\n   */\n  FastTextEncoder.prototype.encode = function(\n    string,\n    options = { stream: false },\n  ) {\n    if (options.stream) {\n      throw new Error(`Failed to encode: the 'stream' option is unsupported.`);\n    }\n\n    let pos = 0;\n    const len = string.length;\n    const out = [];\n\n    let at = 0; // output position\n    let tlen = Math.max(32, len + (len >> 1) + 7); // 1.5x size\n    let target = new Uint8Array((tlen >> 3) << 3); // ... but at 8 byte offset\n\n    while (pos < len) {\n      let value = string.charCodeAt(pos++);\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < len) {\n          const extra = string.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n        if (value >= 0xd800 && value <= 0xdbff) {\n          continue; // drop lone surrogate\n        }\n      }\n\n      // expand the buffer if we couldn't write 4 bytes\n      if (at + 4 > target.length) {\n        tlen += 8; // minimum extra\n        tlen *= 1.0 + (pos / string.length) * 2; // take 2x the remaining\n        tlen = (tlen >> 3) << 3; // 8 byte offset\n\n        const update = new Uint8Array(tlen);\n        update.set(target);\n        target = update;\n      }\n\n      if ((value & 0xffffff80) === 0) {\n        // 1-byte\n        target[at++] = value; // ASCII\n        continue;\n      } else if ((value & 0xfffff800) === 0) {\n        // 2-byte\n        target[at++] = ((value >> 6) & 0x1f) | 0xc0;\n      } else if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        target[at++] = ((value >> 12) & 0x0f) | 0xe0;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else if ((value & 0xffe00000) === 0) {\n        // 4-byte\n        target[at++] = ((value >> 18) & 0x07) | 0xf0;\n        target[at++] = ((value >> 12) & 0x3f) | 0x80;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // FIXME: do we care\n        continue;\n      }\n\n      target[at++] = (value & 0x3f) | 0x80;\n    }\n\n    return target.slice(0, at);\n  };\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   * @param {{fatal: boolean}=} options\n   */\n  function FastTextDecoder(utfLabel = 'utf-8', options = { fatal: false }) {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextDecoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n    if (options.fatal) {\n      throw new Error(\n        `Failed to construct 'TextDecoder': the 'fatal' option is unsupported.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextDecoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'fatal', { value: false });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'ignoreBOM', {\n    value: false,\n  });\n\n  /**\n   * @param {(!ArrayBuffer|!ArrayBufferView)} buffer\n   * @param {{stream: boolean}=} options\n   */\n  FastTextDecoder.prototype.decode = function(\n    buffer,\n    options = { stream: false },\n  ) {\n    if (options['stream']) {\n      throw new Error(`Failed to decode: the 'stream' option is unsupported.`);\n    }\n\n    const bytes = new Uint8Array(buffer);\n    let pos = 0;\n    const len = bytes.length;\n    const out = [];\n\n    while (pos < len) {\n      const byte1 = bytes[pos++];\n      if (byte1 === 0) {\n        break; // NULL\n      }\n\n      if ((byte1 & 0x80) === 0) {\n        // 1-byte\n        out.push(byte1);\n      } else if ((byte1 & 0xe0) === 0xc0) {\n        // 2-byte\n        const byte2 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 6) | byte2);\n      } else if ((byte1 & 0xf0) === 0xe0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n      } else if ((byte1 & 0xf8) === 0xf0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        const byte4 = bytes[pos++] & 0x3f;\n\n        // this can be > 0xffff, so possibly generate surrogates\n        let codepoint =\n          ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n        if (codepoint > 0xffff) {\n          // codepoint &= ~0x10000;\n          codepoint -= 0x10000;\n          out.push(((codepoint >>> 10) & 0x3ff) | 0xd800);\n          codepoint = 0xdc00 | (codepoint & 0x3ff);\n        }\n        out.push(codepoint);\n      } else {\n        // FIXME: we're ignoring this\n      }\n    }\n\n    return String.fromCharCode.apply(null, out);\n  };\n\n  scope['TextEncoder'] = FastTextEncoder;\n  scope['TextDecoder'] = FastTextDecoder;\n})(\n  typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : this,\n);\n","// eslint-disable-next-line import/no-unassigned-import\nimport './text-encoding-polyfill';\n\nconst decoder = new TextDecoder('utf-8');\n\nexport function decode(bytes: Uint8Array): string {\n  return decoder.decode(bytes);\n}\n\nconst encoder = new TextEncoder();\n\nexport function encode(str: string): Uint8Array {\n  return encoder.encode(str);\n}\n","import { decode, encode } from './utf8';\n\nconst defaultByteLength = 1024 * 8;\n\ntype InputData = number | ArrayBufferLike | ArrayBufferView | IOBuffer | Buffer;\n\ninterface IOBufferOptions {\n  /**\n   * Ignore the first n bytes of the ArrayBuffer.\n   */\n  offset?: number;\n}\n\nexport class IOBuffer {\n  /**\n   * Reference to the internal ArrayBuffer object.\n   */\n  public buffer: ArrayBufferLike;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public byteLength: number;\n\n  /**\n   * Byte offset of the internal ArrayBuffer.\n   */\n  public byteOffset: number;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public length: number;\n\n  /**\n   * The current offset of the buffer's pointer.\n   */\n  public offset: number;\n\n  private lastWrittenByte: number;\n  private littleEndian: boolean;\n\n  private _data: DataView;\n  private _mark: number;\n  private _marks: number[];\n\n  /**\n   * @param data - The data to construct the IOBuffer with.\n   * If data is a number, it will be the new buffer's length<br>\n   * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>\n   * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,\n   * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.\n   * @param options\n   */\n  public constructor(\n    data: InputData = defaultByteLength,\n    options: IOBufferOptions = {},\n  ) {\n    let dataIsGiven = false;\n    if (typeof data === 'number') {\n      data = new ArrayBuffer(data);\n    } else {\n      dataIsGiven = true;\n      this.lastWrittenByte = data.byteLength;\n    }\n\n    const offset = options.offset ? options.offset >>> 0 : 0;\n    const byteLength = data.byteLength - offset;\n    let dvOffset = offset;\n    if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\n      if (data.byteLength !== data.buffer.byteLength) {\n        dvOffset = data.byteOffset + offset;\n      }\n      data = data.buffer;\n    }\n    if (dataIsGiven) {\n      this.lastWrittenByte = byteLength;\n    } else {\n      this.lastWrittenByte = 0;\n    }\n    this.buffer = data;\n    this.length = byteLength;\n    this.byteLength = byteLength;\n    this.byteOffset = dvOffset;\n    this.offset = 0;\n    this.littleEndian = true;\n    this._data = new DataView(this.buffer, dvOffset, byteLength);\n    this._mark = 0;\n    this._marks = [];\n  }\n\n  /**\n   * Checks if the memory allocated to the buffer is sufficient to store more\n   * bytes after the offset.\n   * @param byteLength - The needed memory in bytes.\n   * @returns `true` if there is sufficient space and `false` otherwise.\n   */\n  public available(byteLength = 1): boolean {\n    return this.offset + byteLength <= this.length;\n  }\n\n  /**\n   * Check if little-endian mode is used for reading and writing multi-byte\n   * values.\n   * @returns `true` if little-endian mode is used, `false` otherwise.\n   */\n  public isLittleEndian(): boolean {\n    return this.littleEndian;\n  }\n\n  /**\n   * Set little-endian mode for reading and writing multi-byte values.\n   */\n  public setLittleEndian(): this {\n    this.littleEndian = true;\n    return this;\n  }\n\n  /**\n   * Check if big-endian mode is used for reading and writing multi-byte values.\n   * @returns `true` if big-endian mode is used, `false` otherwise.\n   */\n  public isBigEndian(): boolean {\n    return !this.littleEndian;\n  }\n\n  /**\n   * Switches to big-endian mode for reading and writing multi-byte values.\n   */\n  public setBigEndian(): this {\n    this.littleEndian = false;\n    return this;\n  }\n\n  /**\n   * Move the pointer n bytes forward.\n   * @param n - Number of bytes to skip.\n   */\n  public skip(n = 1): this {\n    this.offset += n;\n    return this;\n  }\n\n  /**\n   * Move the pointer to the given offset.\n   * @param offset\n   */\n  public seek(offset: number): this {\n    this.offset = offset;\n    return this;\n  }\n\n  /**\n   * Store the current pointer offset.\n   * @see {@link IOBuffer#reset}\n   */\n  public mark(): this {\n    this._mark = this.offset;\n    return this;\n  }\n\n  /**\n   * Move the pointer back to the last pointer offset set by mark.\n   * @see {@link IOBuffer#mark}\n   */\n  public reset(): this {\n    this.offset = this._mark;\n    return this;\n  }\n\n  /**\n   * Push the current pointer offset to the mark stack.\n   * @see {@link IOBuffer#popMark}\n   */\n  public pushMark(): this {\n    this._marks.push(this.offset);\n    return this;\n  }\n\n  /**\n   * Pop the last pointer offset from the mark stack, and set the current\n   * pointer offset to the popped value.\n   * @see {@link IOBuffer#pushMark}\n   */\n  public popMark(): this {\n    const offset = this._marks.pop();\n    if (offset === undefined) {\n      throw new Error('Mark stack empty');\n    }\n    this.seek(offset);\n    return this;\n  }\n\n  /**\n   * Move the pointer offset back to 0.\n   */\n  public rewind(): this {\n    this.offset = 0;\n    return this;\n  }\n\n  /**\n   * Make sure the buffer has sufficient memory to write a given byteLength at\n   * the current pointer offset.\n   * If the buffer's memory is insufficient, this method will create a new\n   * buffer (a copy) with a length that is twice (byteLength + current offset).\n   * @param byteLength\n   */\n  public ensureAvailable(byteLength = 1): this {\n    if (!this.available(byteLength)) {\n      const lengthNeeded = this.offset + byteLength;\n      const newLength = lengthNeeded * 2;\n      const newArray = new Uint8Array(newLength);\n      newArray.set(new Uint8Array(this.buffer));\n      this.buffer = newArray.buffer;\n      this.length = this.byteLength = newLength;\n      this._data = new DataView(this.buffer);\n    }\n    return this;\n  }\n\n  /**\n   * Read a byte and return false if the byte's value is 0, or true otherwise.\n   * Moves pointer forward by one byte.\n   */\n  public readBoolean(): boolean {\n    return this.readUint8() !== 0;\n  }\n\n  /**\n   * Read a signed 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readInt8(): number {\n    return this._data.getInt8(this.offset++);\n  }\n\n  /**\n   * Read an unsigned 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readUint8(): number {\n    return this._data.getUint8(this.offset++);\n  }\n\n  /**\n   * Alias for {@link IOBuffer#readUint8}.\n   */\n  public readByte(): number {\n    return this.readUint8();\n  }\n\n  /**\n   * Read `n` bytes and move pointer forward by `n` bytes.\n   */\n  public readBytes(n = 1): Uint8Array {\n    const bytes = new Uint8Array(n);\n    for (let i = 0; i < n; i++) {\n      bytes[i] = this.readByte();\n    }\n    return bytes;\n  }\n\n  /**\n   * Read a 16-bit signed integer and move pointer forward by 2 bytes.\n   */\n  public readInt16(): number {\n    const value = this._data.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.\n   */\n  public readUint16(): number {\n    const value = this._data.getUint16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit signed integer and move pointer forward by 4 bytes.\n   */\n  public readInt32(): number {\n    const value = this._data.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.\n   */\n  public readUint32(): number {\n    const value = this._data.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit floating number and move pointer forward by 4 bytes.\n   */\n  public readFloat32(): number {\n    const value = this._data.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 64-bit floating number and move pointer forward by 8 bytes.\n   */\n  public readFloat64(): number {\n    const value = this._data.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  /**\n   * Read a 1-byte ASCII character and move pointer forward by 1 byte.\n   */\n  public readChar(): string {\n    return String.fromCharCode(this.readInt8());\n  }\n\n  /**\n   * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.\n   */\n  public readChars(n = 1): string {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      result += this.readChar();\n    }\n    return result;\n  }\n\n  /**\n   * Read the next `n` bytes, return a UTF-8 decoded string and move pointer\n   * forward by `n` bytes.\n   */\n  public readUtf8(n = 1): string {\n    return decode(this.readBytes(n));\n  }\n\n  /**\n   * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer\n   * forward by 1 byte.\n   */\n  public writeBoolean(value: unknown): this {\n    this.writeUint8(value ? 0xff : 0x00);\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.\n   */\n  public writeInt8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setInt8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit unsigned integer and move pointer forward by 1\n   * byte.\n   */\n  public writeUint8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setUint8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * An alias for {@link IOBuffer#writeUint8}.\n   */\n  public writeByte(value: number): this {\n    return this.writeUint8(value);\n  }\n\n  /**\n   * Write all elements of `bytes` as uint8 values and move pointer forward by\n   * `bytes.length` bytes.\n   */\n  public writeBytes(bytes: ArrayLike<number>): this {\n    this.ensureAvailable(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      this._data.setUint8(this.offset++, bytes[i]);\n    }\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit signed integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeInt16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setInt16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit unsigned integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeUint16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setUint16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit signed integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeInt32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setInt32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit unsigned integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeUint32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setUint32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit floating number and move pointer forward by 4\n   * bytes.\n   */\n  public writeFloat32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setFloat32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 64-bit floating number and move pointer forward by 8\n   * bytes.\n   */\n  public writeFloat64(value: number): this {\n    this.ensureAvailable(8);\n    this._data.setFloat64(this.offset, value, this.littleEndian);\n    this.offset += 8;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write the charCode of `str`'s first character as an 8-bit unsigned integer\n   * and move pointer forward by 1 byte.\n   */\n  public writeChar(str: string): this {\n    return this.writeUint8(str.charCodeAt(0));\n  }\n\n  /**\n   * Write the charCodes of all `str`'s characters as 8-bit unsigned integers\n   * and move pointer forward by `str.length` bytes.\n   */\n  public writeChars(str: string): this {\n    for (let i = 0; i < str.length; i++) {\n      this.writeUint8(str.charCodeAt(i));\n    }\n    return this;\n  }\n\n  /**\n   * UTF-8 encode and write `str` to the current pointer offset and move pointer\n   * forward according to the encoded length.\n   */\n  public writeUtf8(str: string): this {\n    return this.writeBytes(encode(str));\n  }\n\n  /**\n   * Export a Uint8Array view of the internal buffer.\n   * The view starts at the byte offset and its length\n   * is calculated to stop at the last written byte or the original length.\n   */\n  public toArray(): Uint8Array {\n    return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\n  }\n\n  /**\n   * Update the last written byte offset\n   * @private\n   */\n  private _updateLastWrittenByte(): void {\n    if (this.offset > this.lastWrittenByte) {\n      this.lastWrittenByte = this.offset;\n    }\n  }\n}\n","enum FeatureTableType {\r\n  B3dm = \"b3dm\",\r\n  I3dm = \"i3dm\",\r\n  Pnts = \"pnts\",\r\n  Vctr = \"vctr\"\r\n}\r\n\r\nexport default FeatureTableType","import { IOBuffer } from \"iobuffer\"\r\nimport readGLTF from \"./read-gltf\"\r\n\r\nconst readGLB = (binary: Uint8Array | ArrayBuffer | Buffer) => {\r\n  /* read head */\r\n  const io = new IOBuffer(binary)\r\n  const magic = io.readChars(4)\r\n  if (magic !== \"gltf\") {\r\n    throw new Error(\"[readGLB()] 不是 glb 二进制\")\r\n  }\r\n  const version = io.readUint32()\r\n  if (version !== 2) {\r\n    throw new Error(\"[readGLB()] 暂不支持其他版本，仅支持 2.0 版本\")\r\n  }\r\n  const length = io.readUint32()\r\n  if (length !== binary.byteLength) {\r\n    throw new Error(\"[readGLB()] 数据长度异常\")\r\n  }\r\n  \r\n  /* read json */\r\n  const jsonByteLength = io.readUint32()\r\n  const jsonType = io.readUint32()\r\n  console.log(`数据块 1 的类型: ${jsonType} (1=json, 0=bin)`)\r\n  const jsonText = io.readChars(jsonByteLength)\r\n  const json = JSON.parse(jsonText)\r\n\r\n  /* read binarydata */\r\n  const binByteLength = io.readUint32()\r\n  const binType = io.readUint32()\r\n  console.log(`数据块 2 的类型: ${binType} (1=json, 0=bin)`)\r\n  let binarydata = undefined\r\n  try {\r\n    binarydata = io.readBytes(binByteLength)\r\n  } catch {\r\n    throw new Error(\"[readGLB()] 数据长度异常，试检查 glb binary 块有无问题\")\r\n  }\r\n\r\n  /* read as gltfdocument */\r\n  if (binarydata) {\r\n    return readGLTF(json, binarydata)\r\n  }\r\n}\r\n\r\nexport default readGLB","class TilesetExtBase {\r\n  \r\n}\r\n\r\nexport default TilesetExtBase","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtBatchtableHierarchy extends TilesetExtBase {\r\n  readonly name = \"3DTILES_batch_table_hierarchy\"\r\n\r\n  load() {\r\n    \r\n  }\r\n}\r\n\r\nexport default ExtBatchtableHierarchy","import TilesetExtBase from \"./ext-base\";\r\n\r\nclass ExtPntsDraco extends TilesetExtBase {\r\n  readonly name = \"3DTILES_draco_point_compression\"\r\n}\r\n\r\nexport default ExtPntsDraco","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtContentGLTF extends TilesetExtBase {\r\n  readonly name = \"3DTILES_content_gltf\"\r\n}\r\n\r\nexport default ExtContentGLTF","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtImplicitTiling extends TilesetExtBase {\r\n  readonly name = \"3DTILES_implicit_tiling\"\r\n}\r\n\r\nexport default ExtImplicitTiling","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtLayers extends TilesetExtBase {\r\n  readonly name = \"3DTILES_layers\"\r\n}\r\n\r\nexport default ExtLayers","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMetadata extends TilesetExtBase {\r\n  readonly name = \"3DTILES_metadata\"\r\n}\r\n\r\nexport default ExtMetadata","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMultipleContent extends TilesetExtBase {\r\n  readonly name = \"3DTILES_multiple_contents\"\r\n}\r\n\r\nexport default ExtMultipleContent","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileRefine from \"./enum/tile-refine\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\nimport TileContent from \"./tile-content\"\r\n\r\nclass Tile implements IValidate {\r\n  boundingVolume: TileBoundingVolume\r\n  geometricError: number\r\n  viewerRequestVolume?: TileBoundingVolume\r\n  refine?: TileRefine\r\n  content?: TileContent\r\n  transform?: number[] = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] // wait to def as Mat4\r\n  children?: Tile[]\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  toJson() {\r\n    if (!this.validate()) {\r\n      throw new Error('[Tile toJson()] 验证此对象失败！')\r\n    }\r\n    const obj = {}\r\n    if (this.transform !== undefined) {\r\n      Object.defineProperty(obj, 'transform', {\r\n        value: this.transform\r\n      })\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default Tile","import ITilesetConstructionParam from \"../../../interfaces/tileset/ITilesetConstructionParam\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport Asset from \"./asset\"\r\nimport Property from \"./property\"\r\nimport Tile from \"./tile\"\r\n\r\nclass Tileset {\r\n  asset: Asset\r\n  root: Tile\r\n  geometricError: number\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n  extensionsUsed?: string[] = []\r\n  extensionsRequired?: string[] = []\r\n  properties?: Map<any, Property>\r\n\r\n  constructor(options: ITilesetConstructionParam) {\r\n    this.root = options.root\r\n    this.geometricError = options.geometricError\r\n    this.uri = options.uri\r\n  }\r\n\r\n  /**\r\n   * @deprecated `Tileset.url` 已废弃，请使用 `Tileset.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n  set url(value: string) {\r\n    this.uri = value\r\n  }\r\n}\r\n\r\nexport default Tileset","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass TileBoundingVolume implements IValidate {\r\n  box?: number[]\r\n  region?: number[]\r\n  sphere?: number[]\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  validate() {\r\n    const boxExist = this.box === undefined ? 1 : 0\r\n    const regionExist = this.region === undefined ? 1 : 0\r\n    const sphereExist = this.sphere === undefined ? 1 : 0\r\n    // === 3 意思是三个都不存在\r\n    // === 2 意思是存在 1 个\r\n    // === 1 意思是存在 2 个\r\n    // === 0 意思是存在 3 个\r\n    if (boxExist + regionExist + sphereExist !== 2) {\r\n      return false\r\n    }\r\n\r\n    if ((<number[]>this.box).length != 12)\r\n      return false\r\n    if ((<number[]>this.region).length != 6)\r\n      return false\r\n    if ((<number[]>this.sphere).length != 4)\r\n      return false\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileBoundingVolume","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\n// import * as URI from 'uri-js'\r\n\r\nclass TileContent implements IValidate {\r\n  boundingVolume?: TileBoundingVolume\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n\r\n  /**\r\n   * @deprecated `TileContent.url` 已废弃，请使用 `TileContent.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileContent","import TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass Property {\r\n  maximum: number\r\n  minimum: number\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n}\r\n\r\nexport default Property","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass Asset implements IValidate {\r\n  version: string\r\n  tilesetVersion?: string\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default Asset","import IValidate from \"../../../interfaces/IValidate\";\r\n\r\nclass TileHeaderBase implements IValidate {\r\n  magic: string\r\n  version: number\r\n  byteLength: number\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileHeaderBase","import TileHeaderBase from \"../tile-header-base\";\r\n\r\nclass B3dmHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default B3dmHeader","enum TileRefine {\r\n  ADD = \"add\",\r\n  REPLACE = \"replace\"\r\n}\r\n\r\nexport default TileRefine","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\n\r\nclass FeatureTable implements IValidate {\r\n\r\n  _json: Object\r\n  _binary: Uint8Array\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  featureTableType: FeatureTableType\r\n\r\n  validate() {\r\n    return false // base class always return false.\r\n  }\r\n}\r\n\r\nexport default FeatureTable","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IB3dmFTJson from \"../../../../interfaces/tileset/IB3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateB3dmBatchTable(table: B3dmFeatureTable): boolean {\r\n  return table.batchLength === undefined ? false : true\r\n}\r\n\r\nfunction parse(table: B3dmFeatureTable) {\r\n  const json = table._json as IB3dmFTJson\r\n  table.batchLength = json['BATCH_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass B3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  batchLength: number\r\n  rtcCenter?: number[]\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new B3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.B3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateB3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default B3dmFeatureTable","import { IOBuffer } from \"iobuffer\"\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\nimport IBTBinaryRef from \"../../../../interfaces/tileset/IBTBinaryRef\"\r\nimport IBTJson, { BTJsonValue } from \"../../../../interfaces/tileset/IBTJson\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\n\r\n/*\r\n  batchtable\r\n    json: 它有可能是n个数组，每个数组的长度等于不同瓦片的 featureTableJSON.XXXLength，b3dm 是 BATCH_LENGTH，等等：\r\n            {\r\n              \"name\": ['name1', 'name2', 'name3'],\r\n              \"height\": [10, 20, 5]\r\n            }\r\n          也有可能是对二进制 batchtable binary 的引用定义，拥有 byteOffset、componentType、type 三个属性的对象\r\n            {\r\n              \"name\": {\r\n                byteOffset: 16, // 相对于 batchtable binary body 的偏移值\r\n                type: \"SCALAR\",\r\n                componentType: \"INT\"\r\n              }\r\n            }\r\n          所以，batchtable 有一个弱点，不能用 binary 存储文本数据，因为第二种情况只允许存储 scalar、vec2、vec3、vec4 四种数值类型\r\n          不过使用 byte + scalar 的方式或许可以存储字节信息。\r\n    binary: 根据 json 中第二种定义而存储数据\r\n\r\n  扩展：层级 batchtable：\r\n    \r\n */\r\n\r\nfunction parse(table: BatchTable) {\r\n  for (const k of Object.keys(table._json)) {\r\n    table.variables.set(k, table._json[k])\r\n  }\r\n}\r\n\r\nclass BatchTable implements IValidate {\r\n\r\n  _json: IBTJson\r\n  _binary: Uint8Array\r\n\r\n  variables: Map<string, BTJsonValue> = new Map()\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  static createFromJSON(json: IBTJson, binary: Uint8Array) {\r\n    const bt = new BatchTable()\r\n    bt._json = json\r\n    bt._binary = binary\r\n\r\n    parse(bt)\r\n\r\n    return bt\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get variableNames() {\r\n    return Object.keys(this._json)\r\n  }\r\n\r\n  get variableCounts() {\r\n    return this.variableNames.length\r\n  }\r\n\r\n  getVariable(name: string) {\r\n    if (this.variables.has(name)) {\r\n      const v = this.variables.get(name)\r\n      return v\r\n    }\r\n\r\n    throw new Error(`[BatchTable getVariable()] 没有这个值：${name}。`)\r\n  }\r\n}\r\n\r\nfunction timesOperator(fn: () => void, times: number) {\r\n  for (let i = 0; i < times; i++) fn()\r\n}\r\n\r\nfunction getTimes(type: string) {\r\n  return type === \"SCALAR\" ? 1 :\r\n  type === \"VEC2\" ? 2 :\r\n  type === \"VEC3\" ? 3 :\r\n  type === \"VEC4\" ? 4 : -1\r\n}\r\n\r\nfunction getReadFunction(io: IOBuffer, componentType: string) {\r\n  return componentType === \"BYTE\" ? io.readInt8 :\r\n  componentType === \"UNSIGNED_BYTE\" ? io.readUint8 :\r\n  componentType === \"SHORT\" ? io.readInt16 :\r\n  componentType === \"UNSIGNED_SHORT\" ? io.readUint16 : \r\n  componentType === \"INT\" ? io.readInt32:\r\n  componentType === \"UNSIGNED_INT\" ? io.readUint32 :\r\n  componentType === \"FLOAT\" ? io.readFloat32 : io.readFloat64\r\n}\r\n\r\n/**\r\n * 将 BatchTableBinary 读取并转换成普通的数字数组\r\n * @param {BatchTable} table BatchTable 实例\r\n * @param {IBTBinaryRef} variable 从 BatchTable JSON 中获取的引用描述对象，可使用 BatchTable.prototype.getVariable(name) 获取\r\n * @param {number} count FeatureTable 中的 XXXLength，即每个变量有多少个数据\r\n * @returns {number[]}\r\n */\r\nexport const parseBTBinary2Array = (table: BatchTable, variable: IBTBinaryRef, count: number) => {\r\n  let hasHierarchy = false\r\n  table.extensions?.forEach(ext => {\r\n    if ('name' in ext && ext['name'] === '3DTILES_batch_table_hierarchy') {\r\n      hasHierarchy = true\r\n    }\r\n  })\r\n  if (hasHierarchy) {\r\n    return\r\n  }\r\n\r\n  const io = new IOBuffer(table._binary.buffer)\r\n  io.skip(variable.byteOffset)\r\n  const result: number[] = []\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const readFunction = getReadFunction(io, variable.componentType)\r\n    timesOperator(() => result.push(readFunction()), getTimes(variable.type))\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default BatchTable","import { IOBuffer } from 'iobuffer'\r\n\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport B3dmHeader from \"./header\"\r\nimport B3dmFeatureTable from '../featuretable/featuretable-b3dm'\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: B3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(b3dm: B3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(b3dm.header, iobuffer)\r\n\r\n  if (b3dm.byteLength % 8 != 0) {\r\n    throw new Error('[B3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(b3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(b3dm.featureTableBinaryByteLength)\r\n  b3dm.featureTable = B3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (b3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(b3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(b3dm.batchTableBinaryByteLength)\r\n    b3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass B3dm implements IValidate {\r\n  header: B3dmHeader\r\n  featureTable: B3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new B3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default B3dm","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass I3dmHeader extends TileHeaderBase implements IValidate {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  gltfFormat: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  validate() {\r\n    if (this.gltfFormat !== 0 && this.gltfFormat !== 1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default I3dmHeader","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IFTBinaryRef from \"../../../../interfaces/tileset/IFTBinaryRef\"\r\nimport II3dmFTJson from \"../../../../interfaces/tileset/II3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateI3dmBatchTable(table: I3dmFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.position !== undefined && table.positionQuantized !== undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  if (\r\n    (table.normalUp === undefined && table.normalRight !== undefined) ||\r\n    (table.normalRight === undefined && table.normalUp !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  if (\r\n    (table.normalUpOct32p === undefined && table.normalRightOct32p !== undefined) ||\r\n    (table.normalRightOct32p === undefined && table.normalUpOct32p !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: I3dmFeatureTable) {\r\n  const json = table._json as II3dmFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.normalUp = json['NORMAL_UP']\r\n  table.normalRight = json['NORMAL_RIGHT']\r\n  table.normalUpOct32p = json['NORMAL_UP_OCT32P']\r\n  table.normalRightOct32p = json['NORMAL_RIGHT_OCT32P']\r\n  table.scale = json['SCALE']\r\n  table.scaleNonUniform = json['SCALE_NON_UNIFORM']\r\n  table.instancesLength = json['INSTANCES_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass I3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  normalUp?: IFTBinaryRef\r\n  normalRight?: IFTBinaryRef\r\n  normalUpOct32p?: IFTBinaryRef\r\n  normalRightOct32p?: IFTBinaryRef\r\n  scale?: IFTBinaryRef\r\n  batchId?: IFTBinaryRef\r\n  scaleNonUniform?: IFTBinaryRef\r\n\r\n  instancesLength: number\r\n\r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  eastNorthUp?: boolean\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new I3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.I3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateI3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default I3dmFeatureTable","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport I3dmFeatureTable from \"../featuretable/featuretable-i3dm\"\r\nimport I3dmHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: I3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n  header.gltfFormat = io.readUint32()\r\n}\r\n\r\nfunction parse(i3dm: I3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(i3dm.header, iobuffer)\r\n\r\n  if (i3dm.byteLength % 8 != 0) {\r\n    throw new Error('[I3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(32)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(i3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(i3dm.featureTableBinaryByteLength)\r\n  i3dm.featureTable = I3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (i3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(i3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(i3dm.batchTableBinaryByteLength)\r\n    i3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass I3dm implements IValidate {\r\n  header: I3dmHeader\r\n  featureTable: I3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  externalData: string | GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new I3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get gltfFormat() {\r\n    return this.header.gltfFormat\r\n  }\r\n\r\n  get sizeWithoutExternalData() {\r\n    return 32 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default I3dm","import TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass PntsHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  \r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default PntsHeader","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IFTBinaryRef from \"../../../../interfaces/tileset/IFTBinaryRef\"\r\nimport IPntsFTJson from \"../../../../interfaces/tileset/IPntsFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validatePntsFeatureTable(table: PntsFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.batchId !== undefined && table.batchLength === undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: PntsFeatureTable) {\r\n  const json = table._json as IPntsFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.rgba = json['RGBA']\r\n  table.rgb = json['RGB']\r\n  table.rgb565 = json['RGB565']\r\n  table.normal = json['NORMAL']\r\n  table.normalOct16p = json['NORMAL_OCT16P']\r\n  table.batchId = json['BATCH_ID']\r\n  table.pointsLength = json['POINTS_LENGTH']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n  table.constantRgba = json['CONSTANT_RGBA']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass PntsFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  rgba?: IFTBinaryRef\r\n  rgb?: IFTBinaryRef\r\n  rgb565?: IFTBinaryRef\r\n  normal?: IFTBinaryRef\r\n  normalOct16p?: IFTBinaryRef\r\n\r\n  pointsLength: number\r\n  \r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  constantRgba?: number[]\r\n  batchId?: any\r\n  batchLength?: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new PntsFeatureTable()\r\n    \r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.Pnts\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validatePntsFeatureTable(this)\r\n  }\r\n}\r\n\r\nexport default PntsFeatureTable","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../..\"\r\nimport PntsFeatureTable from \"../featuretable/featuretable-pnts\"\r\nimport PntsHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: PntsHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(pnts: Pnts, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(pnts.header, iobuffer)\r\n\r\n  if (pnts.byteLength % 8 != 0) {\r\n    throw new Error('[Pnts 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(pnts.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(pnts.featureTableBinaryByteLength)\r\n  pnts.featureTable = PntsFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (pnts.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(pnts.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(pnts.batchTableBinaryByteLength)\r\n    pnts.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n}\r\n\r\nclass Pnts implements IValidate {\r\n  header: PntsHeader\r\n  featureTable: PntsFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new PntsHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default Pnts","class Cmpt {\r\n\r\n}\r\n\r\nexport default Cmpt","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IFTBinaryRef from \"../../../../interfaces/tileset/IFTBinaryRef\"\r\nimport IVctrFTJson from \"../../../../interfaces/tileset/IVctrFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateVctrFeatureTable(table: VctrFeatureTable) {\r\n  if (table.region.length !== 6) {\r\n    return false\r\n  }\r\n  if ((<number[]>table.rtcCenter).length !== 3) {\r\n    return false\r\n  }\r\n  if (table.polygonsLength !== undefined) {\r\n    if (table.polygonCounts === undefined || table.polygonIndexCounts === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  if (table.polylinesLength !== undefined) {\r\n    if (table.polylineCounts === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: VctrFeatureTable) {\r\n  const json = table._json as IVctrFTJson\r\n  table.region = json['REGION']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n  table.polygonsLength = json['POLYGONS_LENGTH']\r\n  table.polylinesLength = json['POLYLINES_LENGTH']\r\n  table.pointsLength = json['POINTS_LENGTH']\r\n\r\n  table.polygonCounts = json['POLYGON_COUNTS']\r\n  table.polygonIndexCounts = json['POLYGON_INDEX_COUNTS']\r\n  table.polygonMinimumHeights = json['POLYGON_MINIMUM_HEIGHTS']\r\n  table.polygonMaximumHeights = json['POLYGON_MAXIMUM_HEIGHTS']\r\n\r\n  table.polylineCounts = json['POLYLINE_COUNTS']\r\n  table.polylineBatchIds = json['POLYLINE_BATCH_IDS']\r\n  table.pointBatchIds = json['POINT_BATCH_IDS']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // TODO\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass VctrFeatureTable extends FeatureTable implements IValidate {\r\n  region: number[]\r\n  rtcCenter?: number[]\r\n  \r\n  polygonsLength?: number\r\n  polylinesLength?: number\r\n  pointsLength?: number\r\n  \r\n  polygonCounts?: IFTBinaryRef\r\n  polygonIndexCounts?: IFTBinaryRef\r\n  polygonMinimumHeights?: IFTBinaryRef\r\n  polygonMaximumHeights?: IFTBinaryRef\r\n  polygonBatchIds?: IFTBinaryRef\r\n  \r\n  polylineCounts?: IFTBinaryRef\r\n  polylineBatchIds?: IFTBinaryRef\r\n\r\n  pointBatchIds?: IFTBinaryRef\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new VctrFeatureTable()\r\n    \r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.Vctr\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateVctrFeatureTable(this)\r\n  }\r\n}\r\n\r\nexport default VctrFeatureTable"],"names":["writeDefinedProperty","obj","name","data","undefined","Object","defineProperty","value","writeExtensionsProperty","exts","extObj","_","forEach","ext","json","GLTFVersion","GLTFBufferViewTarget","GLTFAsset","this","TWO","Set","asset","version","generator","minVersion","copyright","extras","GLTFAccessor","options","componentType","count","type","byteOffset","bufferView","validate","Error","acc","max","min","normalized","sparse","extensions","GLTFBuffer","uri","byteLength","bf","GLTFAlphaMode","GLTFBufferView","buffer","byteStride","bv","target","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","GLTFScene","nodes","length","s","GLTFNode","mesh","camera","scale","skin","matrix","translation","rotation","weights","flag","every","r","validateTransforms","children","n","GLTFMesh","primitives","primitive","map","prmt","GLTFAttributeType","GLTFComponentType","GLTFFilter","GLTFWrapMode","GLTFPrimitiveMode","MIME","GLTFMaterial","OPAQUE","pbrMetallicRoughness","normalTexture","occlusionTexture","alphaMode","MASK","alphaCutoff","emissiveFactor","m","emissiveTexture","doubleSided","GLTFTexture","sampler","source","tx","GLTFImage","mimeType","img","GLTFSampler","magFilter","minFilter","wrapS","wrapT","spl","GLTFAnimation","channels","samplers","ani","c","GLTFCamera","orthographic","perspective","GLTFSkin","joints","sk","inverseBindMatrices","skeleton","GLTFPrimitiveAttribute","position","uv0","uv1","color0","normal","tangent","joints0","weights0","values","k","attr","POSITION","GLTFPrimitive","TRIANGLES","attribute","indices","material","mode","GLTFAnimationChannel","ac","GLTFAnimationChannelTarget","act","path","node","GLTFAnimationSampler","as","input","output","interpolation","GLTFAccessorSparse","GLTFAccessorSparseIndices","UNSIGNED_BYTE","UNSIGNED_INT","UNSIGNED_SHORT","i","GLTFAccessorSparseValues","v","GLTFTextureInfo","index","texCoord","GLTFNormalTextureInfo","super","st","GLTFOcclusionTextureInfo","strength","GLTFPbr","baseColorFactor","roughnessFactor","metallicFactor","baseColorTexture","metallicRoughnessTexture","pbr","GLTFPerspectiveCamera","yfov","znear","zfar","aspectRatio","GLTFOrthographicCamera","xmag","ymag","GLTFDocument","gltfObj","buffers","bufferViews","accessors","scenes","scene","meshes","materials","mt","textures","images","cameras","animations","skins","extensionsUsed","extensionsRequired","GLTFExtensionBase","_name","ExtDraco","attributes","Number","isInteger","ExtPbrSpecularGlossiness","readAsset","gltfAsset","ONE","readBuffers","gltfBuffers","bfjson","push","readBufferViews","gltfBufferViews","bvjson","readGLTF","resources","doc","resourcesLength","console","log","JSON","parse","trim","scope","FastTextEncoder","utfLabel","RangeError","FastTextDecoder","fatal","prototype","encode","string","stream","pos","extra","len","at","tlen","Math","Uint8Array","charCodeAt","update","set","slice","decode","bytes","out","byte1","byte2","byte3","codepoint","String","fromCharCode","apply","window","self","decoder","TextDecoder","exports","encoder","TextEncoder","str","IOBuffer","dataIsGiven","ArrayBuffer","lastWrittenByte","offset","dvOffset","isView","littleEndian","_data","DataView","_mark","_marks","pop","seek","available","newLength","newArray","readUint8","getInt8","getUint8","readByte","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","readInt8","result","readChar","utf8_1","readBytes","writeUint8","ensureAvailable","setInt8","_updateLastWrittenByte","setUint8","setInt16","setUint16","setInt32","setUint32","setFloat32","setFloat64","writeBytes","FeatureTableType","readGLB","io","binary","readChars","readUint32","jsonByteLength","jsonType","jsonText","binByteLength","binType","binarydata","TilesetExtBase","ExtBatchtableHierarchy","ExtPntsDraco","ExtContentGLTF","ExtImplicitTiling","ExtLayers","ExtMetadata","ExtMultipleContent","Tile","transform","Tileset","root","geometricError","TileBoundingVolume","box","region","sphere","TileContent","Property","Asset","TileHeaderBase","B3dmHeader","TileRefine","FeatureTable","validateB3dmBatchTable","table","batchLength","_json","rtcCenter","B3dmFeatureTable","ft","_binary","featureTableType","B3dm","keys","variables","BatchTable","Map","bt","variableNames","has","get","parseHeader","header","rewind","magic","featureTableJSONByteLength","featureTableBinaryByteLength","batchTableJSONByteLength","batchTableBinaryByteLength","b3dm","iobuffer","skip","ftJSON","ftBin","featureTable","createFromJSON","btJSON","btBin","batchTable","cacheBuffer","I3dmHeader","gltfFormat","validateI3dmBatchTable","positionQuantized","quantizedVolumeOffset","quantizedVolumeScale","normalUp","normalRight","normalUpOct32p","normalRightOct32p","scaleNonUniform","instancesLength","I3dmFeatureTable","I3dm","i3dm","PntsHeader","validatePntsFeatureTable","batchId","rgba","rgb","rgb565","normalOct16p","pointsLength","constantRgba","PntsFeatureTable","Pnts","pnts","Cmpt","validateVctrFeatureTable","polygonsLength","polygonCounts","polygonIndexCounts","polylinesLength","polylineCounts","polygonMinimumHeights","polygonMaximumHeights","polylineBatchIds","pointBatchIds","VctrFeatureTable","Vctr"],"mappings":"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"}