{"version":3,"file":"ts-3dtiles.common.js","sources":["../src/gltf/core/def/enum/gltf-version.ts","../src/gltf/core/def/enum/gltf-alphamode.ts","../src/gltf/core/def/gltf-asset.ts","../src/gltf/core/def/gltf-accessor.ts","../src/gltf/core/def/gltf-buffer.ts","../src/gltf/core/def/gltf-bufferview.ts","../src/gltf/core/def/gltf-scene.ts","../src/gltf/core/def/gltf-node.ts","../src/gltf/core/def/gltf-mesh.ts","../src/gltf/core/def/enum/gltf-primitivemode.ts","../src/gltf/core/def/gltf-material.ts","../src/gltf/core/def/gltf-texture.ts","../src/gltf/core/def/gltf-image.ts","../src/gltf/core/def/gltf-sampler.ts","../src/gltf/core/def/gltf-animation.ts","../src/gltf/core/def/gltf-camera.ts","../src/gltf/core/def/gltf-skin.ts","../src/gltf/core/def/enum/gltf-attribute-type.ts","../src/gltf/core/def/gltf-primitive-attribute.ts","../src/gltf/core/def/gltf-primitive.ts","../src/gltf/core/def/gltf-animation-channel.ts","../src/gltf/core/def/gltf-animation-channel-target.ts","../src/gltf/core/def/gltf-animation-sampler.ts","../src/gltf/core/def/gltf-accessor-sparse.ts","../src/gltf/core/def/enum/gltf-component-type.ts","../src/gltf/core/def/enum/gltf-filter.ts","../src/gltf/core/def/enum/gltf-wrapmode.ts","../src/gltf/core/def/enum/mime.ts","../src/gltf/core/def/gltf-accessor-sparse-indices.ts","../src/gltf/core/def/gltf-accessor-sparse-values.ts","../src/gltf/core/def/gltf-texture-info.ts","../src/gltf/core/def/gltf-normal-texture-info.ts","../src/gltf/core/def/gltf-occlusion-texture-info.ts","../src/gltf/core/def/gltf-pbr.ts","../src/gltf/core/def/gltf-perspective-camera.ts","../src/gltf/core/def/gltf-orthographic-camera.ts","../src/gltf/core/gltf-document.ts","../src/gltf/ext/gltf-extension-base.ts","../src/gltf/ext/ext-draco.ts","../src/gltf/ext/ext-pbr-specular-glossiness.ts","../src/gltf/io/write-action/index.ts","../src/gltf/io/read-action/index.ts","../src/tileset/ext/ext-base.ts","../src/tileset/ext/ext-batchtable-hierarchy.ts","../src/tileset/ext/ext-pnts-draco.ts","../src/tileset/ext/ext-content-gltf.ts","../src/tileset/ext/ext-implicit-tiling.ts","../src/tileset/ext/ext-layers.ts","../src/tileset/ext/ext-metadata.ts","../src/tileset/ext/ext-multiple-content.ts","../src/tileset/core/def/tile.ts","../src/tileset/core/def/tileset.ts","../src/tileset/core/def/tile-bounding-volume.ts","../src/tileset/core/def/tile-content.ts","../src/tileset/core/def/property.ts","../src/tileset/core/def/asset.ts","../src/tileset/core/def/tile-header-base.ts","../src/tileset/core/def/tile-b3dm/header.ts","../node_modules/iobuffer/src/text-encoding-polyfill.js","../node_modules/iobuffer/src/utf8.browser.ts","../node_modules/iobuffer/src/IOBuffer.ts","../src/tileset/core/def/enum/featuretable-type.ts","../src/tileset/core/def/enum/tile-refine.ts","../src/tileset/core/def/featuretable/featuretable-base.ts","../src/tileset/core/def/featuretable/featuretable-b3dm.ts","../src/tileset/core/def/batchtable/batchtable-base.ts","../src/tileset/core/def/tile-b3dm/index.ts","../src/tileset/core/def/tile-i3dm/header.ts","../src/tileset/core/def/featuretable/featuretable-i3dm.ts","../src/tileset/core/def/tile-i3dm/index.ts","../src/tileset/core/def/tile-pnts/header.ts","../src/tileset/core/def/featuretable/featuretable-pnts.ts","../src/tileset/core/def/tile-pnts/index.ts","../src/tileset/core/def/tile-cmpt/index.ts"],"sourcesContent":["enum GLTFVersion {\r\n  TWO = \"2.0\",\r\n  ONE = \"1.0\"\r\n}\r\n\r\nexport default GLTFVersion","/**\r\n * @enum {GLTFAlphaMode} 透明度模式\r\n */\r\nenum GLTFAlphaMode {\r\n  /** \r\n   * @description 不透明。默认选项。\r\n   */\r\n  OPAQUE = \"OPAQUE\",\r\n  /**\r\n   * @description 透明度取决于 alphaCutOff 值，即半透明\r\n   */\r\n  MASK = \"MASK\",\r\n  /**\r\n   * @description 混合模式\r\n   */\r\n  BLEND = \"BLEND\"\r\n}\r\n\r\nexport default GLTFAlphaMode","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFVersion from \"./enum/gltf-version\"\r\n\r\nclass GLTFAsset implements IValidate {\r\n  version: GLTFVersion = GLTFVersion.TWO\r\n  generator?: string  \r\n  copyright?: string\r\n  minVersion?: GLTFVersion\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate = () => true\r\n}\r\n\r\nexport default GLTFAsset","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFAttributeType from \"./enum/gltf-attribute-type\"\r\nimport GLTFComponentType from \"./enum/gltf-component-type\"\r\n\r\nclass GLTFAccessor implements IValidate {\r\n  componentType: GLTFComponentType\r\n  count: number\r\n  type: GLTFAttributeType\r\n  max?: number[]\r\n  min?: number[]\r\n  sparse?: any\r\n  name?: string\r\n  normalized?: boolean\r\n  bufferView?: number\r\n  byteOffset?: number\r\n\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(options: {\r\n    componentType: GLTFComponentType\r\n    count: number\r\n    type: GLTFAttributeType\r\n  }) {\r\n    this.componentType = options.componentType\r\n    this.count = options.count\r\n    this.type = options.type\r\n  }\r\n\r\n  validate() {\r\n    /** byteOffset 和 bufferView 必须同时存在 */\r\n    if (this.byteOffset !== undefined && this.bufferView !== undefined) {\r\n      return true\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport default GLTFAccessor","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFBuffer implements IValidate {\r\n  byteLength: number = 0\r\n  uri?: string\r\n  /** @deprecated */\r\n  url?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.byteLength < 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFBuffer","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFBufferView implements IValidate {\r\n  buffer: number = 0\r\n  byteLength: number = 0\r\n  byteOffset?: number = 0\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.buffer < 0) {\r\n      return false\r\n    }\r\n    if (this.byteLength < 0) {\r\n      return false\r\n    }\r\n    if (this.byteOffset! < 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default GLTFBufferView","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFScene implements IValidate {\r\n  nodes: number[] = []\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n  \r\n  validate() {\r\n    return (this.nodes.length < 1)\r\n  }\r\n}\r\n\r\nexport default GLTFScene","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFNode implements IValidate {\r\n  children: number[] = []\r\n  mesh?: number\r\n  rotation?: number[]\r\n  translation?: number[]\r\n  weights?: number[]\r\n  name?: string\r\n  skin?: number\r\n  camera?: number\r\n  matrix?: number[]\r\n  scale?: number[]\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(options: {\r\n    children?: number[]\r\n    mesh?: number\r\n    rotation?: number[]\r\n    translation?: number[]\r\n    weights?: number[]\r\n    name?: string\r\n    skin?: number\r\n    camera?: number\r\n    matrix?: number[]\r\n    scale?: number[]\r\n  }) {\r\n    this.mesh = options.mesh\r\n    this.camera = options.camera\r\n    this.scale = options.scale\r\n    this.skin = options.skin\r\n    this.matrix = options.matrix\r\n    this.translation = options.translation\r\n    this.rotation = options.rotation\r\n    this.name = options.name\r\n    this.weights = options.weights\r\n  }\r\n\r\n  private validateTransforms() {\r\n    let flag = true\r\n    if (this.matrix !== undefined) {\r\n      if (this.rotation !== undefined || this.scale !== undefined || this.translation !== undefined) {\r\n        flag = false\r\n      }\r\n    }\r\n    if (this.matrix!.length !== 16) {\r\n      flag = false\r\n    }\r\n    if (this.scale!.length !== 3) {\r\n      flag = false\r\n    }\r\n    if (this.translation!.length !== 3) {\r\n      flag = false\r\n    }\r\n\r\n    if (this.rotation!.length !== 4) {\r\n      flag = false\r\n    } else {\r\n      flag = this.rotation!.every(r => r > 1 || r < -1)\r\n    }\r\n\r\n    return flag\r\n  }\r\n\r\n  validate() {\r\n    if (this.validateTransforms()) {\r\n      return false\r\n    }\r\n    if (this.weights!.length < 1) {\r\n      return false\r\n    } else if (this.weights !== undefined && this.mesh === undefined) {\r\n      return false\r\n    }\r\n    if (this.skin !== undefined && this.mesh === undefined) {\r\n      return false\r\n    }\r\n\r\n    if (this.children!.length < 1) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFNode","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFPrimitive from \"./gltf-primitive\"\r\n\r\nclass GLTFMesh implements IValidate {\r\n  primitives: GLTFPrimitive[] = []\r\n  weights?: number[]\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    let flag = false\r\n    if (this.primitives.every(primitive => primitive.validate())) {\r\n      flag = true\r\n    }\r\n    return flag\r\n  }\r\n}\r\n\r\nexport default GLTFMesh","enum GLTFPrimitiveMode {\r\n  POINTS = 0,\r\n  LINES = 1,\r\n  LINE_LOOP = 2,\r\n  LINE_STRIP = 3,\r\n  TRIANGLES = 4,\r\n  TRIANGLE_STRIP = 5,\r\n  TRIANGLE_FAN = 6\r\n}\r\n\r\nexport default GLTFPrimitiveMode","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFAlphaMode from \"./enum/gltf-alphamode\"\r\nimport GLTFPbr from \"./gltf-pbr\"\r\nimport GLTFOcclusionTextureInfo from \"./gltf-occlusion-texture-info\"\r\nimport GLTFNormalTextureInfo from \"./gltf-normal-texture-info\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFMaterial implements IValidate {\r\n  pbrMetallicRoughness?: GLTFPbr\r\n  normalTexture?: GLTFNormalTextureInfo\r\n  occlusionTexture?: GLTFOcclusionTextureInfo\r\n  emissiveTexture?: GLTFTextureInfo\r\n  emissiveFactor?: number[]\r\n  alphaMode?: GLTFAlphaMode\r\n  alphaCutoff?: number\r\n  doubleSided?: boolean\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.pbrMetallicRoughness!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.normalTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.occlusionTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.alphaMode === GLTFAlphaMode.MASK && this.alphaCutoff === undefined) {\r\n      return false\r\n    }\r\n    if (this.emissiveFactor!.length !== 3) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFMaterial","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\n\r\nclass GLTFTexture implements IValidate {\r\n  sampler?: number\r\n  source?: number\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate = () => true\r\n}\r\n\r\nexport default GLTFTexture","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport MIME from \"./enum/mime\"\r\n\r\nclass GLTFImage implements IValidate {\r\n  uri?: string\r\n  bufferView?: number\r\n  mimeType?: MIME\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.uri !== undefined && this.bufferView !== undefined) {\r\n      return false\r\n    }\r\n    if (this.bufferView !== undefined) {\r\n      if (this.mimeType === undefined) {\r\n        return false\r\n      }\r\n      return true\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFImage","import IValidate from '../../../typings/IValidate'\r\nimport GLTFExtensionBase from '../../ext/gltf-extension-base'\r\nimport GLTFFilter from './enum/gltf-filter'\r\nimport GLTFWrapMode from './enum/gltf-wrapmode'\r\n\r\nclass GLTFSampler implements IValidate {\r\n  magFilter?: GLTFFilter\r\n  minFilter?: GLTFFilter\r\n  wrapS?: GLTFWrapMode\r\n  wrapT?: GLTFWrapMode\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate = () => true\r\n}\r\n\r\nexport default GLTFSampler","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFAnimationChannel from \"./gltf-animation-channel\"\r\nimport GLTFAnimationSampler from \"./gltf-animation-sampler\"\r\n\r\nclass GLTFAnimation implements IValidate {\r\n  channels: GLTFAnimationChannel[]\r\n  samplers: GLTFAnimationSampler[]\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set() \r\n\r\n  validate() {\r\n    if (this.channels!.length < 1 || this.samplers!.length < 1) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFAnimation","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFCameraType from \"./enum/gltf-cameratype\"\r\nimport GLTFOrthographicCamera from \"./gltf-orthographic-camera\"\r\nimport GLTFPerspectiveCamera from \"./gltf-perspective-camera\"\r\n\r\nclass GLTFCamera implements IValidate {\r\n  orthographic?: GLTFOrthographicCamera\r\n  perspective?: GLTFPerspectiveCamera\r\n  type: GLTFCameraType\r\n  name?: string\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(options: {\r\n    orthographic?: GLTFOrthographicCamera\r\n    perspective?: GLTFPerspectiveCamera\r\n    type: GLTFCameraType\r\n    name?: string\r\n  }) {\r\n    this.orthographic = options.orthographic\r\n    this.perspective = options.perspective\r\n    this.type = options.type\r\n    this.name = options.name\r\n  }\r\n\r\n  validate() {\r\n    if (this.orthographic !== undefined && this.perspective !== undefined) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFCamera","import IValidate from \"../../../typings/IValidate\";\r\nimport { GLTFExtensionBase } from \"../../ext\";\r\n\r\nclass GLTFSkin implements IValidate {\r\n  inverseBindMatrices?: number\r\n  skeleton?: number\r\n  name?: string\r\n  joints: number[]\r\n  extensions?: Set<GLTFExtensionBase> = new Set()\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return !(this.joints.length < 1)\r\n  }\r\n}\r\n\r\nexport default GLTFSkin","enum GLTFAttributeType {\r\n  SCALAR = \"SCALAR\",\r\n  VEC2 = \"VEC2\",\r\n  VEC3 = \"VEC3\",\r\n  VEC4 = \"VEC4\",\r\n  MAT2 = \"MAT2\",\r\n  MAT3 = \"MAT3\",\r\n  MAT4 = \"MAT4\",\r\n}\r\n\r\nexport const getAttributeTypeElementCount = (t: GLTFAttributeType): number => {\r\n  switch (t) {\r\n    case GLTFAttributeType.VEC2:\r\n      return 2\r\n    case GLTFAttributeType.VEC3:\r\n      return 3\r\n    case GLTFAttributeType.VEC4:\r\n    case GLTFAttributeType.MAT2:\r\n      return 4\r\n    case GLTFAttributeType.MAT3:\r\n      return 9\r\n    case GLTFAttributeType.MAT4:\r\n      return 16\r\n    default: // means SCALAR\r\n      return 1\r\n  }\r\n}\r\n\r\nexport default GLTFAttributeType","import IValidate from \"../../../typings/IValidate\"\r\n\r\nclass GLTFPrimitiveAttribute implements IValidate {\r\n  position: number\r\n  st1?: number\r\n  normal?: number\r\n  \r\n  constructor(options: {\r\n    position: number,\r\n    st1?: number,\r\n    normal?: number\r\n  }) {\r\n    this.position = options.position\r\n    this.st1 = options.st1\r\n    this.normal = options.normal\r\n  }\r\n\r\n  validate() {\r\n    return Object.values(this).every(k => k! < 0)\r\n  }\r\n}\r\n\r\nexport default GLTFPrimitiveAttribute","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\"\r\nimport GLTFPrimitiveMode from \"./enum/gltf-primitivemode\"\r\nimport GLTFPrimitiveAttribute from \"./gltf-primitive-attribute\"\r\n\r\nclass GLTFPrimitive implements IValidate {\r\n  attribute: GLTFPrimitiveAttribute\r\n  indices?: number\r\n  material?: number\r\n  mode?: GLTFPrimitiveMode\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n  \r\n  constructor(options: {\r\n    attribute: {\r\n      position: number,\r\n      [propName: string]: any\r\n    },\r\n    indices?: number,\r\n    material?: number,\r\n    mode?: GLTFPrimitiveMode\r\n  }) {\r\n    this.attribute = new GLTFPrimitiveAttribute({\r\n      position: options.attribute.position,\r\n      st1: options.attribute['st1'],\r\n      normal: options.attribute['normal']\r\n    })\r\n    this.indices = options.indices\r\n    this.material = options.material\r\n    if (options.mode! !== GLTFPrimitiveMode.TRIANGLES) {\r\n      this.mode = options.mode\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    if (this.attribute.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.indices! < 0) {\r\n      return false\r\n    }\r\n    if (this.material! < 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFPrimitive","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFAnimationChannelTarget from \"./gltf-animation-channel-target\"\r\n\r\nclass GLTFAnimationChannel implements IValidate {\r\n  sampler: number\r\n  target: GLTFAnimationChannelTarget\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate = () => this.target.validate()\r\n}\r\n\r\nexport default GLTFAnimationChannel","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport GLTFAnimationChannelTargetPath from \"./enum/gltf-animation-channel-target-path\"\r\n\r\nclass GLTFAnimationChannelTarget implements IValidate {\r\n  node?: number\r\n  path: GLTFAnimationChannelTargetPath\r\n  extensions: Set<GLTFExtensionBase> = new Set\r\n\r\n  validate = () => true\r\n}\r\n\r\nexport default GLTFAnimationChannelTarget","import GLTFAnimationInterpolation from \"./enum/gltf-animation-interpolation\"\r\n\r\nclass GLTFAnimationSampler {\r\n  input: number\r\n  interpolation?: GLTFAnimationInterpolation\r\n  output: number\r\n}\r\n\r\nexport default GLTFAnimationSampler","import IValidate from \"../../../typings/IValidate\"\r\nimport GLTFAccessorSparseIndices from \"./gltf-accessor-sparse-indices\"\r\nimport GLTFAccessorSparseValues from \"./gltf-accessor-sparse-values\"\r\n\r\nclass GLTFAccessorSparse implements IValidate {\r\n  count: number\r\n  indices: GLTFAccessorSparseIndices\r\n  values: GLTFAccessorSparseValues\r\n\r\n  validate() {\r\n    return this.values.validate() && this.indices.validate()\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparse","enum GLTFComponentType {\r\n  BYTE = 5120,\r\n  UNSIGNED_BYTE = 5121,\r\n  SHORT = 5122,\r\n  UNSIGNED_SHORT = 5123,\r\n  UNSIGNED_INT = 5125,\r\n  FLOAT = 5126\r\n}\r\n\r\nexport const getComponentTypeByteSize = (t: GLTFComponentType): number => {\r\n  switch (t) {\r\n    case GLTFComponentType.BYTE:\r\n    case GLTFComponentType.UNSIGNED_BYTE:\r\n      return 1\r\n    case GLTFComponentType.SHORT:\r\n    case GLTFComponentType.UNSIGNED_SHORT:\r\n      return 2\r\n    case GLTFComponentType.UNSIGNED_INT:\r\n      return 4\r\n    default: // means FLOAT\r\n      return 8\r\n  }\r\n}\r\n\r\nexport default GLTFComponentType","enum GLTFFilter {\r\n  NEAREST = 9728,\r\n  LINEAR = 9729,\r\n  NEAREST_MIPMAP_NEAREST = 9984,\r\n  LINEAR_MIPMAP_NEAREST = 9985,\r\n  NEAREST_MIPMAP_LINEAR = 9986,\r\n  LINEAR_MIPMAP_LINEAR = 9987\r\n}\r\n\r\nexport default GLTFFilter","enum GLTFWrapMode {\r\n  REPEAT = 10497,\r\n  CLAMP_TO_EDGE = 33071,\r\n  MIRRORED_REPEAT = 33648,\r\n}\r\n\r\nexport default GLTFWrapMode","enum MIME {\r\n  JPG = \"image/jpg\",\r\n  JPEG = \"image/jpeg\",\r\n  PNG = \"image/png\",\r\n  WEBP = \"image/webp\",\r\n}\r\n\r\nexport default MIME","import IValidate from \"../../../typings/IValidate\"\r\nimport { GLTFExtensionBase } from \"../../ext\"\r\nimport { GLTFComponentType } from \"./enum\"\r\n\r\nclass GLTFAccessorSparseIndices implements IValidate {\r\n  bufferView: number\r\n  byteOffset: number\r\n  componentType: GLTFComponentType\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (\r\n      this.componentType !== GLTFComponentType.UNSIGNED_BYTE &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_INT &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_SHORT\r\n    ) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseIndices","import IValidate from \"../../../typings/IValidate\";\r\nimport { GLTFExtensionBase } from \"../../ext\";\r\n\r\nclass GLTFAccessorSparseValues implements IValidate {\r\n  bufferView: number\r\n  byteOffset?: number\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    return !(this.byteOffset! < 0)\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseValues","import IValidate from \"../../../typings/IValidate\";\r\n\r\nclass GLTFTextureInfo implements IValidate {\r\n  index: number\r\n  texCoord: number\r\n\r\n  constructor(index: number, texCoord: number) {\r\n    this.index = index\r\n    this.texCoord = texCoord\r\n  }\r\n\r\n  validate() {\r\n    return (this.index < 0 || this.texCoord < 0)\r\n  }\r\n}\r\n\r\nexport default GLTFTextureInfo","import IValidate from \"../../../typings/IValidate\";\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\";\r\nimport GLTFTextureInfo from \"./gltf-texture-info\";\r\n\r\nclass GLTFNormalTextureInfo \r\nextends GLTFTextureInfo \r\nimplements IValidate {\r\n  scale: number\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(index: number, texCoord: number, scale: number) {\r\n    super(index, texCoord)\r\n    this.scale = scale\r\n  }\r\n}\r\n\r\nexport default GLTFNormalTextureInfo","import IValidate from \"../../../typings/IValidate\";\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\";\r\nimport GLTFTextureInfo from \"./gltf-texture-info\";\r\n\r\nclass GLTFOcclusionTextureInfo \r\nextends GLTFTextureInfo \r\nimplements IValidate {\r\n  strength: number\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  constructor(index: number, texCoord: number, strength: number) {\r\n    super(index, texCoord)\r\n    this.strength = strength\r\n  }\r\n\r\n  validate() {\r\n    return (this.strength > 1 || this.strength < 0)\r\n  }\r\n}\r\n\r\nexport default GLTFOcclusionTextureInfo","import IValidate from \"../../../typings/IValidate\";\r\nimport GLTFExtensionBase from \"../../ext/gltf-extension-base\";\r\nimport GLTFTextureInfo from \"./gltf-texture-info\";\r\n\r\nclass GLTFPbr implements IValidate {\r\n  baseColorFactor?: number[]\r\n  baseColorTexture?: GLTFTextureInfo\r\n  metallicFactor?: number\r\n  roughnessFactor?: number\r\n  metallicRoughnessTexture?: GLTFTextureInfo\r\n  extensions: Set<GLTFExtensionBase> = new Set()\r\n\r\n  validate() {\r\n    if (this.baseColorFactor!.length !== 4 || this.baseColorFactor!.every(v => v < 0 || v > 1)) {\r\n      return false\r\n    }\r\n    if (this.roughnessFactor! > 1 || this.roughnessFactor! < 0) {\r\n      return false\r\n    }\r\n    if (this.metallicFactor! > 1 || this.metallicFactor! < 0) {\r\n      return false\r\n    }\r\n    if (this.baseColorTexture!.validate() === false || this.metallicRoughnessTexture!.validate() === false) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFPbr","import IGLTFPerspectiveCameraConstructionParam from \"../../../typings/IGLTFPerspectiveCameraConstructionParam\";\r\nimport IValidate from \"../../../typings/IValidate\";\r\n\r\nclass GLTFPerspectiveCamera implements IValidate {\r\n  yfov: number\r\n  znear: number\r\n  zfar?: number\r\n  aspectRatio?: number\r\n\r\n  constructor(options: IGLTFPerspectiveCameraConstructionParam) {\r\n    this.yfov = options.yfov\r\n    this.znear = options.znear\r\n    this.zfar = options.zfar\r\n    this.aspectRatio = options.aspectRatio\r\n  }\r\n\r\n  /**\r\n   * @todo \r\n   */\r\n  validate() {\r\n    return false\r\n  }\r\n}\r\n\r\nexport default GLTFPerspectiveCamera","import IGLTFOrthographicCameraConstructionParam from '../../../typings/IGLTFOrthographicCameraConstructionParam'\r\n\r\nclass GLTFOrthographicCamera {\r\n  xmag: number\r\n  ymag: number\r\n  zfar: number\r\n  znear: number\r\n\r\n  constructor(options: IGLTFOrthographicCameraConstructionParam) {\r\n    this.xmag = options.xmag\r\n    this.ymag = options.ymag\r\n    this.zfar = options.zfar\r\n    this.znear = options.znear\r\n  }\r\n}\r\n\r\nexport default GLTFOrthographicCamera","import {\r\n  GLTFAsset,\r\n  GLTFBuffer,\r\n  GLTFBufferView,\r\n  GLTFAccessor,\r\n  GLTFScene,\r\n  GLTFNode,\r\n  GLTFMesh,\r\n  GLTFMaterial,\r\n  GLTFImage,\r\n  GLTFTexture,\r\n  GLTFSampler,\r\n} from './def'\r\n\r\nclass GLTFDocument {\r\n  asset: GLTFAsset = new GLTFAsset()\r\n  scene: number = 0\r\n\r\n  buffers: GLTFBuffer[] = []\r\n  bufferViews: GLTFBufferView[] = []\r\n  accessors: GLTFAccessor[] = []\r\n\r\n  scenes: GLTFScene[] = []\r\n  nodes: GLTFNode[] = []\r\n  meshes: GLTFMesh[] = []\r\n  \r\n  materials: GLTFMaterial[] = []\r\n  textures: GLTFTexture[] = []\r\n  images: GLTFImage[] = []\r\n  samplers: GLTFSampler[] = []\r\n}\r\n\r\nexport default GLTFDocument","import IValidate from \"../../typings/IValidate\"\r\n\r\nclass GLTFExtensionBase implements IValidate {\r\n  get isRequire() {\r\n    return false\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFExtensionBase","import GLTFPrimitiveAttribute from \"../core/def/gltf-primitive-attribute\";\r\nimport GLTFExtensionBase from \"./gltf-extension-base\";\r\n\r\nclass ExtDraco extends GLTFExtensionBase {\r\n  readonly name = \"KHR_draco_mesh_compression\"\r\n  bufferView: number\r\n  attributes: GLTFPrimitiveAttribute\r\n\r\n  get isRequire() {\r\n    return true\r\n  }\r\n\r\n  constructor(options: {\r\n    bufferView: number,\r\n    attributes: GLTFPrimitiveAttribute\r\n  }) {\r\n    super()\r\n    this.bufferView = options.bufferView\r\n    this.attributes = options.attributes\r\n  }\r\n\r\n  validate() {\r\n    return Number.isInteger(this.bufferView)\r\n  }\r\n}\r\n\r\nexport default ExtDraco","import GLTFTextureInfo from \"../core/def/gltf-texture-info\";\r\nimport GLTFExtensionBase from \"./gltf-extension-base\";\r\n\r\nclass ExtPbrSpecularGlossiness extends GLTFExtensionBase {\r\n  readonly name = \"KHR_materials_pbrSpecularGlossiness\"\r\n  diffuseFactor?: number[]\r\n  specularFactor?: number[]\r\n  glossinessFactor?: number\r\n  diffuseTexture?: GLTFTextureInfo\r\n  specularGlossinessTexture?: GLTFTextureInfo\r\n\r\n  get isRequire() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default ExtPbrSpecularGlossiness","import { GLTFDocument } from \"../..\";\r\n\r\nclass GLTFWriteAction {\r\n  doc?: GLTFDocument\r\n  constructor() {\r\n    this.doc = undefined\r\n  }\r\n\r\n  setDocument(d: GLTFDocument) {\r\n    // if (d.validate()) {\r\n    //   this.doc = d\r\n    // }\r\n    this.doc = d\r\n  }\r\n\r\n  write(resultPath: string) {\r\n    console.log(resultPath)\r\n    return this.doc\r\n  }\r\n}\r\n\r\nexport default GLTFWriteAction","class GLTFReadAction {\r\n  constructor() {\r\n    \r\n  }\r\n\r\n  read(callback: () => void) {\r\n    callback()\r\n  }\r\n}\r\n\r\nexport default GLTFReadAction","class TilesetExtBase {\r\n  \r\n}\r\n\r\nexport default TilesetExtBase","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtBatchtableHierarchy extends TilesetExtBase {\r\n  readonly name = \"3DTILES_batch_table_hierarchy\"\r\n\r\n  load() {\r\n    \r\n  }\r\n}\r\n\r\nexport default ExtBatchtableHierarchy","import TilesetExtBase from \"./ext-base\";\r\n\r\nclass ExtPntsDraco extends TilesetExtBase {\r\n  readonly name = \"3DTILES_draco_point_compression\"\r\n}\r\n\r\nexport default ExtPntsDraco","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtContentGLTF extends TilesetExtBase {\r\n  readonly name = \"3DTILES_content_gltf\"\r\n}\r\n\r\nexport default ExtContentGLTF","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtImplicitTiling extends TilesetExtBase {\r\n  readonly name = \"3DTILES_implicit_tiling\"\r\n}\r\n\r\nexport default ExtImplicitTiling","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtLayers extends TilesetExtBase {\r\n  readonly name = \"3DTILES_layers\"\r\n}\r\n\r\nexport default ExtLayers","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMetadata extends TilesetExtBase {\r\n  readonly name = \"3DTILES_metadata\"\r\n}\r\n\r\nexport default ExtMetadata","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMultipleContent extends TilesetExtBase {\r\n  readonly name = \"3DTILES_multiple_contents\"\r\n}\r\n\r\nexport default ExtMultipleContent","import IValidate from \"../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileRefine from \"./enum/tile-refine\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\nimport TileContent from \"./tile-content\"\r\n\r\nclass Tile implements IValidate {\r\n  boundingVolume: TileBoundingVolume\r\n  geometricError: number\r\n  viewerRequestVolume?: TileBoundingVolume\r\n  refine?: TileRefine\r\n  content?: TileContent\r\n  transform?: number[] = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] // wait to def as Mat4\r\n  children?: Tile[]\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  toJson() {\r\n    if (!this.validate()) {\r\n      throw new Error('[Tile toJson()] 验证此对象失败！')\r\n    }\r\n    const obj = {}\r\n    if (this.transform !== undefined) {\r\n      Object.defineProperty(obj, 'transform', {\r\n        value: this.transform\r\n      })\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default Tile","import ITilesetConstructionParam from \"../../../typings/tileset/ITilesetConstructionParam\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport Asset from \"./asset\"\r\nimport Property from \"./property\"\r\nimport Tile from \"./tile\"\r\n\r\nclass Tileset {\r\n  asset: Asset\r\n  root: Tile\r\n  geometricError: number\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n  extensionsUsed?: string[] = []\r\n  extensionsRequired?: string[] = []\r\n  properties?: Map<any, Property>\r\n\r\n  constructor(options: ITilesetConstructionParam) {\r\n    this.root = options.root\r\n    this.geometricError = options.geometricError\r\n    this.uri = options.uri\r\n  }\r\n\r\n  /**\r\n   * @deprecated `Tileset.url` 已废弃，请使用 `Tileset.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n  set url(value: string) {\r\n    this.uri = value\r\n  }\r\n}\r\n\r\nexport default Tileset","import IValidate from \"../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass TileBoundingVolume implements IValidate {\r\n  box?: number[]\r\n  region?: number[]\r\n  sphere?: number[]\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  validate() {\r\n    const boxExist = this.box === undefined ? 1 : 0\r\n    const regionExist = this.region === undefined ? 1 : 0\r\n    const sphereExist = this.sphere === undefined ? 1 : 0\r\n    // === 3 意思是三个都不存在\r\n    // === 2 意思是存在 1 个\r\n    // === 1 意思是存在 2 个\r\n    // === 0 意思是存在 3 个\r\n    if (boxExist + regionExist + sphereExist !== 2) {\r\n      return false\r\n    }\r\n\r\n    if ((<number[]>this.box).length != 12)\r\n      return false\r\n    if ((<number[]>this.region).length != 6)\r\n      return false\r\n    if ((<number[]>this.sphere).length != 4)\r\n      return false\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileBoundingVolume","import IValidate from \"../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\n// import * as URI from 'uri-js'\r\n\r\nclass TileContent implements IValidate {\r\n  boundingVolume?: TileBoundingVolume\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n\r\n  /**\r\n   * @deprecated `TileContent.url` 已废弃，请使用 `TileContent.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileContent","import TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass Property {\r\n  maximum: number\r\n  minimum: number\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n}\r\n\r\nexport default Property","import IValidate from \"../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass Asset implements IValidate {\r\n  version: string\r\n  tilesetVersion?: string\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default Asset","import IValidate from \"../../../typings/IValidate\";\r\n\r\nclass TileHeaderBase implements IValidate {\r\n  magic: string\r\n  version: number\r\n  byteLength: number\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileHeaderBase","import TileHeaderBase from \"../tile-header-base\";\r\n\r\nclass B3dmHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default B3dmHeader","/*\n * Copyright 2017 Sam Thorogood. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n(function(scope) {\n  'use strict';\n\n  // fail early\n  if (scope['TextEncoder'] && scope['TextDecoder']) {\n    return false;\n  }\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   */\n  function FastTextEncoder(utfLabel = 'utf-8') {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextEncoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextEncoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  /**\n   * @param {string} string\n   * @param {{stream: boolean}=} options\n   * @return {!Uint8Array}\n   */\n  FastTextEncoder.prototype.encode = function(\n    string,\n    options = { stream: false },\n  ) {\n    if (options.stream) {\n      throw new Error(`Failed to encode: the 'stream' option is unsupported.`);\n    }\n\n    let pos = 0;\n    const len = string.length;\n    const out = [];\n\n    let at = 0; // output position\n    let tlen = Math.max(32, len + (len >> 1) + 7); // 1.5x size\n    let target = new Uint8Array((tlen >> 3) << 3); // ... but at 8 byte offset\n\n    while (pos < len) {\n      let value = string.charCodeAt(pos++);\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < len) {\n          const extra = string.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n        if (value >= 0xd800 && value <= 0xdbff) {\n          continue; // drop lone surrogate\n        }\n      }\n\n      // expand the buffer if we couldn't write 4 bytes\n      if (at + 4 > target.length) {\n        tlen += 8; // minimum extra\n        tlen *= 1.0 + (pos / string.length) * 2; // take 2x the remaining\n        tlen = (tlen >> 3) << 3; // 8 byte offset\n\n        const update = new Uint8Array(tlen);\n        update.set(target);\n        target = update;\n      }\n\n      if ((value & 0xffffff80) === 0) {\n        // 1-byte\n        target[at++] = value; // ASCII\n        continue;\n      } else if ((value & 0xfffff800) === 0) {\n        // 2-byte\n        target[at++] = ((value >> 6) & 0x1f) | 0xc0;\n      } else if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        target[at++] = ((value >> 12) & 0x0f) | 0xe0;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else if ((value & 0xffe00000) === 0) {\n        // 4-byte\n        target[at++] = ((value >> 18) & 0x07) | 0xf0;\n        target[at++] = ((value >> 12) & 0x3f) | 0x80;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // FIXME: do we care\n        continue;\n      }\n\n      target[at++] = (value & 0x3f) | 0x80;\n    }\n\n    return target.slice(0, at);\n  };\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   * @param {{fatal: boolean}=} options\n   */\n  function FastTextDecoder(utfLabel = 'utf-8', options = { fatal: false }) {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextDecoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n    if (options.fatal) {\n      throw new Error(\n        `Failed to construct 'TextDecoder': the 'fatal' option is unsupported.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextDecoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'fatal', { value: false });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'ignoreBOM', {\n    value: false,\n  });\n\n  /**\n   * @param {(!ArrayBuffer|!ArrayBufferView)} buffer\n   * @param {{stream: boolean}=} options\n   */\n  FastTextDecoder.prototype.decode = function(\n    buffer,\n    options = { stream: false },\n  ) {\n    if (options['stream']) {\n      throw new Error(`Failed to decode: the 'stream' option is unsupported.`);\n    }\n\n    const bytes = new Uint8Array(buffer);\n    let pos = 0;\n    const len = bytes.length;\n    const out = [];\n\n    while (pos < len) {\n      const byte1 = bytes[pos++];\n      if (byte1 === 0) {\n        break; // NULL\n      }\n\n      if ((byte1 & 0x80) === 0) {\n        // 1-byte\n        out.push(byte1);\n      } else if ((byte1 & 0xe0) === 0xc0) {\n        // 2-byte\n        const byte2 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 6) | byte2);\n      } else if ((byte1 & 0xf0) === 0xe0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n      } else if ((byte1 & 0xf8) === 0xf0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        const byte4 = bytes[pos++] & 0x3f;\n\n        // this can be > 0xffff, so possibly generate surrogates\n        let codepoint =\n          ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n        if (codepoint > 0xffff) {\n          // codepoint &= ~0x10000;\n          codepoint -= 0x10000;\n          out.push(((codepoint >>> 10) & 0x3ff) | 0xd800);\n          codepoint = 0xdc00 | (codepoint & 0x3ff);\n        }\n        out.push(codepoint);\n      } else {\n        // FIXME: we're ignoring this\n      }\n    }\n\n    return String.fromCharCode.apply(null, out);\n  };\n\n  scope['TextEncoder'] = FastTextEncoder;\n  scope['TextDecoder'] = FastTextDecoder;\n})(\n  typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : this,\n);\n","// eslint-disable-next-line import/no-unassigned-import\nimport './text-encoding-polyfill';\n\nconst decoder = new TextDecoder('utf-8');\n\nexport function decode(bytes: Uint8Array): string {\n  return decoder.decode(bytes);\n}\n\nconst encoder = new TextEncoder();\n\nexport function encode(str: string): Uint8Array {\n  return encoder.encode(str);\n}\n","import { decode, encode } from './utf8';\n\nconst defaultByteLength = 1024 * 8;\n\ntype InputData = number | ArrayBufferLike | ArrayBufferView | IOBuffer | Buffer;\n\ninterface IOBufferOptions {\n  /**\n   * Ignore the first n bytes of the ArrayBuffer.\n   */\n  offset?: number;\n}\n\nexport class IOBuffer {\n  /**\n   * Reference to the internal ArrayBuffer object.\n   */\n  public buffer: ArrayBufferLike;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public byteLength: number;\n\n  /**\n   * Byte offset of the internal ArrayBuffer.\n   */\n  public byteOffset: number;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public length: number;\n\n  /**\n   * The current offset of the buffer's pointer.\n   */\n  public offset: number;\n\n  private lastWrittenByte: number;\n  private littleEndian: boolean;\n\n  private _data: DataView;\n  private _mark: number;\n  private _marks: number[];\n\n  /**\n   * @param data - The data to construct the IOBuffer with.\n   * If data is a number, it will be the new buffer's length<br>\n   * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>\n   * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,\n   * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.\n   * @param options\n   */\n  public constructor(\n    data: InputData = defaultByteLength,\n    options: IOBufferOptions = {},\n  ) {\n    let dataIsGiven = false;\n    if (typeof data === 'number') {\n      data = new ArrayBuffer(data);\n    } else {\n      dataIsGiven = true;\n      this.lastWrittenByte = data.byteLength;\n    }\n\n    const offset = options.offset ? options.offset >>> 0 : 0;\n    const byteLength = data.byteLength - offset;\n    let dvOffset = offset;\n    if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\n      if (data.byteLength !== data.buffer.byteLength) {\n        dvOffset = data.byteOffset + offset;\n      }\n      data = data.buffer;\n    }\n    if (dataIsGiven) {\n      this.lastWrittenByte = byteLength;\n    } else {\n      this.lastWrittenByte = 0;\n    }\n    this.buffer = data;\n    this.length = byteLength;\n    this.byteLength = byteLength;\n    this.byteOffset = dvOffset;\n    this.offset = 0;\n    this.littleEndian = true;\n    this._data = new DataView(this.buffer, dvOffset, byteLength);\n    this._mark = 0;\n    this._marks = [];\n  }\n\n  /**\n   * Checks if the memory allocated to the buffer is sufficient to store more\n   * bytes after the offset.\n   * @param byteLength - The needed memory in bytes.\n   * @returns `true` if there is sufficient space and `false` otherwise.\n   */\n  public available(byteLength = 1): boolean {\n    return this.offset + byteLength <= this.length;\n  }\n\n  /**\n   * Check if little-endian mode is used for reading and writing multi-byte\n   * values.\n   * @returns `true` if little-endian mode is used, `false` otherwise.\n   */\n  public isLittleEndian(): boolean {\n    return this.littleEndian;\n  }\n\n  /**\n   * Set little-endian mode for reading and writing multi-byte values.\n   */\n  public setLittleEndian(): this {\n    this.littleEndian = true;\n    return this;\n  }\n\n  /**\n   * Check if big-endian mode is used for reading and writing multi-byte values.\n   * @returns `true` if big-endian mode is used, `false` otherwise.\n   */\n  public isBigEndian(): boolean {\n    return !this.littleEndian;\n  }\n\n  /**\n   * Switches to big-endian mode for reading and writing multi-byte values.\n   */\n  public setBigEndian(): this {\n    this.littleEndian = false;\n    return this;\n  }\n\n  /**\n   * Move the pointer n bytes forward.\n   * @param n - Number of bytes to skip.\n   */\n  public skip(n = 1): this {\n    this.offset += n;\n    return this;\n  }\n\n  /**\n   * Move the pointer to the given offset.\n   * @param offset\n   */\n  public seek(offset: number): this {\n    this.offset = offset;\n    return this;\n  }\n\n  /**\n   * Store the current pointer offset.\n   * @see {@link IOBuffer#reset}\n   */\n  public mark(): this {\n    this._mark = this.offset;\n    return this;\n  }\n\n  /**\n   * Move the pointer back to the last pointer offset set by mark.\n   * @see {@link IOBuffer#mark}\n   */\n  public reset(): this {\n    this.offset = this._mark;\n    return this;\n  }\n\n  /**\n   * Push the current pointer offset to the mark stack.\n   * @see {@link IOBuffer#popMark}\n   */\n  public pushMark(): this {\n    this._marks.push(this.offset);\n    return this;\n  }\n\n  /**\n   * Pop the last pointer offset from the mark stack, and set the current\n   * pointer offset to the popped value.\n   * @see {@link IOBuffer#pushMark}\n   */\n  public popMark(): this {\n    const offset = this._marks.pop();\n    if (offset === undefined) {\n      throw new Error('Mark stack empty');\n    }\n    this.seek(offset);\n    return this;\n  }\n\n  /**\n   * Move the pointer offset back to 0.\n   */\n  public rewind(): this {\n    this.offset = 0;\n    return this;\n  }\n\n  /**\n   * Make sure the buffer has sufficient memory to write a given byteLength at\n   * the current pointer offset.\n   * If the buffer's memory is insufficient, this method will create a new\n   * buffer (a copy) with a length that is twice (byteLength + current offset).\n   * @param byteLength\n   */\n  public ensureAvailable(byteLength = 1): this {\n    if (!this.available(byteLength)) {\n      const lengthNeeded = this.offset + byteLength;\n      const newLength = lengthNeeded * 2;\n      const newArray = new Uint8Array(newLength);\n      newArray.set(new Uint8Array(this.buffer));\n      this.buffer = newArray.buffer;\n      this.length = this.byteLength = newLength;\n      this._data = new DataView(this.buffer);\n    }\n    return this;\n  }\n\n  /**\n   * Read a byte and return false if the byte's value is 0, or true otherwise.\n   * Moves pointer forward by one byte.\n   */\n  public readBoolean(): boolean {\n    return this.readUint8() !== 0;\n  }\n\n  /**\n   * Read a signed 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readInt8(): number {\n    return this._data.getInt8(this.offset++);\n  }\n\n  /**\n   * Read an unsigned 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readUint8(): number {\n    return this._data.getUint8(this.offset++);\n  }\n\n  /**\n   * Alias for {@link IOBuffer#readUint8}.\n   */\n  public readByte(): number {\n    return this.readUint8();\n  }\n\n  /**\n   * Read `n` bytes and move pointer forward by `n` bytes.\n   */\n  public readBytes(n = 1): Uint8Array {\n    const bytes = new Uint8Array(n);\n    for (let i = 0; i < n; i++) {\n      bytes[i] = this.readByte();\n    }\n    return bytes;\n  }\n\n  /**\n   * Read a 16-bit signed integer and move pointer forward by 2 bytes.\n   */\n  public readInt16(): number {\n    const value = this._data.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.\n   */\n  public readUint16(): number {\n    const value = this._data.getUint16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit signed integer and move pointer forward by 4 bytes.\n   */\n  public readInt32(): number {\n    const value = this._data.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.\n   */\n  public readUint32(): number {\n    const value = this._data.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit floating number and move pointer forward by 4 bytes.\n   */\n  public readFloat32(): number {\n    const value = this._data.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 64-bit floating number and move pointer forward by 8 bytes.\n   */\n  public readFloat64(): number {\n    const value = this._data.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  /**\n   * Read a 1-byte ASCII character and move pointer forward by 1 byte.\n   */\n  public readChar(): string {\n    return String.fromCharCode(this.readInt8());\n  }\n\n  /**\n   * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.\n   */\n  public readChars(n = 1): string {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      result += this.readChar();\n    }\n    return result;\n  }\n\n  /**\n   * Read the next `n` bytes, return a UTF-8 decoded string and move pointer\n   * forward by `n` bytes.\n   */\n  public readUtf8(n = 1): string {\n    return decode(this.readBytes(n));\n  }\n\n  /**\n   * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer\n   * forward by 1 byte.\n   */\n  public writeBoolean(value: unknown): this {\n    this.writeUint8(value ? 0xff : 0x00);\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.\n   */\n  public writeInt8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setInt8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit unsigned integer and move pointer forward by 1\n   * byte.\n   */\n  public writeUint8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setUint8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * An alias for {@link IOBuffer#writeUint8}.\n   */\n  public writeByte(value: number): this {\n    return this.writeUint8(value);\n  }\n\n  /**\n   * Write all elements of `bytes` as uint8 values and move pointer forward by\n   * `bytes.length` bytes.\n   */\n  public writeBytes(bytes: ArrayLike<number>): this {\n    this.ensureAvailable(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      this._data.setUint8(this.offset++, bytes[i]);\n    }\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit signed integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeInt16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setInt16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit unsigned integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeUint16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setUint16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit signed integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeInt32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setInt32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit unsigned integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeUint32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setUint32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit floating number and move pointer forward by 4\n   * bytes.\n   */\n  public writeFloat32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setFloat32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 64-bit floating number and move pointer forward by 8\n   * bytes.\n   */\n  public writeFloat64(value: number): this {\n    this.ensureAvailable(8);\n    this._data.setFloat64(this.offset, value, this.littleEndian);\n    this.offset += 8;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write the charCode of `str`'s first character as an 8-bit unsigned integer\n   * and move pointer forward by 1 byte.\n   */\n  public writeChar(str: string): this {\n    return this.writeUint8(str.charCodeAt(0));\n  }\n\n  /**\n   * Write the charCodes of all `str`'s characters as 8-bit unsigned integers\n   * and move pointer forward by `str.length` bytes.\n   */\n  public writeChars(str: string): this {\n    for (let i = 0; i < str.length; i++) {\n      this.writeUint8(str.charCodeAt(i));\n    }\n    return this;\n  }\n\n  /**\n   * UTF-8 encode and write `str` to the current pointer offset and move pointer\n   * forward according to the encoded length.\n   */\n  public writeUtf8(str: string): this {\n    return this.writeBytes(encode(str));\n  }\n\n  /**\n   * Export a Uint8Array view of the internal buffer.\n   * The view starts at the byte offset and its length\n   * is calculated to stop at the last written byte or the original length.\n   */\n  public toArray(): Uint8Array {\n    return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\n  }\n\n  /**\n   * Update the last written byte offset\n   * @private\n   */\n  private _updateLastWrittenByte(): void {\n    if (this.offset > this.lastWrittenByte) {\n      this.lastWrittenByte = this.offset;\n    }\n  }\n}\n","enum FeatureTableType {\r\n  B3dm = \"b3dm\",\r\n  I3dm = \"i3dm\",\r\n  Pnts = \"pnts\",\r\n  Vctr = \"vctr\"\r\n}\r\n\r\nexport default FeatureTableType","enum TileRefine {\r\n  ADD = \"add\",\r\n  REPLACE = \"replace\"\r\n}\r\n\r\nexport default TileRefine","import IValidate from \"../../../../typings/IValidate\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\n\r\nclass FeatureTable implements IValidate {\r\n\r\n  _json: Object\r\n  _binary: Uint8Array\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  featureTableType: FeatureTableType\r\n\r\n  validate() {\r\n    return false // base class always return false.\r\n  }\r\n}\r\n\r\nexport default FeatureTable","import IValidate from \"../../../../typings/IValidate\"\r\nimport IB3dmFTJson from \"../../../../typings/tileset/IB3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateB3dmBatchTable(table: B3dmFeatureTable): boolean {\r\n  return table.batchLength === undefined ? false : true\r\n}\r\n\r\nfunction parse(table: B3dmFeatureTable) {\r\n  const json = table._json as IB3dmFTJson\r\n  table.batchLength = json['BATCH_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass B3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  batchLength: number\r\n  rtcCenter?: number[]\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new B3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.B3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateB3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default B3dmFeatureTable","import { IOBuffer } from \"iobuffer\"\r\nimport IValidate from \"../../../../typings/IValidate\"\r\nimport IBTBinaryRef from \"../../../../typings/tileset/IBTBinaryRef\"\r\nimport IBTJson, { BTJsonValue } from \"../../../../typings/tileset/IBTJson\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\n\r\n/*\r\n  batchtable\r\n    json: 它有可能是n个数组，每个数组的长度等于不同瓦片的 featureTableJSON.XXXLength，b3dm 是 BATCH_LENGTH，等等：\r\n            {\r\n              \"name\": ['name1', 'name2', 'name3'],\r\n              \"height\": [10, 20, 5]\r\n            }\r\n          也有可能是对二进制 batchtable binary 的引用定义，拥有 byteOffset、componentType、type 三个属性的对象\r\n            {\r\n              \"name\": {\r\n                byteOffset: 16, // 相对于 batchtable binary body 的偏移值\r\n                type: \"SCALAR\",\r\n                componentType: \"INT\"\r\n              }\r\n            }\r\n          所以，batchtable 有一个弱点，不能用 binary 存储文本数据，因为第二种情况只允许存储 scalar、vec2、vec3、vec4 四种数值类型\r\n          不过使用 byte + scalar 的方式或许可以存储字节信息。\r\n    binary: 根据 json 中第二种定义而存储数据\r\n\r\n  扩展：层级 batchtable：\r\n    \r\n */\r\n\r\nfunction parse(table: BatchTable) {\r\n  for (const k of Object.keys(table._json)) {\r\n    table.variables.set(k, table._json[k])\r\n  }\r\n}\r\n\r\nclass BatchTable implements IValidate {\r\n\r\n  _json: IBTJson\r\n  _binary: Uint8Array\r\n\r\n  variables: Map<string, BTJsonValue> = new Map()\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  static createFromJSON(json: IBTJson, binary: Uint8Array) {\r\n    const bt = new BatchTable()\r\n    bt._json = json\r\n    bt._binary = binary\r\n\r\n    parse(bt)\r\n\r\n    return bt\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get variableNames() {\r\n    return Object.keys(this._json)\r\n  }\r\n\r\n  get variableCounts() {\r\n    return this.variableNames.length\r\n  }\r\n\r\n  getVariable(name: string) {\r\n    if (this.variables.has(name)) {\r\n      const v = this.variables.get(name)\r\n      return v\r\n    }\r\n\r\n    throw new Error(`[BatchTable getVariable()] 没有这个值：${name}。`)\r\n  }\r\n}\r\n\r\nfunction timesOperator(fn: () => void, times: number) {\r\n  for (let i = 0; i < times; i++) fn()\r\n}\r\n\r\nfunction getTimes(type: string) {\r\n  return type === \"SCALAR\" ? 1 :\r\n  type === \"VEC2\" ? 2 :\r\n  type === \"VEC3\" ? 3 :\r\n  type === \"VEC4\" ? 4 : -1\r\n}\r\n\r\nfunction getReadFunction(io: IOBuffer, componentType: string) {\r\n  return componentType === \"BYTE\" ? io.readInt8 :\r\n  componentType === \"UNSIGNED_BYTE\" ? io.readUint8 :\r\n  componentType === \"SHORT\" ? io.readInt16 :\r\n  componentType === \"UNSIGNED_SHORT\" ? io.readUint16 : \r\n  componentType === \"INT\" ? io.readInt32:\r\n  componentType === \"UNSIGNED_INT\" ? io.readUint32 :\r\n  componentType === \"FLOAT\" ? io.readFloat32 : io.readFloat64\r\n}\r\n\r\n/**\r\n * 将 BatchTableBinary 读取并转换成普通的数字数组\r\n * @param {BatchTable} table BatchTable 实例\r\n * @param {IBTBinaryRef} variable 从 BatchTable JSON 中获取的引用描述对象，可使用 BatchTable.prototype.getVariable(name) 获取\r\n * @param {number} count FeatureTable 中的 XXXLength，即每个变量有多少个数据\r\n * @returns {number[]}\r\n */\r\nexport const parseBTBinary2Array = (table: BatchTable, variable: IBTBinaryRef, count: number) => {\r\n  let hasHierarchy = false\r\n  table.extensions?.forEach(ext => {\r\n    if ('name' in ext && ext['name'] === '3DTILES_batch_table_hierarchy') {\r\n      hasHierarchy = true\r\n    }\r\n  })\r\n  if (hasHierarchy) {\r\n    return\r\n  }\r\n\r\n  const io = new IOBuffer(table._binary.buffer)\r\n  io.skip(variable.byteOffset)\r\n  const result: number[] = []\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const readFunction = getReadFunction(io, variable.componentType)\r\n    timesOperator(() => result.push(readFunction()), getTimes(variable.type))\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default BatchTable","import { IOBuffer } from 'iobuffer'\r\n\r\nimport IValidate from \"../../../../typings/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport B3dmHeader from \"./header\"\r\nimport B3dmFeatureTable from '../featuretable/featuretable-b3dm'\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: B3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(b3dm: B3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(b3dm.header, iobuffer)\r\n\r\n  if (b3dm.byteLength % 8 != 0) {\r\n    throw new Error('[B3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(b3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(b3dm.featureTableBinaryByteLength)\r\n  b3dm.featureTable = B3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (b3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(b3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(b3dm.batchTableBinaryByteLength)\r\n    b3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass B3dm implements IValidate {\r\n  header: B3dmHeader\r\n  featureTable: B3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new B3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default B3dm","import IValidate from \"../../../../typings/IValidate\"\r\nimport TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass I3dmHeader extends TileHeaderBase implements IValidate {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  gltfFormat: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  validate() {\r\n    if (this.gltfFormat !== 0 && this.gltfFormat !== 1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default I3dmHeader","import IValidate from \"../../../../typings/IValidate\"\r\nimport IFTBinaryRef from \"../../../../typings/tileset/IFTBinaryRef\"\r\nimport II3dmFTJson from \"../../../../typings/tileset/II3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateI3dmBatchTable(table: I3dmFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.position !== undefined && table.positionQuantized !== undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  if (\r\n    (table.normalUp === undefined && table.normalRight !== undefined) ||\r\n    (table.normalRight === undefined && table.normalUp !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  if (\r\n    (table.normalUpOct32p === undefined && table.normalRightOct32p !== undefined) ||\r\n    (table.normalRightOct32p === undefined && table.normalUpOct32p !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: I3dmFeatureTable) {\r\n  const json = table._json as II3dmFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.normalUp = json['NORMAL_UP']\r\n  table.normalRight = json['NORMAL_RIGHT']\r\n  table.normalUpOct32p = json['NORMAL_UP_OCT32P']\r\n  table.normalRightOct32p = json['NORMAL_RIGHT_OCT32P']\r\n  table.scale = json['SCALE']\r\n  table.scaleNonUniform = json['SCALE_NON_UNIFORM']\r\n  table.instancesLength = json['INSTANCES_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass I3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  normalUp?: IFTBinaryRef\r\n  normalRight?: IFTBinaryRef\r\n  normalUpOct32p?: IFTBinaryRef\r\n  normalRightOct32p?: IFTBinaryRef\r\n  scale?: IFTBinaryRef\r\n  batchId?: IFTBinaryRef\r\n  scaleNonUniform?: IFTBinaryRef\r\n\r\n  instancesLength: number\r\n\r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  eastNorthUp?: boolean\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new I3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.I3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateI3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default I3dmFeatureTable","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../typings/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport I3dmFeatureTable from \"../featuretable/featuretable-i3dm\"\r\nimport I3dmHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: I3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n  header.gltfFormat = io.readUint32()\r\n}\r\n\r\nfunction parse(i3dm: I3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(i3dm.header, iobuffer)\r\n\r\n  if (i3dm.byteLength % 8 != 0) {\r\n    throw new Error('[I3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(32)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(i3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(i3dm.featureTableBinaryByteLength)\r\n  i3dm.featureTable = I3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (i3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(i3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(i3dm.batchTableBinaryByteLength)\r\n    i3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass I3dm implements IValidate {\r\n  header: I3dmHeader\r\n  featureTable: I3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  externalData: string | GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new I3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get gltfFormat() {\r\n    return this.header.gltfFormat\r\n  }\r\n\r\n  get sizeWithoutExternalData() {\r\n    return 32 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default I3dm","import TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass PntsHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  \r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default PntsHeader","import IValidate from \"../../../../typings/IValidate\"\r\nimport IFTBinaryRef from \"../../../../typings/tileset/IFTBinaryRef\"\r\nimport IPntsFTJson from \"../../../../typings/tileset/IPntsFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validatePntsFeatureTable(table: PntsFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.batchId !== undefined && table.batchLength === undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: PntsFeatureTable) {\r\n  const json = table._json as IPntsFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.rgba = json['RGBA']\r\n  table.rgb = json['RGB']\r\n  table.rgb565 = json['RGB565']\r\n  table.normal = json['NORMAL']\r\n  table.normalOct16p = json['NORMAL_OCT16P']\r\n  table.batchId = json['BATCH_ID']\r\n  table.pointsLength = json['POINTS_LENGTH']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n  table.constantRgba = json['CONSTANT_RGBA']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass PntsFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  rgba?: IFTBinaryRef\r\n  rgb?: IFTBinaryRef\r\n  rgb565?: IFTBinaryRef\r\n  normal?: IFTBinaryRef\r\n  normalOct16p?: IFTBinaryRef\r\n\r\n  pointsLength: number\r\n  \r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  constantRgba?: number[]\r\n  batchId?: any\r\n  batchLength?: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new PntsFeatureTable()\r\n    \r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.Pnts\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validatePntsFeatureTable(this)\r\n  }\r\n}\r\n\r\nexport default PntsFeatureTable","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../typings/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../..\"\r\nimport PntsFeatureTable from \"../featuretable/featuretable-pnts\"\r\nimport PntsHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: PntsHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(pnts: Pnts, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(pnts.header, iobuffer)\r\n\r\n  if (pnts.byteLength % 8 != 0) {\r\n    throw new Error('[Pnts 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(pnts.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(pnts.featureTableBinaryByteLength)\r\n  pnts.featureTable = PntsFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (pnts.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(pnts.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(pnts.batchTableBinaryByteLength)\r\n    pnts.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n}\r\n\r\nclass Pnts implements IValidate {\r\n  header: PntsHeader\r\n  featureTable: PntsFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new PntsHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default Pnts","class Cmpt {\r\n\r\n}\r\n\r\nexport default Cmpt"],"names":["GLTFVersion","GLTFAlphaMode","GLTFAsset","this","TWO","Set","GLTFAccessor","options","componentType","count","type","undefined","byteOffset","bufferView","GLTFBuffer","byteLength","GLTFBufferView","buffer","GLTFScene","nodes","length","GLTFNode","mesh","camera","scale","skin","matrix","translation","rotation","name","weights","flag","every","r","validateTransforms","children","GLTFMesh","primitives","primitive","validate","GLTFPrimitiveMode","GLTFMaterial","pbrMetallicRoughness","normalTexture","occlusionTexture","alphaMode","MASK","alphaCutoff","emissiveFactor","GLTFTexture","GLTFImage","uri","mimeType","GLTFSampler","GLTFAnimation","channels","samplers","GLTFCamera","orthographic","perspective","GLTFSkin","joints","GLTFAttributeType","GLTFPrimitiveAttribute","position","st1","normal","Object","values","k","GLTFPrimitive","attribute","indices","material","mode","TRIANGLES","GLTFAnimationChannel","target","GLTFAnimationChannelTarget","GLTFAnimationSampler","GLTFAccessorSparse","GLTFComponentType","GLTFFilter","GLTFWrapMode","MIME","GLTFAccessorSparseIndices","UNSIGNED_BYTE","UNSIGNED_INT","UNSIGNED_SHORT","GLTFAccessorSparseValues","GLTFTextureInfo","index","texCoord","GLTFNormalTextureInfo","super","GLTFOcclusionTextureInfo","strength","GLTFPbr","baseColorFactor","v","roughnessFactor","metallicFactor","baseColorTexture","metallicRoughnessTexture","GLTFPerspectiveCamera","yfov","znear","zfar","aspectRatio","GLTFOrthographicCamera","xmag","ymag","GLTFDocument","GLTFExtensionBase","ExtDraco","attributes","Number","isInteger","ExtPbrSpecularGlossiness","GLTFWriteAction","doc","d","resultPath","console","log","GLTFReadAction","callback","TilesetExtBase","ExtBatchtableHierarchy","ExtPntsDraco","ExtContentGLTF","ExtImplicitTiling","ExtLayers","ExtMetadata","ExtMultipleContent","Tile","Error","transform","defineProperty","value","Tileset","root","geometricError","TileBoundingVolume","box","region","sphere","TileContent","Property","Asset","TileHeaderBase","B3dmHeader","scope","FastTextEncoder","utfLabel","RangeError","FastTextDecoder","fatal","prototype","encode","string","stream","pos","extra","len","at","tlen","Math","max","Uint8Array","charCodeAt","update","set","slice","decode","bytes","out","byte1","push","byte2","byte3","codepoint","String","fromCharCode","apply","window","self","decoder","TextDecoder","exports","encoder","TextEncoder","str","IOBuffer","data","dataIsGiven","ArrayBuffer","lastWrittenByte","offset","dvOffset","isView","littleEndian","_data","DataView","_mark","_marks","n","pop","seek","available","newLength","newArray","readUint8","getInt8","getUint8","i","readByte","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","readInt8","result","readChar","utf8_1","readBytes","writeUint8","ensureAvailable","setInt8","_updateLastWrittenByte","setUint8","setInt16","setUint16","setInt32","setUint32","setFloat32","setFloat64","writeBytes","FeatureTableType","TileRefine","FeatureTable","validateB3dmBatchTable","table","batchLength","parse","json","_json","rtcCenter","extensions","extras","B3dmFeatureTable","binary","ft","_binary","featureTableType","B3dm","keys","variables","BatchTable","Map","bt","variableNames","has","get","parseHeader","header","io","rewind","magic","readChars","version","readUint32","featureTableJSONByteLength","featureTableBinaryByteLength","batchTableJSONByteLength","batchTableBinaryByteLength","b3dm","iobuffer","skip","ftJSON","JSON","ftBin","featureTable","createFromJSON","btJSON","btBin","batchTable","cacheBuffer","I3dmHeader","gltfFormat","validateI3dmBatchTable","positionQuantized","quantizedVolumeOffset","quantizedVolumeScale","normalUp","normalRight","normalUpOct32p","normalRightOct32p","scaleNonUniform","instancesLength","I3dmFeatureTable","I3dm","i3dm","PntsHeader","validatePntsFeatureTable","batchId","rgba","rgb","rgb565","normalOct16p","pointsLength","constantRgba","PntsFeatureTable","Pnts","pnts","Cmpt"],"mappings":"aAAA,IAAKA,mEAAL,SAAKA,GACHA,YACAA,YAFF,CAAKA,YAAAA,iBAKL,ICFKC,4BDEUD,kBEDTE,wBACJC,aAAuBH,cAAYI,IAInCD,gBAAqC,IAAIE,IAEzCF,cAAW,KAAM,SCNbG,yBAcQC,GAFZJ,gBAAqC,IAAIE,IAOvCF,KAAKK,cAAgBD,EAAQC,cAC7BL,KAAKM,MAAQF,EAAQE,MACrBN,KAAKO,KAAOH,EAAQG,gBAKpB,YAAwBC,IAApBR,KAAKS,iBAAgDD,IAApBR,KAAKU,kBC5BxCC,yBACJX,gBAAqB,EAIrBA,gBAAqC,IAAIE,eAGvC,QAAIF,KAAKY,WAAa,UCRpBC,6BACJb,YAAiB,EACjBA,gBAAqB,EACrBA,gBAAsB,EACtBA,gBAAqC,IAAIE,eAGvC,QAAIF,KAAKc,OAAS,OAGdd,KAAKY,WAAa,MAGlBZ,KAAKS,WAAc,WCbrBM,wBACJf,WAAkB,GAElBA,gBAAqC,IAAIE,eAGvC,OAAQF,KAAKgB,MAAMC,OAAS,SCN1BC,qBAaQd,GAZZJ,cAAqB,GAUrBA,gBAAqC,IAAIE,IAcvCF,KAAKmB,KAAOf,EAAQe,KACpBnB,KAAKoB,OAAShB,EAAQgB,OACtBpB,KAAKqB,MAAQjB,EAAQiB,MACrBrB,KAAKsB,KAAOlB,EAAQkB,KACpBtB,KAAKuB,OAASnB,EAAQmB,OACtBvB,KAAKwB,YAAcpB,EAAQoB,YAC3BxB,KAAKyB,SAAWrB,EAAQqB,SACxBzB,KAAK0B,KAAOtB,EAAQsB,KACpB1B,KAAK2B,QAAUvB,EAAQuB,6BAIvB,IAAIC,GAAO,EAsBX,YArBoBpB,IAAhBR,KAAKuB,cACef,IAAlBR,KAAKyB,eAAyCjB,IAAfR,KAAKqB,YAA4Cb,IAArBR,KAAKwB,cAClEI,GAAO,IAGiB,KAAxB5B,KAAKuB,OAAQN,SACfW,GAAO,GAEkB,IAAvB5B,KAAKqB,MAAOJ,SACdW,GAAO,GAEwB,IAA7B5B,KAAKwB,YAAaP,SACpBW,GAAO,GAIPA,EAD4B,IAA1B5B,KAAKyB,SAAUR,QAGVjB,KAAKyB,SAAUI,MAAMC,GAAS,EAAJA,GAASA,GAAK,GAG1CF,aAIP,OAAI5B,KAAK+B,yBAGL/B,KAAK2B,QAASV,OAAS,WAECT,IAAjBR,KAAK2B,cAAuCnB,IAAdR,KAAKmB,cAG5BX,IAAdR,KAAKsB,WAAoCd,IAAdR,KAAKmB,SAIhCnB,KAAKgC,SAAUf,OAAS,aC1E1BgB,uBACJjC,gBAA8B,GAG9BA,gBAAqC,IAAIE,eAGvC,IAAI0B,GAAO,EAIX,OAHI5B,KAAKkC,WAAWL,MAAMM,GAAaA,EAAUC,cAC/CR,GAAO,GAEFA,IPZX,SAAK9B,GAIHA,kBAIAA,cAIAA,gBAZF,CAAKA,cAAAA,mBAeL,IQlBKuC,kCRkBUvC,oBSVTwC,2BASJtC,gBAAqC,IAAIE,eAGvC,OAA8C,IAA1CF,KAAKuC,qBAAsBH,cAGQ,IAAnCpC,KAAKwC,cAAeJ,cAGkB,IAAtCpC,KAAKyC,iBAAkBL,cAGvBpC,KAAK0C,YAAc5C,gBAAc6C,WAA6BnC,IAArBR,KAAK4C,cAGd,IAAhC5C,KAAK6C,eAAgB5B,iBC7BvB6B,0BAIJ9C,gBAAqC,IAAIE,IAEzCF,cAAW,KAAM,SCLb+C,wBAKJ/C,gBAAqC,IAAIE,eAGvC,YAAiBM,IAAbR,KAAKgD,UAAyCxC,IAApBR,KAAKU,mBAGXF,IAApBR,KAAKU,iBACeF,IAAlBR,KAAKiD,iBCXTC,0BAMJlD,gBAAqC,IAAIE,IAEzCF,cAAW,KAAM,SCRbmD,4BAIJnD,gBAAqC,IAAIE,eAGvC,QAAIF,KAAKoD,SAAUnC,OAAS,GAAKjB,KAAKqD,SAAUpC,OAAS,UCNvDqC,uBAOQlD,GAFZJ,gBAAqC,IAAIE,IAQvCF,KAAKuD,aAAenD,EAAQmD,aAC5BvD,KAAKwD,YAAcpD,EAAQoD,YAC3BxD,KAAKO,KAAOH,EAAQG,KACpBP,KAAK0B,KAAOtB,EAAQsB,gBAIpB,YAA0BlB,IAAtBR,KAAKuD,mBAAmD/C,IAArBR,KAAKwD,mBCvB1CC,uBAKJzD,gBAAsC,IAAIE,eAIxC,QAASF,KAAK0D,OAAOzC,OAAS,KPZlC,SAAKoB,GACHA,uBACAA,qBACAA,6BACAA,+BACAA,6BACAA,uCACAA,mCAPF,CAAKA,kBAAAA,uBAUL,IQVKsB,sCRUUtB,wBSRTuB,mCAKQxD,GAKVJ,KAAK6D,SAAWzD,EAAQyD,SACxB7D,KAAK8D,IAAM1D,EAAQ0D,IACnB9D,KAAK+D,OAAS3D,EAAQ2D,kBAItB,OAAOC,OAAOC,OAAOjE,MAAM6B,MAAMqC,GAAKA,EAAK,UCbzCC,0BAOQ/D,GAFZJ,gBAAqC,IAAIE,IAWvCF,KAAKoE,UAAY,IAAIR,uBAAuB,CAC1CC,SAAUzD,EAAQgE,UAAUP,SAC5BC,IAAK1D,EAAQgE,UAAe,IAC5BL,OAAQ3D,EAAQgE,UAAkB,SAEpCpE,KAAKqE,QAAUjE,EAAQiE,QACvBrE,KAAKsE,SAAWlE,EAAQkE,SACpBlE,EAAQmE,OAAUlC,oBAAkBmC,YACtCxE,KAAKuE,KAAOnE,EAAQmE,iBAKtB,OAAkC,IAA9BvE,KAAKoE,UAAUhC,eAGfpC,KAAKqE,QAAW,MAGhBrE,KAAKsE,SAAY,WCpCnBG,mCAGJzE,gBAAqC,IAAIE,IAEzCF,cAAW,IAAMA,KAAK0E,OAAOtC,kBCLzBuC,yCAGJ3E,gBAAqC,IAAIE,IAEzCF,cAAW,KAAM,SCPb4E,4BCEAC,8BAMF,OAAO7E,KAAKiE,OAAO7B,YAAcpC,KAAKqE,QAAQjC,aNVlD,SAAKuB,GACHA,kBACAA,cACAA,cACAA,cACAA,cACAA,cACAA,cAPF,CAAKA,kBAAAA,uBA4BL,IO5BKmB,sCP4BUnB,mBO5Bf,SAAKmB,GACHA,sBACAA,wCACAA,wBACAA,0CACAA,sCACAA,wBANF,CAAKA,kBAAAA,uBAwBL,ICxBKC,+BDwBUD,mBCxBf,SAAKC,GACHA,4BACAA,0BACAA,0DACAA,wDACAA,wDACAA,sDANF,CAAKA,WAAAA,gBASL,ICTKC,0BDSUD,YCTf,SAAKC,GACHA,2BACAA,yCACAA,6CAHF,CAAKA,aAAAA,kBAML,ICNKC,oBDMUD,cCNf,SAAKC,GACHA,kBACAA,oBACAA,kBACAA,oBAJF,CAAKA,KAAAA,UAOL,WAAeA,WCHTC,wCAIJlF,gBAAqC,IAAIE,eAGvC,OACEF,KAAKK,gBAAkByE,oBAAkBK,eACzCnF,KAAKK,gBAAkByE,oBAAkBM,cACzCpF,KAAKK,gBAAkByE,oBAAkBO,sBCXzCC,uCAGJtF,gBAAqC,IAAIE,eAGvC,QAASF,KAAKS,WAAc,UCP1B8E,4BAIQC,EAAeC,GACzBzF,KAAKwF,MAAQA,EACbxF,KAAKyF,SAAWA,aAIhB,OAAQzF,KAAKwF,MAAQ,GAAKxF,KAAKyF,SAAW,SCRxCC,8BACEH,4BAKMC,EAAeC,EAAkBpE,GAC3CsE,MAAMH,EAAOC,GAHfzF,gBAAqC,IAAIE,IAIvCF,KAAKqB,MAAQA,SCRXuE,iCACEL,4BAKMC,EAAeC,EAAkBI,GAC3CF,MAAMH,EAAOC,GAHfzF,gBAAqC,IAAIE,IAIvCF,KAAK6F,SAAWA,aAIhB,OAAwB,EAAhB7F,KAAK6F,UAAgB7F,KAAK6F,SAAW,SCZ3CC,sBAMJ9F,gBAAqC,IAAIE,eAGvC,OAAqC,IAAjCF,KAAK+F,gBAAiB9E,SAAgBjB,KAAK+F,gBAAiBlE,MAAMmE,GAAKA,EAAI,GAAS,EAAJA,OAGxD,EAAxBhG,KAAKiG,iBAAwBjG,KAAKiG,gBAAmB,OAG9B,EAAvBjG,KAAKkG,gBAAuBlG,KAAKkG,eAAkB,MAGb,IAAtClG,KAAKmG,iBAAkB/D,aAAsE,IAA9CpC,KAAKoG,yBAA0BhE,qBCnBhFiE,kCAMQjG,GACVJ,KAAKsG,KAAOlG,EAAQkG,KACpBtG,KAAKuG,MAAQnG,EAAQmG,MACrBvG,KAAKwG,KAAOpG,EAAQoG,KACpBxG,KAAKyG,YAAcrG,EAAQqG,uBAO3B,OAAO,SClBLC,mCAMQtG,GACVJ,KAAK2G,KAAOvG,EAAQuG,KACpB3G,KAAK4G,KAAOxG,EAAQwG,KACpB5G,KAAKwG,KAAOpG,EAAQoG,KACpBxG,KAAKuG,MAAQnG,EAAQmG,aCEnBM,2BACJ7G,WAAmB,IAAID,UACvBC,WAAgB,EAEhBA,aAAwB,GACxBA,iBAAgC,GAChCA,eAA4B,GAE5BA,YAAsB,GACtBA,WAAoB,GACpBA,YAAqB,GAErBA,eAA4B,GAC5BA,cAA0B,GAC1BA,YAAsB,GACtBA,cAA0B,UC3BtB8G,kCAEF,OAAO,aAIP,OAAO,SCLLC,iBAAiBD,8BAST1G,GAIVuF,QAZO3F,UAAO,6BAadA,KAAKU,WAAaN,EAAQM,WAC1BV,KAAKgH,WAAa5G,EAAQ4G,2BAT1B,OAAO,aAaP,OAAOC,OAAOC,UAAUlH,KAAKU,mBCnB3ByG,iCAAiCL,oDAC5B9G,UAAO,sDAQd,OAAO,aAOP,OAAO,SCjBLoH,8BAGFpH,KAAKqH,SAAM7G,cAGD8G,GAIVtH,KAAKqH,IAAMC,QAGPC,GAEJ,OADAC,QAAQC,IAAIF,GACLvH,KAAKqH,WCjBVK,mCAKCC,GACHA,WCNEC,sBCEAC,+BAA+BD,iDAC1B5H,UAAO,+CCDZ8H,qBAAqBF,iDAChB5H,UAAO,yCCDZ+H,uBAAuBH,iDAClB5H,UAAO,8BCDZgI,0BAA0BJ,iDACrB5H,UAAO,iCCDZiI,kBAAkBL,iDACb5H,UAAO,wBCDZkI,oBAAoBN,iDACf5H,UAAO,0BCDZmI,2BAA2BP,iDACtB5H,UAAO,mCCGZoI,mBAMJpI,eAAuB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAEtDA,gBAAmC,IAAIE,eAIrC,OAAO,WAOP,IAAKF,KAAKoC,WACR,MAAM,IAAIiG,MAAM,iCAGK7H,IAAnBR,KAAKsI,WACPtE,OAAOuE,eAFG,GAEiB,YAAa,CACtCC,MAAOxI,KAAKsI,mBCzBdG,oBAWQrI,GANZJ,gBAAmC,IAAIE,IAEvCF,oBAA4B,GAC5BA,wBAAgC,GAI9BA,KAAK0I,KAAOtI,EAAQsI,KACpB1I,KAAK2I,eAAiBvI,EAAQuI,eAC9B3I,KAAKgD,IAAM5C,EAAQ4C,cAOnB,OAAOhD,KAAKgD,YAENwF,GACNxI,KAAKgD,IAAMwF,SC3BTI,8BAeF,YAP8BpI,IAAbR,KAAK6I,IAAoB,EAAI,SACVrI,IAAhBR,KAAK8I,OAAuB,EAAI,SAChBtI,IAAhBR,KAAK+I,OAAuB,EAAI,IAKP,IAIV,IAApB/I,KAAK6I,IAAK5H,SAEa,GAAvBjB,KAAK8I,OAAQ7H,QAEU,GAAvBjB,KAAK+I,OAAQ9H,gBCrB1B+H,0BAGJhJ,gBAAmC,IAAIE,cAOrC,OAAOF,KAAKgD,eAIZ,OAAO,SCjBLiG,gBCCAC,iBAOF,OAAO,SCRLC,0BAMF,OAAO,SCNLC,mBAAmBD,6BAOrBxD,0MCOJ,SAAU0D,GAYR,SAASC,EAAgBC,EAAW,SAClC,GAAiB,UAAbA,EACF,MAAM,IAAIC,+EAC4DD,mBAyF1E,SAASE,EAAgBF,EAAW,QAASnJ,EAAU,CAAEsJ,OAAO,IAC9D,GAAiB,UAAbH,EACF,MAAM,IAAIC,+EAC4DD,mBAGxE,GAAInJ,EAAQsJ,MACV,MAAM,IAAIrB,MACR,yEA5GFgB,EAAmB,aAAKA,EAAmB,cAgB/CrF,OAAOuE,eAAee,EAAgBK,UAAW,WAAY,CAC3DnB,MAAO,UAQTc,EAAgBK,UAAUC,OAAS,SACjCC,EACAzJ,EAAU,CAAE0J,QAAQ,IAEpB,GAAI1J,EAAQ0J,OACV,MAAM,IAAIzB,MAAM,yDAGlB,IAAI0B,EAAM,EACV,IAYYC,EAZNC,EAAMJ,EAAO5I,OAGnB,IAAIiJ,EAAK,EACLC,EAAOC,KAAKC,IAAI,GAAIJ,GAAOA,GAAO,GAAK,GACvCvF,EAAS,IAAI4F,WAAYH,GAAQ,GAAM,GAE3C,KAAOJ,EAAME,GAAK,CAChB,IAAIzB,EAAQqB,EAAOU,WAAWR,KAC9B,GAAa,OAATvB,GAAmBA,GAAS,MAS9B,GAPIuB,EAAME,IAEiB,QAAZ,OADPD,EAAQH,EAAOU,WAAWR,SAE5BA,EACFvB,IAAkB,KAARA,IAAkB,KAAe,KAARwB,GAAiB,QAG3C,OAATxB,GAAmBA,GAAS,MAC9B,SAKJ,GAAI0B,EAAK,EAAIxF,EAAOzD,OAAQ,CAC1BkJ,GAAQ,EACRA,GAAQ,EAAOJ,EAAMF,EAAO5I,OAAU,EACtCkJ,EAAQA,GAAQ,GAAM,EAEtB,MAAMK,EAAS,IAAIF,WAAWH,GAC9BK,EAAOC,IAAI/F,GACXA,EAAS8F,EAGX,GAA6B,IAAhB,WAARhC,GAAL,CAIO,GAA6B,IAAhB,WAARA,GAEV9D,EAAOwF,KAAU1B,GAAS,EAAK,GAAQ,SAClC,GAA6B,IAAhB,WAARA,GAEV9D,EAAOwF,KAAU1B,GAAS,GAAM,GAAQ,IACxC9D,EAAOwF,KAAU1B,GAAS,EAAK,GAAQ,QAClC,CAAA,GAA6B,IAAhB,WAARA,GAOV,SALA9D,EAAOwF,KAAU1B,GAAS,GAAM,EAAQ,IACxC9D,EAAOwF,KAAU1B,GAAS,GAAM,GAAQ,IACxC9D,EAAOwF,KAAU1B,GAAS,EAAK,GAAQ,IAMzC9D,EAAOwF,KAAiB,GAAR1B,EAAgB,SAnB9B9D,EAAOwF,KAAQ1B,EAsBnB,OAAO9D,EAAOgG,MAAM,EAAGR,IAqBzBlG,OAAOuE,eAAekB,EAAgBE,UAAW,WAAY,CAC3DnB,MAAO,UAGTxE,OAAOuE,eAAekB,EAAgBE,UAAW,QAAS,CAAEnB,OAAO,IAEnExE,OAAOuE,eAAekB,EAAgBE,UAAW,YAAa,CAC5DnB,OAAO,IAOTiB,EAAgBE,UAAUgB,OAAS,SACjC7J,EACAV,EAAU,CAAE0J,QAAQ,IAEpB,GAAI1J,EAAgB,OAClB,MAAM,IAAIiI,MAAM,yDAGlB,IAAMuC,EAAQ,IAAIN,WAAWxJ,GAC7B,IAAIiJ,EAAM,EACV,IAAME,EAAMW,EAAM3J,OAClB,MAAM4J,EAAM,GAEZ,KAAOd,EAAME,GAAK,CAChB,IAAMa,EAAQF,EAAMb,KACpB,GAAc,IAAVe,EACF,MAGF,GAAuB,IAAV,IAARA,GAEHD,EAAIE,KAAKD,QACJ,GAAuB,MAAV,IAARA,GAAwB,CAElC,IAAME,EAAuB,GAAfJ,EAAMb,KACpBc,EAAIE,MAAe,GAARD,IAAiB,EAAKE,QAC5B,GAAuB,MAAV,IAARF,GAAwB,CAClC,IAAME,EAAuB,GAAfJ,EAAMb,KACdkB,EAAuB,GAAfL,EAAMb,KACpBc,EAAIE,MAAe,GAARD,IAAiB,GAAOE,GAAS,EAAKC,QAC5C,GAAuB,MAAV,IAARH,GAAwB,CAMlC,IAAII,GACQ,EAARJ,IAAiB,IANQ,GAAfF,EAAMb,OAMmB,IALV,GAAfa,EAAMb,OAKqC,EAJ5B,GAAfa,EAAMb,KAKJ,MAAZmB,IAEFA,GAAa,MACbL,EAAIE,KAAOG,IAAc,GAAM,KAAS,OACxCA,EAAY,MAAsB,KAAZA,GAExBL,EAAIE,KAAKG,IAMb,OAAOC,OAAOC,aAAaC,MAAM,KAAMR,IAGzCxB,EAAmB,YAAIC,EACvBD,EAAmB,YAAII,GAzLzB,CA2LoB,oBAAX6B,OACHA,OACgB,oBAATC,KACPA,UACAvL,iIC5MN,MAAMwL,EAAU,IAAIC,YAAY,SAEhCC,SAAA,SAAuBd,GACrB,OAAOY,EAAQb,OAAOC,IAGxB,MAAMe,EAAU,IAAIC,YAEpBF,SAAA,SAAuBG,GACrB,OAAOF,EAAQ/B,OAAOiC,+LCCxBH,iBAAaI,cA0CTC,EArDsB,KAsDtB3L,EAA2B,IAE3B,IAAI4L,GAAc,EACE,iBAATD,EACTA,EAAO,IAAIE,YAAYF,IAEvBC,GAAc,EACdhM,KAAKkM,gBAAkBH,EAAKnL,YAG9B,IAAMuL,EAAS/L,EAAQ+L,OAAS/L,EAAQ+L,SAAW,EAAI,EACjDvL,EAAamL,EAAKnL,WAAauL,EACrC,IAAIC,EAAWD,GACXF,YAAYI,OAAON,IAASA,aAAgBD,KAC1CC,EAAKnL,aAAemL,EAAKjL,OAAOF,aAClCwL,EAAWL,EAAKtL,WAAa0L,GAE/BJ,EAAOA,EAAKjL,QAEVkL,EACFhM,KAAKkM,gBAAkBtL,EAEvBZ,KAAKkM,gBAAkB,EAEzBlM,KAAKc,OAASiL,EACd/L,KAAKiB,OAASL,EACdZ,KAAKY,WAAaA,EAClBZ,KAAKS,WAAa2L,EAClBpM,KAAKmM,OAAS,EACdnM,KAAKsM,cAAe,EACpBtM,KAAKuM,MAAQ,IAAIC,SAASxM,KAAKc,OAAQsL,EAAUxL,GACjDZ,KAAKyM,MAAQ,EACbzM,KAAK0M,OAAS,aASC9L,EAAa,GAC5B,OAAOZ,KAAKmM,OAASvL,GAAcZ,KAAKiB,wBASxC,OAAOjB,KAAKsM,+BAQZ,OADAtM,KAAKsM,cAAe,EACbtM,mBAQP,OAAQA,KAAKsM,4BAQb,OADAtM,KAAKsM,cAAe,EACbtM,UAOG2M,EAAI,GAEd,OADA3M,KAAKmM,QAAUQ,EACR3M,UAOGmM,GAEV,OADAnM,KAAKmM,OAASA,EACPnM,YASP,OADAA,KAAKyM,MAAQzM,KAAKmM,OACXnM,aASP,OADAA,KAAKmM,OAASnM,KAAKyM,MACZzM,gBASP,OADAA,KAAK0M,OAAO3B,KAAK/K,KAAKmM,QACfnM,eASP,IAAMmM,EAASnM,KAAK0M,OAAOE,MAC3B,QAAepM,IAAX2L,EACF,MAAM,IAAI9D,MAAM,oBAGlB,OADArI,KAAK6M,KAAKV,GACHnM,cAQP,OADAA,KAAKmM,OAAS,EACPnM,qBAUcY,EAAa,GAClC,IAAKZ,KAAK8M,UAAUlM,GAAa,CAEzBmM,EAA2B,GADZ/M,KAAKmM,OAASvL,GAEnC,MAAMoM,EAAW,IAAI1C,WAAWyC,GAChCC,EAASvC,IAAI,IAAIH,WAAWtK,KAAKc,SACjCd,KAAKc,OAASkM,EAASlM,OACvBd,KAAKiB,OAASjB,KAAKY,WAAamM,EAChC/M,KAAKuM,MAAQ,IAAIC,SAASxM,KAAKc,QAEjC,OAAOd,mBAQP,OAA4B,IAArBA,KAAKiN,uBAOZ,OAAOjN,KAAKuM,MAAMW,QAAQlN,KAAKmM,sBAO/B,OAAOnM,KAAKuM,MAAMY,SAASnN,KAAKmM,qBAOhC,OAAOnM,KAAKiN,sBAMGN,EAAI,GACnB,MAAM/B,EAAQ,IAAIN,WAAWqC,GAC7B,IAAK,IAAIS,EAAI,EAAGA,EAAIT,EAAGS,IACrBxC,EAAMwC,GAAKpN,KAAKqN,WAElB,OAAOzC,cAOP,IAAMpC,EAAQxI,KAAKuM,MAAMe,SAAStN,KAAKmM,OAAQnM,KAAKsM,cAEpD,OADAtM,KAAKmM,QAAU,EACR3D,eAOP,IAAMA,EAAQxI,KAAKuM,MAAMgB,UAAUvN,KAAKmM,OAAQnM,KAAKsM,cAErD,OADAtM,KAAKmM,QAAU,EACR3D,cAOP,IAAMA,EAAQxI,KAAKuM,MAAMiB,SAASxN,KAAKmM,OAAQnM,KAAKsM,cAEpD,OADAtM,KAAKmM,QAAU,EACR3D,eAOP,IAAMA,EAAQxI,KAAKuM,MAAMkB,UAAUzN,KAAKmM,OAAQnM,KAAKsM,cAErD,OADAtM,KAAKmM,QAAU,EACR3D,gBAOP,IAAMA,EAAQxI,KAAKuM,MAAMmB,WAAW1N,KAAKmM,OAAQnM,KAAKsM,cAEtD,OADAtM,KAAKmM,QAAU,EACR3D,gBAOP,IAAMA,EAAQxI,KAAKuM,MAAMoB,WAAW3N,KAAKmM,OAAQnM,KAAKsM,cAEtD,OADAtM,KAAKmM,QAAU,EACR3D,aAOP,OAAO2C,OAAOC,aAAapL,KAAK4N,sBAMjBjB,EAAI,GACnB,IAAIkB,EAAS,GACb,IAAK,IAAIT,EAAI,EAAGA,EAAIT,EAAGS,IACrBS,GAAU7N,KAAK8N,WAEjB,OAAOD,WAOOlB,EAAI,GAClB,OAAOoB,oBAAO/N,KAAKgO,UAAUrB,iBAOXnE,GAElB,OADAxI,KAAKiO,WAAWzF,EAAQ,IAAO,GACxBxI,eAMQwI,GAIf,OAHAxI,KAAKkO,gBAAgB,GACrBlO,KAAKuM,MAAM4B,QAAQnO,KAAKmM,SAAU3D,GAClCxI,KAAKoO,yBACEpO,gBAOSwI,GAIhB,OAHAxI,KAAKkO,gBAAgB,GACrBlO,KAAKuM,MAAM8B,SAASrO,KAAKmM,SAAU3D,GACnCxI,KAAKoO,yBACEpO,eAMQwI,GACf,OAAOxI,KAAKiO,WAAWzF,cAOPoC,GAChB5K,KAAKkO,gBAAgBtD,EAAM3J,QAC3B,IAAK,IAAImM,EAAI,EAAGA,EAAIxC,EAAM3J,OAAQmM,IAChCpN,KAAKuM,MAAM8B,SAASrO,KAAKmM,SAAUvB,EAAMwC,IAG3C,OADApN,KAAKoO,yBACEpO,gBAOSwI,GAKhB,OAJAxI,KAAKkO,gBAAgB,GACrBlO,KAAKuM,MAAM+B,SAAStO,KAAKmM,OAAQ3D,EAAOxI,KAAKsM,cAC7CtM,KAAKmM,QAAU,EACfnM,KAAKoO,yBACEpO,iBAOUwI,GAKjB,OAJAxI,KAAKkO,gBAAgB,GACrBlO,KAAKuM,MAAMgC,UAAUvO,KAAKmM,OAAQ3D,EAAOxI,KAAKsM,cAC9CtM,KAAKmM,QAAU,EACfnM,KAAKoO,yBACEpO,gBAOSwI,GAKhB,OAJAxI,KAAKkO,gBAAgB,GACrBlO,KAAKuM,MAAMiC,SAASxO,KAAKmM,OAAQ3D,EAAOxI,KAAKsM,cAC7CtM,KAAKmM,QAAU,EACfnM,KAAKoO,yBACEpO,iBAOUwI,GAKjB,OAJAxI,KAAKkO,gBAAgB,GACrBlO,KAAKuM,MAAMkC,UAAUzO,KAAKmM,OAAQ3D,EAAOxI,KAAKsM,cAC9CtM,KAAKmM,QAAU,EACfnM,KAAKoO,yBACEpO,kBAOWwI,GAKlB,OAJAxI,KAAKkO,gBAAgB,GACrBlO,KAAKuM,MAAMmC,WAAW1O,KAAKmM,OAAQ3D,EAAOxI,KAAKsM,cAC/CtM,KAAKmM,QAAU,EACfnM,KAAKoO,yBACEpO,kBAOWwI,GAKlB,OAJAxI,KAAKkO,gBAAgB,GACrBlO,KAAKuM,MAAMoC,WAAW3O,KAAKmM,OAAQ3D,EAAOxI,KAAKsM,cAC/CtM,KAAKmM,QAAU,EACfnM,KAAKoO,yBACEpO,eAOQ6L,GACf,OAAO7L,KAAKiO,WAAWpC,EAAItB,WAAW,eAOtBsB,GAChB,IAAK,IAAIuB,EAAI,EAAGA,EAAIvB,EAAI5K,OAAQmM,IAC9BpN,KAAKiO,WAAWpC,EAAItB,WAAW6C,IAEjC,OAAOpN,eAOQ6L,GACf,OAAO7L,KAAK4O,WAAWb,oBAAOlC,cAS9B,OAAO,IAAIvB,WAAWtK,KAAKc,OAAQd,KAAKS,WAAYT,KAAKkM,0CAQrDlM,KAAKmM,OAASnM,KAAKkM,kBACrBlM,KAAKkM,gBAAkBlM,KAAKmM,0CCzf7B0C,iDAAL,SAAKA,GACHA,cACAA,cACAA,cACAA,cAJF,CAAKA,iBAAAA,sBAOL,ICPKC,8BDOUD,uBEHTE,wBAUF,OAAO,GCRX,SAASC,uBAAuBC,GAC9B,YAA6BzO,IAAtByO,EAAMC,YAGf,SAASC,QAAMF,GACb,IAAMG,EAAOH,EAAMI,MACnBJ,EAAMC,YAAcE,EAAmB,aACvCH,EAAMK,UAAYF,EAAiB,gBAER5O,IAAvB4O,EAAiB,aACnBH,EAAMM,WAAa,IAAIrP,KAEzB+O,EAAMO,OAASJ,EAAa,aAGxBK,yBAAyBV,2BAS3BpJ,8BAGoByJ,EAAcM,GAClC,MAAMC,EAAK,IAAIF,iBAQf,OANAE,EAAGN,MAAQD,EACXO,EAAGC,QAAUF,EACbC,EAAGE,iBAAmBhB,mBAAiBiB,KAEvCX,QAAMQ,GAECA,aAIP,OAAOX,uBAAuBhP,OCjBlC,SAASmP,QAAMF,GACb,IAAK,MAAM/K,KAAKF,OAAO+L,KAAKd,EAAMI,OAChCJ,EAAMe,UAAUvF,IAAIvG,EAAG+K,EAAMI,MAAMnL,UAIjC+L,yBAKJjQ,eAAsC,IAAIkQ,0BAIpBd,EAAeM,GACnC,MAAMS,EAAK,IAAIF,WAMf,OALAE,EAAGd,MAAQD,EACXe,EAAGP,QAAUF,EAEbP,QAAMgB,GAECA,aAIP,OAAO,sBAIP,OAAOnM,OAAO+L,KAAK/P,KAAKqP,4BAIxB,OAAOrP,KAAKoQ,cAAcnP,mBAGhBS,GACV,GAAI1B,KAAKgQ,UAAUK,IAAI3O,GAErB,OADU1B,KAAKgQ,UAAUM,IAAI5O,GAI/B,MAAM,IAAI2G,0CAA0C3G,OC/DxD,SAAS6O,cAAYC,EAAoBC,GACvCA,EAAGC,SACHF,EAAOG,MAAQF,EAAGG,UAAU,GAC5BJ,EAAOK,QAAUJ,EAAGK,aACpBN,EAAO5P,WAAa6P,EAAGK,aACvBN,EAAOO,2BAA6BN,EAAGK,aACvCN,EAAOQ,6BAA+BP,EAAGK,aACzCN,EAAOS,yBAA2BR,EAAGK,aACrCN,EAAOU,2BAA6BT,EAAGK,aAGzC,SAAS3B,QAAMgC,EAAYrQ,GACzB,MAAMsQ,EAAW,IAAItF,WAAShL,GAG9B,GAFAyP,cAAYY,EAAKX,OAAQY,GAErBD,EAAKvQ,WAAa,GAAK,EACzB,MAAM,IAAIyH,MAAM,qCAGlB+I,EAASV,SACTU,EAASC,KAAK,IACd,IAAMC,EAASC,KAAKpC,MAAMiC,EAASR,UAAUO,EAAKJ,6BAC5CS,EAAQJ,EAASpD,UAAUmD,EAAKH,8BACtCG,EAAKM,aAAehC,iBAAiBiC,eAAeJ,EAAQE,GAEtB,IAAlCL,EAAKF,2BACDU,EAASJ,KAAKpC,MAAMiC,EAASR,UAAUO,EAAKF,2BAC5CW,EAAQR,EAASpD,UAAUmD,EAAKD,4BACtCC,EAAKU,WAAa5B,WAAWyB,eAAeC,EAAQC,UAMlD9B,iBAOQhP,EAAqBgR,GAAc,GAC7C9R,KAAKwQ,OAAS,IAAIpH,WAClB+F,QAAMnP,KAAMc,IAEQ,IAAhBgR,IACF9R,KAAKc,OAASA,cAKhB,OAAO,cAIP,OAAOd,KAAKwQ,OAAOG,uBAInB,OAAO3Q,KAAKwQ,OAAO5P,yBAInB,OAAOZ,KAAKwQ,OAAOK,yCAInB,OAAO7Q,KAAKwQ,OAAOO,8DAInB,OAAO/Q,KAAKwQ,OAAOQ,4DAInB,OAAOhR,KAAKwQ,OAAOS,0DAInB,OAAOjR,KAAKwQ,OAAOU,gDAInB,OAAO,GACPlR,KAAK+Q,2BACL/Q,KAAKgR,6BACLhR,KAAKiR,yBACLjR,KAAKkR,kCC7FHa,mBAAmB5I,6BAQrBxD,mBAIA,OAAwB,IAApB3F,KAAKgS,YAAwC,IAApBhS,KAAKgS,YCRtC,SAASC,uBAAuBhD,GAC9B,YAAuBzO,IAAnByO,EAAMpL,eAAsDrD,IAA5ByO,EAAMiD,2BAGnB1R,IAAnByO,EAAMpL,eAAsDrD,IAA5ByO,EAAMiD,2BAGV1R,IAA5ByO,EAAMiD,wBAC4B1R,IAAhCyO,EAAMkD,4BAAsE3R,IAA/ByO,EAAMmD,+BAKnC5R,IAAnByO,EAAMoD,eAAgD7R,IAAtByO,EAAMqD,kBAChB9R,IAAtByO,EAAMqD,kBAAgD9R,IAAnByO,EAAMoD,kBAKhB7R,IAAzByO,EAAMsD,qBAA4D/R,IAA5ByO,EAAMuD,wBAChBhS,IAA5ByO,EAAMuD,wBAA4DhS,IAAzByO,EAAMsD,mBAOpD,SAASpD,QAAMF,GACb,IAAMG,EAAOH,EAAMI,MACnBJ,EAAMpL,SAAWuL,EAAe,SAChCH,EAAMiD,kBAAoB9C,EAAyB,mBACnDH,EAAMoD,SAAWjD,EAAgB,UACjCH,EAAMqD,YAAclD,EAAmB,aACvCH,EAAMsD,eAAiBnD,EAAuB,iBAC9CH,EAAMuD,kBAAoBpD,EAA0B,oBACpDH,EAAM5N,MAAQ+N,EAAY,MAC1BH,EAAMwD,gBAAkBrD,EAAwB,kBAChDH,EAAMyD,gBAAkBtD,EAAuB,iBAC/CH,EAAMK,UAAYF,EAAiB,WACnCH,EAAMkD,sBAAwB/C,EAA8B,wBAC5DH,EAAMmD,qBAAuBhD,EAA6B,4BAE/B5O,IAAvB4O,EAAiB,aACnBH,EAAMM,WAAa,IAAIrP,KAGzB+O,EAAMO,OAASJ,EAAa,aAGxBuD,yBAAyB5D,2BAoB3BpJ,8BAGoByJ,EAAcM,GAClC,MAAMC,EAAK,IAAIgD,iBAQf,OANAhD,EAAGN,MAAQD,EACXO,EAAGC,QAAUF,EACbC,EAAGE,iBAAmBhB,mBAAiB+D,KAEvCzD,QAAMQ,GAECA,aAIP,OAAOsC,uBAAuBjS,OCnFlC,SAASuQ,cAAYC,EAAoBC,GACvCA,EAAGC,SACHF,EAAOG,MAAQF,EAAGG,UAAU,GAC5BJ,EAAOK,QAAUJ,EAAGK,aACpBN,EAAO5P,WAAa6P,EAAGK,aACvBN,EAAOO,2BAA6BN,EAAGK,aACvCN,EAAOQ,6BAA+BP,EAAGK,aACzCN,EAAOS,yBAA2BR,EAAGK,aACrCN,EAAOU,2BAA6BT,EAAGK,aACvCN,EAAOwB,WAAavB,EAAGK,aAGzB,SAAS3B,QAAM0D,EAAY/R,GACzB,MAAMsQ,EAAW,IAAItF,WAAShL,GAG9B,GAFAyP,cAAYsC,EAAKrC,OAAQY,GAErByB,EAAKjS,WAAa,GAAK,EACzB,MAAM,IAAIyH,MAAM,qCAGlB+I,EAASV,SACTU,EAASC,KAAK,IACd,IAAMC,EAASC,KAAKpC,MAAMiC,EAASR,UAAUiC,EAAK9B,6BAC5CS,EAAQJ,EAASpD,UAAU6E,EAAK7B,8BACtC6B,EAAKpB,aAAekB,iBAAiBjB,eAAeJ,EAAQE,GAEtB,IAAlCqB,EAAK5B,2BACDU,EAASJ,KAAKpC,MAAMiC,EAASR,UAAUiC,EAAK5B,2BAC5CW,EAAQR,EAASpD,UAAU6E,EAAK3B,4BACtC2B,EAAKhB,WAAa5B,WAAWyB,eAAeC,EAAQC,UAMlDgB,iBAUQ9R,EAAqBgR,GAAc,GAC7C9R,KAAKwQ,OAAS,IAAIuB,WAClB5C,QAAMnP,KAAMc,IAEQ,IAAhBgR,IACF9R,KAAKc,OAASA,cAKhB,OAAO,cAIP,OAAOd,KAAKwQ,OAAOG,uBAInB,OAAO3Q,KAAKwQ,OAAO5P,yBAInB,OAAOZ,KAAKwQ,OAAOK,yCAInB,OAAO7Q,KAAKwQ,OAAOO,8DAInB,OAAO/Q,KAAKwQ,OAAOQ,4DAInB,OAAOhR,KAAKwQ,OAAOS,0DAInB,OAAOjR,KAAKwQ,OAAOU,4CAInB,OAAOlR,KAAKwQ,OAAOwB,yCAInB,OAAO,GACPhS,KAAK+Q,2BACL/Q,KAAKgR,6BACLhR,KAAKiR,yBACLjR,KAAKkR,kCCtGH4B,mBAAmB3J,6BAOrBxD,SCFJ,SAASoN,yBAAyB9D,GAChC,YAAuBzO,IAAnByO,EAAMpL,eAAsDrD,IAA5ByO,EAAMiD,2BAGpB1R,IAAlByO,EAAM+D,cAA+CxS,IAAtByO,EAAMC,oBAGT1O,IAA5ByO,EAAMiD,wBAC4B1R,IAAhCyO,EAAMkD,4BAAsE3R,IAA/ByO,EAAMmD,uBAO3D,SAASjD,QAAMF,GACb,IAAMG,EAAOH,EAAMI,MACnBJ,EAAMpL,SAAWuL,EAAe,SAChCH,EAAMiD,kBAAoB9C,EAAyB,mBACnDH,EAAMgE,KAAO7D,EAAW,KACxBH,EAAMiE,IAAM9D,EAAU,IACtBH,EAAMkE,OAAS/D,EAAa,OAC5BH,EAAMlL,OAASqL,EAAa,OAC5BH,EAAMmE,aAAehE,EAAoB,cACzCH,EAAM+D,QAAU5D,EAAe,SAC/BH,EAAMoE,aAAejE,EAAoB,cACzCH,EAAMkD,sBAAwB/C,EAA8B,wBAC5DH,EAAMmD,qBAAuBhD,EAA6B,uBAC1DH,EAAMqE,aAAelE,EAAoB,mBAEd5O,IAAvB4O,EAAiB,aACnBH,EAAMM,WAAa,IAAIrP,KAGzB+O,EAAMO,OAASJ,EAAa,aAGxBmE,yBAAyBxE,2BAoB3BpJ,8BAGoByJ,EAAcM,GAClC,MAAMC,EAAK,IAAI4D,iBAQf,OANA5D,EAAGN,MAAQD,EACXO,EAAGC,QAAUF,EACbC,EAAGE,iBAAmBhB,mBAAiB2E,KAEvCrE,QAAMQ,GAECA,aAIP,OAAOoD,yBAAyB/S,OCvEpC,SAASuQ,YAAYC,EAAoBC,GACvCA,EAAGC,SACHF,EAAOG,MAAQF,EAAGG,UAAU,GAC5BJ,EAAOK,QAAUJ,EAAGK,aACpBN,EAAO5P,WAAa6P,EAAGK,aACvBN,EAAOO,2BAA6BN,EAAGK,aACvCN,EAAOQ,6BAA+BP,EAAGK,aACzCN,EAAOS,yBAA2BR,EAAGK,aACrCN,EAAOU,2BAA6BT,EAAGK,aAGzC,SAAS3B,MAAMsE,EAAY3S,GACzB,MAAMsQ,EAAW,IAAItF,WAAShL,GAG9B,GAFAyP,YAAYkD,EAAKjD,OAAQY,GAErBqC,EAAK7S,WAAa,GAAK,EACzB,MAAM,IAAIyH,MAAM,qCAGlB+I,EAASV,SACTU,EAASC,KAAK,IACd,IAAMC,EAASC,KAAKpC,MAAMiC,EAASR,UAAU6C,EAAK1C,6BAC5CS,EAAQJ,EAASpD,UAAUyF,EAAKzC,8BACtCyC,EAAKhC,aAAe8B,iBAAiB7B,eAAeJ,EAAQE,GAEtB,IAAlCiC,EAAKxC,2BACDU,EAASJ,KAAKpC,MAAMiC,EAASR,UAAU6C,EAAKxC,2BAC5CW,EAAQR,EAASpD,UAAUyF,EAAKvC,4BACtCuC,EAAK5B,WAAa5B,WAAWyB,eAAeC,EAAQC,UAIlD4B,iBAOQ1S,EAAqBgR,GAAc,GAC7C9R,KAAKwQ,OAAS,IAAIsC,WAClB3D,MAAMnP,KAAMc,IAEQ,IAAhBgR,IACF9R,KAAKc,OAASA,cAKhB,OAAO,cAIP,OAAOd,KAAKwQ,OAAOG,uBAInB,OAAO3Q,KAAKwQ,OAAO5P,yBAInB,OAAOZ,KAAKwQ,OAAOK,yCAInB,OAAO7Q,KAAKwQ,OAAOO,8DAInB,OAAO/Q,KAAKwQ,OAAOQ,4DAInB,OAAOhR,KAAKwQ,OAAOS,0DAInB,OAAOjR,KAAKwQ,OAAOU,gDAInB,OAAO,GACPlR,KAAK+Q,2BACL/Q,KAAKgR,6BACLhR,KAAKiR,yBACLjR,KAAKkR,kCC9FHwC,OXAN,SAAK5E,GACHA,YACAA,oBAFF,CAAKA,WAAAA,gBAKL,iBAAeA"}